import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.88002d8f.js";const p="/notes/assets/slice.242287b8.png",o="/notes/assets/slice02.e09358dd.png",e="/notes/assets/intro.b71b3680.png",t="/notes/assets/thread.4084102f.png",c="/notes/assets/groutine.9054a9e7.png",D=JSON.parse('{"title":"Go 语言从入门到实战","description":"","frontmatter":{},"headers":[],"relativePath":"go/plus/index.md","filePath":"go/plus/index.md"}'),r={name:"go/plus/index.md"},E=l(`<h1 id="go-语言从入门到实战" tabindex="-1">Go 语言从入门到实战 <a class="header-anchor" href="#go-语言从入门到实战" aria-label="Permalink to &quot;Go 语言从入门到实战&quot;">​</a></h1><h2 id="go-语言简介" tabindex="-1">Go 语言简介 <a class="header-anchor" href="#go-语言简介" aria-label="Permalink to &quot;Go 语言简介&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>Go 语言诞生于 2007 年，主要是为了解决 Google 内部所发现的问题。</p><ul><li>多核硬件架构</li><li>超大规模分布式计算集群</li><li>Web 模式导致的前所未有的开发规模和更新速度</li></ul><p>大多数互联网公司都会面临上述问题，Go 语言本身就是用来解决上述问题的，所以越来越多公司和组织都在使用 Go。</p><p>除了构建大规模互联网系统之外，在业界大家熟知的一些软件，例如 Docker、Kubernets，都是使用 Go 来编写的，所以 Go 也被称为云端开发语言。著名的区块链项目，像以太坊、HYPERLEDGER 这些都可以用 Go 来开发，所以说 Go 也是当之无愧的区块链开发语言。传统的企业应用，物联网应用，也都有 Go 的身影 ，Go 语言的应用范围也在不断扩展。</p><p>Go 语言创始人：</p><ul><li>Rob Pike：Unix 的早期开发者，UTF-8 创始人</li><li>Ken Thompson：Unix 创始人，C 语言创始人，1983 年获图灵奖</li><li>Robert Griesemer：Google V8 JS Engineer、Hot Spot 开发者</li></ul><p>特性：</p><ul><li>简单 <ul><li>C 37 关键字、C++ 84 关键字、Go 25 关键字</li></ul></li><li>高效 <ul><li>编译的强类型语言</li><li>支持垃圾回收的同时，也支持指针直接进行内存访问</li></ul></li><li>生产力 <ul><li>语法简洁</li><li>存在编程约束，只支持复合，不支持继承</li></ul></li></ul><h3 id="第一个-go-程序" tabindex="-1">第一个 Go 程序 <a class="header-anchor" href="#第一个-go-程序" aria-label="Permalink to &quot;第一个 Go 程序&quot;">​</a></h3><h4 id="简单案例" tabindex="-1">简单案例 <a class="header-anchor" href="#简单案例" aria-label="Permalink to &quot;简单案例&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/ch1/main/hello_world.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/ch1/main/hello_world.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>直接运行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go run hello_world.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go run hello_world.go</span></span></code></pre></div><p>编译后运行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go build hello_world.go </span></span>
<span class="line"><span style="color:#e1e4e8;">./hello_world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go build hello_world.go </span></span>
<span class="line"><span style="color:#24292e;">./hello_world</span></span></code></pre></div><blockquote><p>Go 在默认情况下都会使用静态链接，编译完的 Go 程序都会指示一个独立的二进制文件，具有良好的便携性，可以拷贝到不到的机器上运行。安装部署时，尤其是通过容器安装部署，便携能力很强。</p></blockquote><h4 id="案例分析" tabindex="-1">案例分析 <a class="header-anchor" href="#案例分析" aria-label="Permalink to &quot;案例分析&quot;">​</a></h4><p>应用程序入口</p><ul><li>必须是 main 包：package main</li><li>必须是 main 方法：func main()</li><li>文件名不一定是 main.go</li></ul><p>退出返回值</p><ul><li>Go 中 main 函数不支持任何返回值</li><li>通过 os.Exit 返回状态</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	os.</span><span style="color:#79B8FF;">Exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	os.</span><span style="color:#005CC5;">Exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>在程序中直接通过 os.Args 获取命令行参数</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(os.Args) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">, os.Args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(os.Args) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">, os.Args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">go run hello_world.go heora</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">go run hello_world.go heora</span></span></code></pre></div><h2 id="_01-基础程序结构" tabindex="-1">01. 基础程序结构 <a class="header-anchor" href="#_01-基础程序结构" aria-label="Permalink to &quot;01. 基础程序结构&quot;">​</a></h2><h3 id="变量、常量" tabindex="-1">变量、常量 <a class="header-anchor" href="#变量、常量" aria-label="Permalink to &quot;变量、常量&quot;">​</a></h3><blockquote><p>The master has failed more times than the beginner has tried.</p></blockquote><h4 id="编写测试程序" tabindex="-1">编写测试程序 <a class="header-anchor" href="#编写测试程序" aria-label="Permalink to &quot;编写测试程序&quot;">​</a></h4><ul><li>源码文件以 _test 结尾：xxx_test.go</li><li>测试方法名以 Test 开头：<code>func TestXXX(t *testing.T) {...}</code></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/ch2/test/first_test.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">try_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestTry</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;my first try!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/ch2/test/first_test.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">try_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestTry</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;my first try!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="变量定义" tabindex="-1">变量定义 <a class="header-anchor" href="#变量定义" aria-label="Permalink to &quot;变量定义&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/ch2/fib/fib_test.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fib</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestFibList</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 1. 第一种方式</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// var a int = 1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// var b int = 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 2. 第二种方式</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// var (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 	a int = 1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 	b     = 1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 3. 第三种方式</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">	b </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot; &quot;</span><span style="color:#E1E4E8;">, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">		tmp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> a</span></span>
<span class="line"><span style="color:#E1E4E8;">		a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b</span></span>
<span class="line"><span style="color:#E1E4E8;">		b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tmp </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> a</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/ch2/fib/fib_test.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fib</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestFibList</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 1. 第一种方式</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// var a int = 1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// var b int = 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 2. 第二种方式</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// var (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 	a int = 1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 	b     = 1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 3. 第三种方式</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">	b </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot; &quot;</span><span style="color:#24292E;">, b)</span></span>
<span class="line"><span style="color:#24292E;">		tmp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> a</span></span>
<span class="line"><span style="color:#24292E;">		a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b</span></span>
<span class="line"><span style="color:#24292E;">		b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> tmp </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> a</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>赋值支持自动类型推断</li><li>在一个赋值语句中可以对多个变量同时赋值</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestExchange</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// a := 1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// b := 2</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// tmp := a</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// a = b</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// b = tmp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">	b </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	a, b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b, a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestExchange</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// a := 1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// b := 2</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// tmp := a</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// a = b</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// b = tmp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">	b </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	a, b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b, a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a, b)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="常量定义" tabindex="-1">常量定义 <a class="header-anchor" href="#常量定义" aria-label="Permalink to &quot;常量定义&quot;">​</a></h4><p>支持快速设置连续值</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">constant_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	Monday </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iota</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">	Tuesday</span></span>
<span class="line"><span style="color:#E1E4E8;">	Wednesday</span></span>
<span class="line"><span style="color:#E1E4E8;">	Thursday</span></span>
<span class="line"><span style="color:#E1E4E8;">	Friday</span></span>
<span class="line"><span style="color:#E1E4E8;">	Saturday</span></span>
<span class="line"><span style="color:#E1E4E8;">	Sunday</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	Readable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iota</span></span>
<span class="line"><span style="color:#E1E4E8;">	Writable</span></span>
<span class="line"><span style="color:#E1E4E8;">	Executable</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestConstant</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(Monday, Tuesday) </span><span style="color:#6A737D;">// 1 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 0111</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Readable </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Readable, a</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Writable </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Writable, a</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Executable </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> Executable) </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// true true true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">constant_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	Monday </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iota</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">	Tuesday</span></span>
<span class="line"><span style="color:#24292E;">	Wednesday</span></span>
<span class="line"><span style="color:#24292E;">	Thursday</span></span>
<span class="line"><span style="color:#24292E;">	Friday</span></span>
<span class="line"><span style="color:#24292E;">	Saturday</span></span>
<span class="line"><span style="color:#24292E;">	Sunday</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	Readable </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iota</span></span>
<span class="line"><span style="color:#24292E;">	Writable</span></span>
<span class="line"><span style="color:#24292E;">	Executable</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestConstant</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(Monday, Tuesday) </span><span style="color:#6A737D;">// 1 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 0111</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Readable </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Readable, a</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Writable </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Writable, a</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Executable </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> Executable) </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// true true true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h3><h4 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h4><table><thead><tr><th>数据类型</th></tr></thead><tbody><tr><td>bool</td></tr><tr><td>string</td></tr><tr><td>int init8 int16 int32 int64</td></tr><tr><td>uint uint8 uint16 uint32 uint64 uintptr</td></tr><tr><td>byte // alias for uint8</td></tr><tr><td>rune // alias for int32, represents a Unicode code point</td></tr><tr><td>float32 float64</td></tr><tr><td>complex64 complex128</td></tr></tbody></table><p>类型转化</p><ul><li>Go 语言不支持隐式类型转换</li><li>别名和原有类型也不能进行隐式类型转换</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyInt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int64</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestType</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">int64</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">int32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// b = a // cannot use a (variable of type int) as int64 value in assignmentcompiler</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// c = a // cannot use a (variable of type int) as int64 value in assignmentcompiler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int64</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#E1E4E8;">	c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">int32</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d MyInt</span></span>
<span class="line"><span style="color:#E1E4E8;">	d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MyInt</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a, b, c, d)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyInt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int64</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestType</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">int64</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> c </span><span style="color:#D73A49;">int32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// b = a // cannot use a (variable of type int) as int64 value in assignmentcompiler</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// c = a // cannot use a (variable of type int) as int64 value in assignmentcompiler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int64</span><span style="color:#24292E;">(a)</span></span>
<span class="line"><span style="color:#24292E;">	c </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">int32</span><span style="color:#24292E;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d MyInt</span></span>
<span class="line"><span style="color:#24292E;">	d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MyInt</span><span style="color:#24292E;">(a)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a, b, c, d)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Go 语言对于类型转换非常严格， 不支持隐式类型转换。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyInt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 类型再定义，支持强制类型转换，不支持判等操作</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyInt</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 类型别名，支持直接判等操作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyInt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 类型再定义，支持强制类型转换，不支持判等操作</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyInt</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 类型别名，支持直接判等操作</span></span></code></pre></div><h4 id="类型的预定义值" tabindex="-1">类型的预定义值 <a class="header-anchor" href="#类型的预定义值" aria-label="Permalink to &quot;类型的预定义值&quot;">​</a></h4><ul><li>math.MaxInt64</li><li>math.MaxFloat64</li><li>math.MaxUnit32</li></ul><h4 id="指针类型" tabindex="-1">指针类型 <a class="header-anchor" href="#指针类型" aria-label="Permalink to &quot;指针类型&quot;">​</a></h4><p>Go 支持垃圾回收机制 ，同时作为一种非常高效的语言，也支持使用指针直接访问内存空间。</p><p>不过 Go 语言指针使用也有一些限制：</p><ul><li>不支持指针运算</li><li>string 是值类型，默认值是空字符串，而不是 nil</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestPoint</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">	aPtr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// aPtr = aPtr + 1 // cannot convert 1 (untyped int constant) to *int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a, aPtr)           </span><span style="color:#6A737D;">// 1 0x140000a41c8</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, a, aPtr) </span><span style="color:#6A737D;">// int *int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestPoint</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">	aPtr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// aPtr = aPtr + 1 // cannot convert 1 (untyped int constant) to *int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a, aPtr)           </span><span style="color:#6A737D;">// 1 0x140000a41c8</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%T</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%T</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, a, aPtr) </span><span style="color:#6A737D;">// int *int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestStrng</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// **</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s))        </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestStrng</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;*&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// **</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s))        </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><h4 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h4><p>A = 10, B = 20</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>相加</td><td>A + B = 30</td></tr><tr><td>-</td><td>相减</td><td>A - B = -10</td></tr><tr><td>*</td><td>相乘</td><td>A * B = 200</td></tr><tr><td>/</td><td>相除</td><td>B / A = 2</td></tr><tr><td>%</td><td>取余</td><td>B % A = 0</td></tr><tr><td>++</td><td>自增</td><td>A++ = 11</td></tr><tr><td>--</td><td>自减</td><td>A-- = 9</td></tr></tbody></table><p>Go 语言没有前置 ++，前置 -- 。</p><h4 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h4><p>A = 10, B = 20</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个值是否相等，如果相等返回 true，否则返回 false</td><td>A == B false</td></tr><tr><td>!=</td><td>检查两个值是否相等，如果不想等返回 true，否则返回 false</td><td>A != B true</td></tr><tr><td>&gt;</td><td>检查左边值是否大于右边值，如果是返回 true，否则返回 false</td><td>A &gt; B false</td></tr><tr><td>&lt;</td><td>检查左边值是否小于右边值，如果是返回 true，否则返回 false</td><td>A &lt; B true</td></tr><tr><td>&gt;=</td><td>检查左边值是否大于等于右边值，如果是返回 true，否则返回 false</td><td>A &gt;= B false</td></tr><tr><td>&lt;=</td><td>检查左边值是否小于等于右边值，，如果是返回 true，否则返回 false</td><td>A &lt;= B true</td></tr></tbody></table><p><strong>用 == 比较数组</strong></p><p>很多主流语言中，数组是引用类型，使用 == 比较时，实际上是比较两个数组的引用，而不是比较值，在 Go 中则完全不同。</p><ul><li>相同维数且含有相同个数元素的数组才可以比较；</li><li>每个元素都相同的才相等。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestCompareArray</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	b </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	c </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	d </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// t.Log(a == c) // cannot compare a == c (mismatched types [4]int and</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> d) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a, b, c, d)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestCompareArray</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	b </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	c </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	d </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// t.Log(a == c) // cannot compare a == c (mismatched types [4]int and</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> d) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a, b, c, d)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h4><p>A = 10, B = 20</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑 AND 运算符。如果两边的操作数都是 true，则条件为 true，否则为 false</td><td>A &amp;&amp; B false</td></tr><tr><td>||</td><td>逻辑 OR 运算符。如果两边的操作数有一个 true，则条件为 true，否则为 false</td><td>A || B true</td></tr><tr><td>!</td><td>逻辑 NOT 运算符。如果条件为 true，则逻辑 NOT 条件为 false，否则为 true</td><td>!(A &amp;&amp; B) true</td></tr></tbody></table><h4 id="位运算符" tabindex="-1">位运算符 <a class="header-anchor" href="#位运算符" aria-label="Permalink to &quot;位运算符&quot;">​</a></h4><p>和主流语言基本一致，差异如下。</p><p>&amp;^ 按位置零</p><ul><li>1 &amp;^ 0 -- 1</li><li>1 &amp;^ 1 -- 0</li><li>0 &amp;^ 1 -- 0</li><li>0 &amp;^ 0 -- 0</li></ul><h3 id="条件和循环" tabindex="-1">条件和循环 <a class="header-anchor" href="#条件和循环" aria-label="Permalink to &quot;条件和循环&quot;">​</a></h3><h4 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h4><p>Go 语言仅支持循环关键字 for</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">; j</span><span style="color:#F97583;">++</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">; j</span><span style="color:#D73A49;">++</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// while 条件循环</span></span>
<span class="line"><span style="color:#6A737D;">// while &lt;= 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestWhileLoop</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		n</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// while 条件循环</span></span>
<span class="line"><span style="color:#6A737D;">// while &lt;= 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestWhileLoop</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		n</span><span style="color:#D73A49;">++</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 无限循环</span></span>
<span class="line"><span style="color:#6A737D;">// while(true)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 无限循环</span></span>
<span class="line"><span style="color:#6A737D;">// while(true)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="条件语句-if-条件" tabindex="-1">条件语句 - if 条件 <a class="header-anchor" href="#条件语句-if-条件" aria-label="Permalink to &quot;条件语句 - if 条件&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> condition {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// code to be executed if condition is true</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// code to be executed if condition is false  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> condition {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// code to be executed if condition is true</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// code to be executed if condition is false  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> condition</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// code to be executed if condition-1 is true</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> condition</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// code to be executed if condition-2 is true</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// code to be executed if both condition1 and condition2 are false  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> condition</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// code to be executed if condition-1 is true</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> condition</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// code to be executed if condition-2 is true</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// code to be executed if both condition1 and condition2 are false  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>condition 表达式结果必须为布尔值</li><li>支持变量赋值 <ul><li>由于 go 支持多返回值，配合使用比较便捷</li></ul></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> decleartion; condition {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// code to be exectuted if condition is true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> decleartion; condition {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// code to be exectuted if condition is true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestIfMulitSec</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; a {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1 == 1&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestIfMulitSec</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; a {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1 == 1&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestIfMulitSec</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">someFun</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestIfMulitSec</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">someFun</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="条件语句-switch-条件" tabindex="-1">条件语句 - switch 条件 <a class="header-anchor" href="#条件语句-switch-条件" aria-label="Permalink to &quot;条件语句 - switch 条件&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> os </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> runtime.GOOS; os {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;darwin&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;OS X.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;linux&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Linux.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">.&quot;</span><span style="color:#E1E4E8;">, os)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> os </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> runtime.GOOS; os {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;darwin&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;OS X.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;linux&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Linux.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">.&quot;</span><span style="color:#24292E;">, os)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> Num </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Num </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#E1E4E8;">  	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;0-3&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;"> 	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> Num </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Num </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span></span>
<span class="line"><span style="color:#E1E4E8;">  	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;4-6&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> Num </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> Num </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span></span>
<span class="line"><span style="color:#E1E4E8;">  	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;7-9&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> Num </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Num </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#24292E;">  	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;0-3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;"> 	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> Num </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Num </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span></span>
<span class="line"><span style="color:#24292E;">  	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;4-6&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> Num </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> Num </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span></span>
<span class="line"><span style="color:#24292E;">  	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;7-9&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>条件表达式不限制为常量或者整数；</li><li>单个 case 中，可以出现多个结果选项，使用逗号分隔；</li><li>与 C 语言等规则相反，Go 语言不需要使用 break 来明确退出一个 case；</li><li>可以不设定 switch 之后的条件表达式，在此种情况下，整个 switch 结构与多个 if...else... 的逻辑作用等同。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSWitchMultiCase</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> i {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;even&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;odd&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;it is not 0-3&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSWitchMultiCase</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> i {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;even&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;odd&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;it is not 0-3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSwitchCaseCondition</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;even&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> i</span><span style="color:#F97583;">%</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;odd&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">			t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;it is not 0-3&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSwitchCaseCondition</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;even&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> i</span><span style="color:#D73A49;">%</span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;odd&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">			t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;it is not 0-3&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_02-常用集合" tabindex="-1">02. 常用集合 <a class="header-anchor" href="#_02-常用集合" aria-label="Permalink to &quot;02. 常用集合&quot;">​</a></h2><h3 id="数据和切片" tabindex="-1">数据和切片 <a class="header-anchor" href="#数据和切片" aria-label="Permalink to &quot;数据和切片&quot;">​</a></h3><h4 id="数组声明" tabindex="-1">数组声明 <a class="header-anchor" href="#数组声明" aria-label="Permalink to &quot;数组声明&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestArrayInit</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> arr [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	arr1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	arr3 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	arr1[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(arr[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], arr[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 0 0</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(arr1)           </span><span style="color:#6A737D;">// [1, 6, 3, 4]</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(arr3)           </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestArrayInit</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> arr [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	arr1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	arr3 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	arr1[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], arr[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 0 0</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(arr1)           </span><span style="color:#6A737D;">// [1, 6, 3, 4]</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(arr3)           </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="数组元素遍历" tabindex="-1">数组元素遍历 <a class="header-anchor" href="#数组元素遍历" aria-label="Permalink to &quot;数组元素遍历&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestArrayTravel</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	arr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 1. method1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(arr); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">((arr[i]))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 2. method2</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> idx, e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> arr {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(idx, e)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 3. method3</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, e </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> arr {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(e)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestArrayTravel</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	arr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 1. method1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(arr); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">((arr[i]))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 2. method2</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> idx, e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> arr {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(idx, e)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 3. method3</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, e </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> arr {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(e)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="数组截取" tabindex="-1">数组截取 <a class="header-anchor" href="#数组截取" aria-label="Permalink to &quot;数组截取&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">a[开始索引(包含), 结束索引(不包含)]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">a[开始索引(包含), 结束索引(不包含)]</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestArraySection</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	arr </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(arr[:</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// [1 2 3]</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(arr[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">:]) </span><span style="color:#6A737D;">// [4 5]</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(arr[:])  </span><span style="color:#6A737D;">// [1 2 3 4 5]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestArraySection</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	arr </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(arr[:</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// [1 2 3]</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(arr[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">:]) </span><span style="color:#6A737D;">// [4 5]</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(arr[:])  </span><span style="color:#6A737D;">// [1 2 3 4 5]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>数组截取之后，其实就是一个 slice。</p></blockquote><h4 id="切片声明" tabindex="-1">切片声明 <a class="header-anchor" href="#切片声明" aria-label="Permalink to &quot;切片声明&quot;">​</a></h4><img src="`+p+`"><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSliceInit</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s0 []</span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s0), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(s0)) </span><span style="color:#6A737D;">// 0 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	s0 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(s0, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s0), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(s0)) </span><span style="color:#6A737D;">// 1 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	s1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s1), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(s1)) </span><span style="color:#6A737D;">// 4 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	s2 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s2), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(s2)) </span><span style="color:#6A737D;">// 3 5</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// cap 容量，len 可访问元素个数</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// t.Log(s2[0], s2[1], s2[2], s2[3], s2[4]) // index out of range [3] with length 3 [recovered]</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(s2[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], s2[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], s2[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 0 0 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	s2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(s2, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s2), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(s2))           </span><span style="color:#6A737D;">// 4 5</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(s2[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], s2[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], s2[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], s2[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 0 0 0 5</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSliceInit</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s0 []</span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s0), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(s0)) </span><span style="color:#6A737D;">// 0 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	s0 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(s0, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s0), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(s0)) </span><span style="color:#6A737D;">// 1 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	s1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s1), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(s1)) </span><span style="color:#6A737D;">// 4 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	s2 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s2), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(s2)) </span><span style="color:#6A737D;">// 3 5</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// cap 容量，len 可访问元素个数</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// t.Log(s2[0], s2[1], s2[2], s2[3], s2[4]) // index out of range [3] with length 3 [recovered]</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(s2[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], s2[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], s2[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 0 0 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	s2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(s2, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s2), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(s2))           </span><span style="color:#6A737D;">// 4 5</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(s2[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], s2[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], s2[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], s2[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 0 0 0 5</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="切片共享存储结构" tabindex="-1">切片共享存储结构 <a class="header-anchor" href="#切片共享存储结构" aria-label="Permalink to &quot;切片共享存储结构&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSliceGrowing</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(s, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(s))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 当容量不够时，会乘 2 倍的方式进行扩展</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 当扩展时，会开启新的存储空间，并将原有空间的元素拷贝到新空间中间</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 1 1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 2 2</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 3 4</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 4 4</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 5 8</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 6 8</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 7 8</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 8 8</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 9 16</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 10 16</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSliceGrowing</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(s, i)</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(s))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 当容量不够时，会乘 2 倍的方式进行扩展</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 当扩展时，会开启新的存储空间，并将原有空间的元素拷贝到新空间中间</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 1 1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 2 2</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 3 4</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 4 4</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 5 8</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 6 8</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 7 8</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 8 8</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 9 16</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 10 16</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><img src="`+o+`"><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSliceShareMemory</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	year </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;Jan&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Feb&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Mar&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Apr&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;May&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Jun&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Jul&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Aug&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Sep&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Oct&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Nov&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Dec&quot;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	Q2 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> year[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(Q2, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(Q2), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(Q2)) </span><span style="color:#6A737D;">// [Apr May Jun] 3 9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	summer </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> year[</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(summer, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(summer), </span><span style="color:#79B8FF;">cap</span><span style="color:#E1E4E8;">(summer)) </span><span style="color:#6A737D;">// [Jun Jul Aug] 3 7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	summer[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Unknow&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(Q2)   </span><span style="color:#6A737D;">// [Apr May Unknow]</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(year) </span><span style="color:#6A737D;">// [Jan Feb Mar Apr May Unknow Jul Aug Sep Oct Nov Dec]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSliceShareMemory</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	year </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;Jan&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Feb&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Mar&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Apr&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;May&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Jun&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Jul&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Aug&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Sep&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Oct&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Nov&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Dec&quot;</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	Q2 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> year[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(Q2, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(Q2), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(Q2)) </span><span style="color:#6A737D;">// [Apr May Jun] 3 9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	summer </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> year[</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(summer, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(summer), </span><span style="color:#005CC5;">cap</span><span style="color:#24292E;">(summer)) </span><span style="color:#6A737D;">// [Jun Jul Aug] 3 7</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	summer[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Unknow&quot;</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(Q2)   </span><span style="color:#6A737D;">// [Apr May Unknow]</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(year) </span><span style="color:#6A737D;">// [Jan Feb Mar Apr May Unknow Jul Aug Sep Oct Nov Dec]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="数组-vs-切片" tabindex="-1">数组 vs 切片 <a class="header-anchor" href="#数组-vs-切片" aria-label="Permalink to &quot;数组 vs 切片&quot;">​</a></h4><ul><li>容量是否可伸缩 <ul><li>数组定长</li><li>切片不定长</li></ul></li><li>是否可以进行比较 <ul><li>相同维数、相同长度的数组是可以比较的</li><li>切片不能比较</li></ul></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestSliceComparing</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	b </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> b { </span><span style="color:#6A737D;">// cannot compare a == b (slice can only be compared to nil)</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;equal&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestSliceComparing</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	a </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	b </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> b { </span><span style="color:#6A737D;">// cannot compare a == b (slice can only be compared to nil)</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;equal&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h3><h4 id="map-声明" tabindex="-1">Map 声明 <a class="header-anchor" href="#map-声明" aria-label="Permalink to &quot;Map 声明&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">m </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;three&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">m1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">m1[</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">m2 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">/**Initial Capacity*/</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 为什么不初始化 len ?</span></span>
<span class="line"><span style="color:#6A737D;">// 切片中 len 都会赋值为零值，map 没有办法确认零值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">m </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">m1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">m1[</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">m2 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">/**Initial Capacity*/</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 为什么不初始化 len ?</span></span>
<span class="line"><span style="color:#6A737D;">// 切片中 len 都会赋值为零值，map 没有办法确认零值</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestInitMap</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	m1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(m1[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">])                 </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;len m1=</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(m1)) </span><span style="color:#6A737D;">// len m1=3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	m2 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	m2[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;len m2=</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(m2)) </span><span style="color:#6A737D;">// len m2=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	m3 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;len m3=</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(m3)) </span><span style="color:#6A737D;">// len m3=0</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestInitMap</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	m1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(m1[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">])                 </span><span style="color:#6A737D;">// 4</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;len m1=</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(m1)) </span><span style="color:#6A737D;">// len m1=3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	m2 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	m2[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;len m2=</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(m2)) </span><span style="color:#6A737D;">// len m2=1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	m3 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;len m3=</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(m3)) </span><span style="color:#6A737D;">// len m3=0</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="map-元素访问" tabindex="-1">Map 元素访问 <a class="header-anchor" href="#map-元素访问" aria-label="Permalink to &quot;Map 元素访问&quot;">​</a></h4><p>在访问的 key 不存在时，会返回零值，不能通过返回 nil 来判断元素是否存在。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestAccessNotExistingKey</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	m1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(m1[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	m1[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(m1[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 无法区分不存在值或实际值为 0</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 需要自主判断</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// m1[3] = 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> _, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> m1[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]; ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key 3 value is </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, m1[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key 3 is not existing.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestAccessNotExistingKey</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	m1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(m1[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	m1[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(m1[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 无法区分不存在值或实际值为 0</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 需要自主判断</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// m1[3] = 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> _, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> m1[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]; ok {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key 3 value is </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, m1[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key 3 is not existing.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="map-遍历" tabindex="-1">Map 遍历 <a class="header-anchor" href="#map-遍历" aria-label="Permalink to &quot;Map 遍历&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">m </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#9ECBFF;">&quot;one&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;two&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;three&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> m {</span></span>
<span class="line"><span style="color:#E1E4E8;">  t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(k, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">m </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#032F62;">&quot;one&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;two&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;three&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> m {</span></span>
<span class="line"><span style="color:#24292E;">  t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(k, v)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestTravelMap</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	m1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> k, v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> m1 {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(k, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 1 1</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 2 4</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 3 9</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestTravelMap</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	m1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> k, v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> m1 {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(k, v)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 1 1</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 2 4</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 3 9</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>Map 底层使用使用 hash 表机制，所以遍历结果并不总是有序的。</p></blockquote><h4 id="map-与工厂模式" tabindex="-1">Map 与工厂模式 <a class="header-anchor" href="#map-与工厂模式" aria-label="Permalink to &quot;Map 与工厂模式&quot;">​</a></h4><ul><li>Map 的 value 可以是一个方法 <ul><li>Go 语言中，函数是一等公民</li></ul></li><li>与 Go 的 Dock type 接口方式一起，可以方便的实现单一方法对象的工厂模式</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">map_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestMapWithFunValue</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	m </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	m[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> op }</span></span>
<span class="line"><span style="color:#E1E4E8;">	m[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> op </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> op }</span></span>
<span class="line"><span style="color:#E1E4E8;">	m[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> op </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> op </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> op }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(m[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">](</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), m[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">](</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">), m[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">](</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 2 4 8 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">map_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestMapWithFunValue</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	m </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	m[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> op }</span></span>
<span class="line"><span style="color:#24292E;">	m[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> op </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> op }</span></span>
<span class="line"><span style="color:#24292E;">	m[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> op </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> op </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> op }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(m[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">](</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), m[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">](</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">), m[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">](</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 2 4 8 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="实现-set" tabindex="-1">实现 Set <a class="header-anchor" href="#实现-set" aria-label="Permalink to &quot;实现 Set&quot;">​</a></h4><p>Go 语言没有提供内置的 Set，我们可以使用 Map 实现一个 Set。</p><ul><li>元素唯一性</li><li>基本操作 <ul><li>添加元素</li><li>判断元素是否存在</li><li>删除元素</li><li>元素个数</li></ul></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestMapForSet</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	set </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	set[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	n </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> set[n] {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> is existing&quot;</span><span style="color:#E1E4E8;">, n)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> is not existing&quot;</span><span style="color:#E1E4E8;">, n)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	set[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(set)) </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">delete</span><span style="color:#E1E4E8;">(set, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(set)) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestMapForSet</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	set </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">bool</span><span style="color:#24292E;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	set[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	n </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> set[n] {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> is existing&quot;</span><span style="color:#24292E;">, n)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> is not existing&quot;</span><span style="color:#24292E;">, n)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	set[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(set)) </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">delete</span><span style="color:#24292E;">(set, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(set)) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_03-字符串" tabindex="-1">03. 字符串 <a class="header-anchor" href="#_03-字符串" aria-label="Permalink to &quot;03. 字符串&quot;">​</a></h2><h3 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><ul><li>string 是数据类型，不是引用或指针类型</li><li>string 是只读的 byte slice，len 函数可以获取它所包含的 byte 数</li><li>string 的 byte 数组可以存放任何数据</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestString</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> s </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(s) </span><span style="color:#6A737D;">// 初始化为默认零值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s)) </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// string 是不可变的 byte 切片</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// s[1] = &#39;3&#39; // cannot assign to s[1] (value of type byte)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\xE4\\xB8\\xA5</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 可以存储二进制数据</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(s)           </span><span style="color:#6A737D;">// 严</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	s </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;中&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(s)) </span><span style="color:#6A737D;">// 3 存储的是 byte 数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	c </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#79B8FF;">rune</span><span style="color:#E1E4E8;">(s)</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(c)) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// t.Log(&quot;run size:&quot;, unsafe.Sizeof(c[0])) // run size: 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;中 unicode </span><span style="color:#79B8FF;">%x</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, c[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// 中 unicode 4e2d</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;中 utf8 </span><span style="color:#79B8FF;">%x</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, s)       </span><span style="color:#6A737D;">// 中 utf8 e4b8ad</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestString</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> s </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(s) </span><span style="color:#6A737D;">// 初始化为默认零值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s)) </span><span style="color:#6A737D;">// 5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// string 是不可变的 byte 切片</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// s[1] = &#39;3&#39; // cannot assign to s[1] (value of type byte)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\xE4\\xB8\\xA5</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 可以存储二进制数据</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(s)           </span><span style="color:#6A737D;">// 严</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	s </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;中&quot;</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(s)) </span><span style="color:#6A737D;">// 3 存储的是 byte 数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	c </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#005CC5;">rune</span><span style="color:#24292E;">(s)</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(c)) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// t.Log(&quot;run size:&quot;, unsafe.Sizeof(c[0])) // run size: 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;中 unicode </span><span style="color:#005CC5;">%x</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, c[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// 中 unicode 4e2d</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;中 utf8 </span><span style="color:#005CC5;">%x</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, s)       </span><span style="color:#6A737D;">// 中 utf8 e4b8ad</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Unicode UTF8</p><ul><li>Unicode 是一种字符集（code point）</li><li>UTF8 是 unicode 的存储实现（转换为字节序列的规则）</li></ul><h3 id="编码与存储" tabindex="-1">编码与存储 <a class="header-anchor" href="#编码与存储" aria-label="Permalink to &quot;编码与存储&quot;">​</a></h3><table><thead><tr><th>字符</th><th>“中”</th></tr></thead><tbody><tr><td>Unicode</td><td>0x4E2D</td></tr><tr><td>UTF-8</td><td>0xE4B8AD</td></tr><tr><td>string/[]byte</td><td>[0xE4, 0xB8, 0xAD]</td></tr></tbody></table><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestStringToRune</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;中华人民共和国&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, c </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> s {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">%[1]c</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%[1]d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, c)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 中 20013</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 华 21326</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 人 20154</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 民 27665</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 共 20849</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 和 21644</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 国 22269</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestStringToRune</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;中华人民共和国&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, c </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> s {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">%[1]c</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">%[1]d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, c)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 中 20013</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 华 21326</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 人 20154</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 民 27665</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 共 20849</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 和 21644</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 国 22269</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html?from=timeline" target="_blank" rel="noreferrer">阮一峰博客-字符串编码</a></p><h3 id="常用字符串处理函数" tabindex="-1">常用字符串处理函数 <a class="header-anchor" href="#常用字符串处理函数" aria-label="Permalink to &quot;常用字符串处理函数&quot;">​</a></h3><ul><li>strings 包 <a href="https://golang.org/pkg/strings" target="_blank" rel="noreferrer">https://golang.org/pkg/strings</a></li><li>strconv 包 <a href="https://golang.org/pkg/strconv" target="_blank" rel="noreferrer">https://golang.org/pkg/strconv</a></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestStringFn</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;A,B,C&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	parts </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> strings.</span><span style="color:#79B8FF;">Split</span><span style="color:#E1E4E8;">(s, </span><span style="color:#9ECBFF;">&quot;,&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, part </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> parts {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(part)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// A</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// B</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// C</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(strings.</span><span style="color:#79B8FF;">Join</span><span style="color:#E1E4E8;">(parts, </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// A-B-C</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestStringConv</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	s </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> strconv.</span><span style="color:#79B8FF;">Itoa</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;str&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> s) </span><span style="color:#6A737D;">// str10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> strconv.</span><span style="color:#79B8FF;">Atoi</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> i) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestStringFn</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;A,B,C&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	parts </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> strings.</span><span style="color:#005CC5;">Split</span><span style="color:#24292E;">(s, </span><span style="color:#032F62;">&quot;,&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, part </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> parts {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(part)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// A</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// B</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// C</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(strings.</span><span style="color:#005CC5;">Join</span><span style="color:#24292E;">(parts, </span><span style="color:#032F62;">&quot;-&quot;</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// A-B-C</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestStringConv</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	s </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> strconv.</span><span style="color:#005CC5;">Itoa</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;str&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> s) </span><span style="color:#6A737D;">// str10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> strconv.</span><span style="color:#005CC5;">Atoi</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> i) </span><span style="color:#6A737D;">// 20</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_04-函数" tabindex="-1">04. 函数 <a class="header-anchor" href="#_04-函数" aria-label="Permalink to &quot;04. 函数&quot;">​</a></h2><h3 id="go-语言中的函数" tabindex="-1">Go 语言中的函数 <a class="header-anchor" href="#go-语言中的函数" aria-label="Permalink to &quot;Go 语言中的函数&quot;">​</a></h3><p>函数是一等公民。</p><ul><li>可以多有多个返回值；</li><li>所有参数都是值传递； <ul><li>slice、map、channel 也是值传递</li></ul></li><li>函数可以作为变量的值；</li><li>函数可以作为参数和返回值。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">returnMultiValues</span><span style="color:#E1E4E8;">() (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rand.</span><span style="color:#79B8FF;">Intn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">), rand.</span><span style="color:#79B8FF;">Intn</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timeSpent</span><span style="color:#E1E4E8;">(inner </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		start </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">Now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		ret </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inner</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;time spent:&quot;</span><span style="color:#E1E4E8;">, time.</span><span style="color:#79B8FF;">Slice</span><span style="color:#E1E4E8;">(start).</span><span style="color:#79B8FF;">Seconds</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">slowFn</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Second </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> op</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestFn</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	a, _ </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">returnMultiValues</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(a) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	tsSF </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">timeSpent</span><span style="color:#E1E4E8;">(slowFn)</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">tsSF</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">returnMultiValues</span><span style="color:#24292E;">() (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rand.</span><span style="color:#005CC5;">Intn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">), rand.</span><span style="color:#005CC5;">Intn</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timeSpent</span><span style="color:#24292E;">(inner </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		start </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">Now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		ret </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inner</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;time spent:&quot;</span><span style="color:#24292E;">, time.</span><span style="color:#005CC5;">Slice</span><span style="color:#24292E;">(start).</span><span style="color:#005CC5;">Seconds</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">slowFn</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Second </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> op</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestFn</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	a, _ </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">returnMultiValues</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(a) </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	tsSF </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">timeSpent</span><span style="color:#24292E;">(slowFn)</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">tsSF</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>推荐书籍：《计算器程序的构造和解释》。</p></blockquote><h3 id="可变参数和defer" tabindex="-1">可变参数和defer <a class="header-anchor" href="#可变参数和defer" aria-label="Permalink to &quot;可变参数和defer&quot;">​</a></h3><p>可变参数</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Sum</span><span style="color:#E1E4E8;">(ops </span><span style="color:#F97583;">...int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ret </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, op </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> ops {</span></span>
<span class="line"><span style="color:#E1E4E8;">		ret </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> op</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestVarParam</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">))    </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Sum</span><span style="color:#24292E;">(ops </span><span style="color:#D73A49;">...int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	ret </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, op </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> ops {</span></span>
<span class="line"><span style="color:#24292E;">		ret </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> op</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestVarParam</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">))    </span><span style="color:#6A737D;">// 10</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// 15</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>defer</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Clear</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Clear resources.&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestDefer</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Clear</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Start&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;err&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Star</span></span>
<span class="line"><span style="color:#6A737D;">// Clear resources</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Clear</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Clear resources.&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestDefer</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Clear</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Start&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;err&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Star</span></span>
<span class="line"><span style="color:#6A737D;">// Clear resources</span></span></code></pre></div><h2 id="_05-面向对象编程" tabindex="-1">05. 面向对象编程 <a class="header-anchor" href="#_05-面向对象编程" aria-label="Permalink to &quot;05. 面向对象编程&quot;">​</a></h2><p><a href="https://golang.org/doc/faq" target="_blank" rel="noreferrer">https://golang.org/doc/faq</a></p><img src="`+e+`"><h3 id="行为定义和实现" tabindex="-1">行为定义和实现 <a class="header-anchor" href="#行为定义和实现" aria-label="Permalink to &quot;行为定义和实现&quot;">​</a></h3><p>结构体定义</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Employee</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Id   </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	Name </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">	Age  </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Employee</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Id   </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	Name </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">	Age  </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>实例创建及初始化</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestCreateEmployeeObj</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	e1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> Employee{</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Bob&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	e2 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> Employee{Name: </span><span style="color:#9ECBFF;">&quot;Mike&quot;</span><span style="color:#E1E4E8;">, Age: </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	e3 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(Employee) </span><span style="color:#6A737D;">// 返回指针</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	e3.Id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	e3.Age </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">22</span></span>
<span class="line"><span style="color:#E1E4E8;">	e3.Name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Rose&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(e1)              </span><span style="color:#6A737D;">// {0 Bob 20}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(e2)              </span><span style="color:#6A737D;">// { Mike 25}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(e2.Id)           </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(e3)              </span><span style="color:#6A737D;">// &amp;{3 Rose 22}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;e2 is </span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, e2) </span><span style="color:#6A737D;">// e2 is encap.Employee</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Logf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;e3 is </span><span style="color:#79B8FF;">%T</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, e3) </span><span style="color:#6A737D;">// e3 is *encap.Employee</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestCreateEmployeeObj</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	e1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> Employee{</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	e2 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> Employee{Name: </span><span style="color:#032F62;">&quot;Mike&quot;</span><span style="color:#24292E;">, Age: </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	e3 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(Employee) </span><span style="color:#6A737D;">// 返回指针</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	e3.Id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#24292E;">	e3.Age </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">22</span></span>
<span class="line"><span style="color:#24292E;">	e3.Name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Rose&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(e1)              </span><span style="color:#6A737D;">// {0 Bob 20}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(e2)              </span><span style="color:#6A737D;">// { Mike 25}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(e2.Id)           </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(e3)              </span><span style="color:#6A737D;">// &amp;{3 Rose 22}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e2 is </span><span style="color:#005CC5;">%T</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, e2) </span><span style="color:#6A737D;">// e2 is encap.Employee</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Logf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;e3 is </span><span style="color:#005CC5;">%T</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, e3) </span><span style="color:#6A737D;">// e3 is *encap.Employee</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>行为（方法）定义</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在实例对应方法被调用时，实例的成员会进行值复制</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (e Employee) </span><span style="color:#B392F0;">String1</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ID:</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">-Name:</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">-Age:</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, e.Id, e.Name, e.Age)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 为了避免内存拷贝，我们可以使用这种定义方式</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (e </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Employee) </span><span style="color:#B392F0;">String2</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Sprintf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ID:</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">-Name:</span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">-Age:</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, e.Id, e.Name, e.Age)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestStructOperations</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	e1 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> Employee{</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Bob&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(e1.</span><span style="color:#79B8FF;">String1</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// ID:0-Name:Bob-Age:20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	e2 </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">Employee{</span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Bob&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(e2.</span><span style="color:#79B8FF;">String2</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// D:0-Name:Bob-Age:20</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在实例对应方法被调用时，实例的成员会进行值复制</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (e Employee) </span><span style="color:#6F42C1;">String1</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">-Name:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">-Age:</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, e.Id, e.Name, e.Age)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 为了避免内存拷贝，我们可以使用这种定义方式</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (e </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Employee) </span><span style="color:#6F42C1;">String2</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Sprintf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ID:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">-Name:</span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">-Age:</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, e.Id, e.Name, e.Age)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestStructOperations</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	e1 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> Employee{</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(e1.</span><span style="color:#005CC5;">String1</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// ID:0-Name:Bob-Age:20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	e2 </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">Employee{</span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bob&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(e2.</span><span style="color:#005CC5;">String2</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// D:0-Name:Bob-Age:20</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>值接收者和指针接收者</p><p>值接收者声明的方法，调用时使用的时这个值的副本；</p><p>指针接收者声明的方法，调用时共享这个值。</p></blockquote><h3 id="接口定义和实现" tabindex="-1">接口定义和实现 <a class="header-anchor" href="#接口定义和实现" aria-label="Permalink to &quot;接口定义和实现&quot;">​</a></h3><p><strong>接口与依赖</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Duck Type 式接口实现</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Programmer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">WriteHelloWorld</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GoProgrammer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (g </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">GoProgrammer) </span><span style="color:#B392F0;">WriteHelloWorld</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;fmt.Println(</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">Hello World</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestClient</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	p </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(GoProgrammer) </span><span style="color:#6A737D;">// interface implement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(p.</span><span style="color:#79B8FF;">WriteHelloWorld</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// fmt.Println(&quot;Hello World&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Duck Type 式接口实现</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Programmer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">WriteHelloWorld</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GoProgrammer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (g </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">GoProgrammer) </span><span style="color:#6F42C1;">WriteHelloWorld</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fmt.Println(</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">Hello World</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">)&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestClient</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	p </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(GoProgrammer) </span><span style="color:#6A737D;">// interface implement</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(p.</span><span style="color:#005CC5;">WriteHelloWorld</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// fmt.Println(&quot;Hello World&quot;)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>接口为非入侵性，实现不依赖于接口定义</li><li>接口定义可以包含在接口使用者包内</li></ul><p><strong>接口变量</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> prog Coder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">GoProgrammer{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prog 类型</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GoProgrammer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prog 数据</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> &amp;GoProgrammer{}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> prog Coder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">GoProgrammer{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prog 类型</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GoProgrammer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// prog 数据</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> &amp;GoProgrammer{}</span></span></code></pre></div><p><strong>自定义类型</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntConv</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(op </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timeSpent</span><span style="color:#E1E4E8;">(inner IntConv) IntConv {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		start </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> time.</span><span style="color:#79B8FF;">Now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		ret </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inner</span><span style="color:#E1E4E8;">(n)</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;time spent:&quot;</span><span style="color:#E1E4E8;">, time.</span><span style="color:#79B8FF;">Slice</span><span style="color:#E1E4E8;">(start).</span><span style="color:#79B8FF;">Seconds</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntConv</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(op </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timeSpent</span><span style="color:#24292E;">(inner IntConv) IntConv {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		start </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> time.</span><span style="color:#005CC5;">Now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		ret </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inner</span><span style="color:#24292E;">(n)</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;time spent:&quot;</span><span style="color:#24292E;">, time.</span><span style="color:#005CC5;">Slice</span><span style="color:#24292E;">(start).</span><span style="color:#005CC5;">Seconds</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="扩展与复用" tabindex="-1">扩展与复用 <a class="header-anchor" href="#扩展与复用" aria-label="Permalink to &quot;扩展与复用&quot;">​</a></h3><p>面向对象的扩展通常可以通过复合或者继承来实现，Go 不支持继承。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Pet) </span><span style="color:#B392F0;">Speak</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Pet) </span><span style="color:#B392F0;">SpeakTo</span><span style="color:#E1E4E8;">(host </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	p.</span><span style="color:#79B8FF;">Speak</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, host)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Pet</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (d </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Dog) </span><span style="color:#B392F0;">Speak</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	d.p.</span><span style="color:#79B8FF;">Speak</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (d </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Dog) </span><span style="color:#B392F0;">SpeakTo</span><span style="color:#E1E4E8;">(host </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	d.p.</span><span style="color:#79B8FF;">SpeakTo</span><span style="color:#E1E4E8;">(host)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestDod</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	dog </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(Dog)</span></span>
<span class="line"><span style="color:#E1E4E8;">	dog.</span><span style="color:#79B8FF;">SpeakTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Wang Wang&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// ... Wang Wang</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pet</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Pet) </span><span style="color:#6F42C1;">Speak</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Pet) </span><span style="color:#6F42C1;">SpeakTo</span><span style="color:#24292E;">(host </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	p.</span><span style="color:#005CC5;">Speak</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, host)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Pet</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (d </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Dog) </span><span style="color:#6F42C1;">Speak</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	d.p.</span><span style="color:#005CC5;">Speak</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (d </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Dog) </span><span style="color:#6F42C1;">SpeakTo</span><span style="color:#24292E;">(host </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	d.p.</span><span style="color:#005CC5;">SpeakTo</span><span style="color:#24292E;">(host)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestDod</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	dog </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(Dog)</span></span>
<span class="line"><span style="color:#24292E;">	dog.</span><span style="color:#005CC5;">SpeakTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Wang Wang&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// ... Wang Wang</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>复合需要重新定义方法，这样看起来也比较自然。其次我们还可以使用匿名嵌套类型简化整个过程。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Pet) </span><span style="color:#B392F0;">Speak</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Print</span><span style="color:#E1E4E8;">((</span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (p </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Pet) </span><span style="color:#B392F0;">SpeakTo</span><span style="color:#E1E4E8;">(host </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	p.</span><span style="color:#79B8FF;">Speak</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, host)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Pet</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestDod</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	dog </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(Dog)</span></span>
<span class="line"><span style="color:#E1E4E8;">	dog.</span><span style="color:#79B8FF;">SpeakTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Wang Wang&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// ... Wang Wang</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pet</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Pet) </span><span style="color:#6F42C1;">Speak</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Print</span><span style="color:#24292E;">((</span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (p </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Pet) </span><span style="color:#6F42C1;">SpeakTo</span><span style="color:#24292E;">(host </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	p.</span><span style="color:#005CC5;">Speak</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, host)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Pet</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestDod</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	dog </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(Dog)</span></span>
<span class="line"><span style="color:#24292E;">	dog.</span><span style="color:#005CC5;">SpeakTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Wang Wang&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// ... Wang Wang</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>网上很多文章说 Go 的继承是这样实现的，其实这种说法并不准确。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Pet</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (d </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">Dog) </span><span style="color:#B392F0;">Speak</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Print</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Wang!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestGog</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dog Pet </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">new</span><span style="color:#E1E4E8;">(Dog)</span></span>
<span class="line"><span style="color:#E1E4E8;">	dog.</span><span style="color:#79B8FF;">SpeakTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Wang Wang&quot;</span><span style="color:#E1E4E8;">)	 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Pet</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (d </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">Dog) </span><span style="color:#6F42C1;">Speak</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Print</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Wang!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestGog</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	 </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dog Pet </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">new</span><span style="color:#24292E;">(Dog)</span></span>
<span class="line"><span style="color:#24292E;">	dog.</span><span style="color:#005CC5;">SpeakTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Wang Wang&quot;</span><span style="color:#24292E;">)	 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 Java 中上述代码是可以正常运行的，在 Go 中这样的写法并不正确，不能实现重载，且无法支持强制类型转换。</p><h3 id="接口类型与多态" tabindex="-1">接口类型与多态 <a class="header-anchor" href="#接口类型与多态" aria-label="Permalink to &quot;接口类型与多态&quot;">​</a></h3><p><strong>空接口与断言</strong></p><ul><li>空接口可以表示任何类型</li><li>通过断言来将空接口转换为指定类型</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">v, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> p.(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// ok=true 时表示转换成功</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">v, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> p.(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// ok=true 时表示转换成功</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DoSometing</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> p.(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">); ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Integer&quot;</span><span style="color:#E1E4E8;">, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> s, ok </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> p.(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">); ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;String&quot;</span><span style="color:#E1E4E8;">, s)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unknow Type&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestEmptyInterfaceAssertion</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">DoSometing</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// Integer 10</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">DoSometing</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// String 10</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DoSometing</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> p.(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">); ok {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Integer&quot;</span><span style="color:#24292E;">, i)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> s, ok </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> p.(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">); ok {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;String&quot;</span><span style="color:#24292E;">, s)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unknow Type&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestEmptyInterfaceAssertion</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">DoSometing</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// Integer 10</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">DoSometing</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// String 10</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>我们可以使用 switch 语句简化上面的程序：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DoSometing</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// if i, ok := p.(int); ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 	fmt.Println(&quot;Integer&quot;, i)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 	return</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// if s, ok := p.(string); ok {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 	fmt.Println(&quot;String&quot;, s)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 	return</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;Unknow Type&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> v </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> p.(type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Integer&quot;</span><span style="color:#E1E4E8;">, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;String&quot;</span><span style="color:#E1E4E8;">, v)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unknow Type&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestEmptyInterfaceAssertion</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">DoSometing</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// Integer 10</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">DoSometing</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// String 10</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DoSometing</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// if i, ok := p.(int); ok {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 	fmt.Println(&quot;Integer&quot;, i)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 	return</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// if s, ok := p.(string); ok {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 	fmt.Println(&quot;String&quot;, s)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 	return</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// fmt.Println(&quot;Unknow Type&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> v </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> p.(type) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Integer&quot;</span><span style="color:#24292E;">, v)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;String&quot;</span><span style="color:#24292E;">, v)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unknow Type&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestEmptyInterfaceAssertion</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">DoSometing</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">// Integer 10</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">DoSometing</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// String 10</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><strong>Go 接口最佳实践</strong></p><p>倾向于使用小的接口定义，很多接口只包含一个方法。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Reader</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Read</span><span style="color:#E1E4E8;">(p []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Writer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">write</span><span style="color:#E1E4E8;">(p []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">)(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, err </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Reader</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Read</span><span style="color:#24292E;">(p []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Writer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">write</span><span style="color:#24292E;">(p []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">)(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, err </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>较大的接口定义，可以由多个小接口定义组合而成。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReadWriter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Reader,</span></span>
<span class="line"><span style="color:#E1E4E8;">  Writer</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReadWriter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  Reader,</span></span>
<span class="line"><span style="color:#24292E;">  Writer</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>只依赖于必要功能的最小接口。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StoreData</span><span style="color:#E1E4E8;">(reader Reader) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StoreData</span><span style="color:#24292E;">(reader Reader) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_06-错误处理" tabindex="-1">06. 错误处理 <a class="header-anchor" href="#_06-错误处理" aria-label="Permalink to &quot;06. 错误处理&quot;">​</a></h2><h3 id="go-的错误机制" tabindex="-1">Go 的错误机制 <a class="header-anchor" href="#go-的错误机制" aria-label="Permalink to &quot;Go 的错误机制&quot;">​</a></h3><ul><li>没有异常机制；</li><li>error 类型实现 error 接口；</li><li>可以通过 errors.New 来快速创建错误实例。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;n must be in the range [0, 10]&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;n must be in the range [0, 10]&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="最佳实践-1" tabindex="-1">最佳实践 1 <a class="header-anchor" href="#最佳实践-1" aria-label="Permalink to &quot;最佳实践 1&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFibonacci</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) ([]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;n should be in [2, 100]&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	fibList </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fibList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(fibList, fibList[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">fibList[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fibList, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestFibonacci</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">getFibonacci</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [1 1 2 3 5 8 13 21 34 55]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getFibonacci</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Error</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(v)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFibonacci</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) ([]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;n should be in [2, 100]&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	fibList </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fibList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(fibList, fibList[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">fibList[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fibList, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestFibonacci</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">getFibonacci</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [1 1 2 3 5 8 13 21 34 55]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getFibonacci</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Error</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(v)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码优化</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> LessThanTwoError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;n should be not less than 2&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> LargetThanHundredError </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;n should be not larger than 100&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFibonacci</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) ([]</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, LessThanTwoError</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, LargetThanHundredError</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	fibList </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fibList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(fibList, fibList[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">fibList[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fibList, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestFibonacci</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">getFibonacci</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [1 1 2 3 5 8 13 21 34 55]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> v, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getFibonacci</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> LessThanTwoError {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;It is less.&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// It is less.</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(v)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> LessThanTwoError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;n should be not less than 2&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> LargetThanHundredError </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;n should be not larger than 100&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFibonacci</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) ([]</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, LessThanTwoError</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, LargetThanHundredError</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	fibList </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fibList </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(fibList, fibList[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">fibList[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fibList, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestFibonacci</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">getFibonacci</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [1 1 2 3 5 8 13 21 34 55]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> v, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getFibonacci</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> LessThanTwoError {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;It is less.&quot;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// It is less.</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(v)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="最佳实践2" tabindex="-1">最佳实践2 <a class="header-anchor" href="#最佳实践2" aria-label="Permalink to &quot;最佳实践2&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFibonacci2</span><span style="color:#E1E4E8;">(str </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">		i    </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">		err  </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">		list []</span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> strconv.</span><span style="color:#79B8FF;">Atoi</span><span style="color:#E1E4E8;">(str); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> list, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getFibonacci</span><span style="color:#E1E4E8;">(i); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(list)</span></span>
<span class="line"><span style="color:#E1E4E8;">		} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFibonacci2</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">		i    </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">		err  </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">		list []</span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strconv.</span><span style="color:#005CC5;">Atoi</span><span style="color:#24292E;">(str); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> list, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getFibonacci</span><span style="color:#24292E;">(i); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(list)</span></span>
<span class="line"><span style="color:#24292E;">		} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>代码优化</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getFibonacci3</span><span style="color:#E1E4E8;">(str </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">		i    </span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">		err  </span><span style="color:#F97583;">error</span></span>
<span class="line"><span style="color:#E1E4E8;">		list []</span><span style="color:#F97583;">int</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> i, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> strconv.</span><span style="color:#79B8FF;">Atoi</span><span style="color:#E1E4E8;">(str); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> list, err </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getFibonacci</span><span style="color:#E1E4E8;">(i); err </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(list)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getFibonacci3</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">		i    </span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">		err  </span><span style="color:#D73A49;">error</span></span>
<span class="line"><span style="color:#24292E;">		list []</span><span style="color:#D73A49;">int</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> i, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> strconv.</span><span style="color:#005CC5;">Atoi</span><span style="color:#24292E;">(str); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> list, err </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getFibonacci</span><span style="color:#24292E;">(i); err </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(list)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>错误优先机制，代码更易读。</p></blockquote><h3 id="panic-和-recover" tabindex="-1">panic 和 recover <a class="header-anchor" href="#panic-和-recover" aria-label="Permalink to &quot;panic 和 recover&quot;">​</a></h3><h4 id="panic" tabindex="-1">panic <a class="header-anchor" href="#panic" aria-label="Permalink to &quot;panic&quot;">​</a></h4><ul><li>panic 用于不可恢复的错误；</li><li>panic 退出前会执行 defer 指定的内容。</li></ul><p>panic vs os.Exit</p><ul><li>os.Exit 退出时不会调用 defer 指定的函数；</li><li>os.Exit 退出时不输出当前调用栈信息。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestPanicVxExit</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Finally!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Start&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// os.Exit(-1)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Something wrong!&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestPanicVxExit</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Finally!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Start&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// os.Exit(-1)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Something wrong!&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="recover" tabindex="-1">recover <a class="header-anchor" href="#recover" aria-label="Permalink to &quot;recover&quot;">​</a></h4><p>通过 recover 可以接收错误，进行恢复处理。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestPanicVxExit</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Finally!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">recover</span><span style="color:#E1E4E8;">(); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;recovered from&quot;</span><span style="color:#E1E4E8;">, err) </span><span style="color:#6A737D;">// recovered from Something wrong!</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Start&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// os.Exit(-1)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">panic</span><span style="color:#E1E4E8;">(errors.</span><span style="color:#79B8FF;">New</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Something wrong!&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestPanicVxExit</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Finally!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">recover</span><span style="color:#24292E;">(); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;recovered from&quot;</span><span style="color:#24292E;">, err) </span><span style="color:#6A737D;">// recovered from Something wrong!</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Start&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// os.Exit(-1)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">panic</span><span style="color:#24292E;">(errors.</span><span style="color:#005CC5;">New</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Something wrong!&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>上述这种方式只是将错误接收，并记录，其实这样的修复方式是非常危险的。</p><ul><li>容易形成僵尸服务进程，导致 health check 失效；</li><li>“Let it Crash！” 往往是我们恢复不确定错误的最好方法。</li></ul><h2 id="_07-包和依赖管理" tabindex="-1">07. 包和依赖管理 <a class="header-anchor" href="#_07-包和依赖管理" aria-label="Permalink to &quot;07. 包和依赖管理&quot;">​</a></h2><h3 id="构建可复用模块-包" tabindex="-1">构建可复用模块（包） <a class="header-anchor" href="#构建可复用模块-包" aria-label="Permalink to &quot;构建可复用模块（包）&quot;">​</a></h3><h4 id="package" tabindex="-1">package <a class="header-anchor" href="#package" aria-label="Permalink to &quot;package&quot;">​</a></h4><ul><li>基本复用模块单元 <ul><li>以首字母大写来表明可被包外代码访问</li></ul></li><li>代码的 package 可以和所在的目录不一致</li><li>同一目录里的 Go 代码的 package 要保持一致</li></ul><h4 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h4><p>通过 go get 来获取远程依赖</p><ul><li>go get -u 强制从网络更新远程依赖</li></ul><p>注意代码在 GitHub 上的组织形式，以适应 go get</p><ul><li>直接以代码路径开始，不要有 src</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/ch15/series/series.g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">series</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 大写的函数名才可以在包外被调用</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetFibonacciSeries</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ret </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> n; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		ret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(ret, ret[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">ret[i</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/ch15/series/series.g</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">series</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 大写的函数名才可以在包外被调用</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetFibonacciSeries</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	ret </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> n; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		ret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(ret, ret[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">ret[i</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// src/ch15/client/client_test.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">client_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">plus/src/ch15/series</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestPackage</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(series.</span><span style="color:#79B8FF;">GetFibonacciSeries</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [1 1 2 3 5]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// src/ch15/client/client_test.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">client_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">plus/src/ch15/series</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestPackage</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(series.</span><span style="color:#005CC5;">GetFibonacciSeries</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [1 1 2 3 5]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="init-方法" tabindex="-1">init 方法 <a class="header-anchor" href="#init-方法" aria-label="Permalink to &quot;init 方法&quot;">​</a></h4><ul><li>在 main 被执行前，所有依赖的 package 的 init 方法都会被执行；</li><li>不同包的 init 函数按照包导入的依赖关系决定执行顺序；</li><li>每个包可以有多个 init 函数；</li><li>包的每个源文件也可以有多个 init 函数。</li></ul><h4 id="使用第三方包" tabindex="-1">使用第三方包 <a class="header-anchor" href="#使用第三方包" aria-label="Permalink to &quot;使用第三方包&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">remote_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">testing</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">cm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/easierway/concurrent_map</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestConcurrentMap</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	m </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cm.</span><span style="color:#79B8FF;">CreateConcurrentMap</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	m.</span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(cm.</span><span style="color:#79B8FF;">StrKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	t.</span><span style="color:#79B8FF;">Log</span><span style="color:#E1E4E8;">(m.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(cm.</span><span style="color:#79B8FF;">StrKey</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">)))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">remote_test</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">testing</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">cm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/easierway/concurrent_map</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestConcurrentMap</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	m </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cm.</span><span style="color:#005CC5;">CreateConcurrentMap</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">99</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	m.</span><span style="color:#005CC5;">Set</span><span style="color:#24292E;">(cm.</span><span style="color:#005CC5;">StrKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">), </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	t.</span><span style="color:#005CC5;">Log</span><span style="color:#24292E;">(m.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(cm.</span><span style="color:#005CC5;">StrKey</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">)))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>可以使用 go mod tidy 命令自动分析依赖并下载。</p><h3 id="依赖管理" tabindex="-1">依赖管理 <a class="header-anchor" href="#依赖管理" aria-label="Permalink to &quot;依赖管理&quot;">​</a></h3><h4 id="未解决的依赖问题" tabindex="-1">未解决的依赖问题 <a class="header-anchor" href="#未解决的依赖问题" aria-label="Permalink to &quot;未解决的依赖问题&quot;">​</a></h4><ul><li>同一环境下，不同项目使用同一包的不同版本</li><li>无法管理对包的特定版本的依赖</li></ul><h4 id="vendor-路径" tabindex="-1">vendor 路径 <a class="header-anchor" href="#vendor-路径" aria-label="Permalink to &quot;vendor 路径&quot;">​</a></h4><p>随着 Go 1.5 release 版本的发布，vendor 目录被添加到除 GOPATH 和 GOROOT 之外的依赖目录查找的解决方案。在 Go 1.6 之前，你需要手动设置环境变量。</p><p>查找依赖包路径的解决方案如下：</p><ul><li>当前包下的 vendor 目录；</li><li>向上级目录查找，直到找到 src 下的 vendor 目录；</li><li>在 GOPATH 下面查找依赖包；</li><li>在 GOROOT 目录下查找。</li></ul><h4 id="常见的依赖管理工具" tabindex="-1">常见的依赖管理工具 <a class="header-anchor" href="#常见的依赖管理工具" aria-label="Permalink to &quot;常见的依赖管理工具&quot;">​</a></h4><p>godep <a href="https://github.com/tools/godep" target="_blank" rel="noreferrer">https://github.com/tools/godep</a></p><p>glide <a href="https://github.com/Masterminds/glide" target="_blank" rel="noreferrer">https://github.com/Masterminds/glide</a></p><p>dep <a href="https://github.com/golang/dep" target="_blank" rel="noreferrer">https://github.com/golang/dep</a></p><h2 id="_08-并发编程" tabindex="-1">08. 并发编程 <a class="header-anchor" href="#_08-并发编程" aria-label="Permalink to &quot;08. 并发编程&quot;">​</a></h2><h3 id="协程机制" tabindex="-1">协程机制 <a class="header-anchor" href="#协程机制" aria-label="Permalink to &quot;协程机制&quot;">​</a></h3><h4 id="thread-vs-groutine" tabindex="-1">Thread vs Groutine <a class="header-anchor" href="#thread-vs-groutine" aria-label="Permalink to &quot;Thread vs Groutine&quot;">​</a></h4><p>创建时默认的 stack 的大小</p><ul><li>JDK 以后 Java Thread stack 默认为 1M；</li><li>Groutine 的 Stack 初始化大小为 2K。</li></ul><p>和 KSE（Kernel Space Entity）的对应关系</p><ul><li>Java Thread 时 1:1</li><li>Groutine 是 M:N</li></ul><img src="`+t+'"><p>多对多关系简图，thread 与 kernel entity 一对一关系。</p><img src="'+c+`"><p>Processor 在不同的系统线程里，但是每个 Processor 都挂载一个准备运行的协程队列。Processor 会依次运行协程。</p><p>如果一个协程运行的时间特别长，那么在队列中的其他协程是不是就会延迟很久？</p><p>其实在 Go 启动的时候会有一个守护线程对 Processor 进行计数，记录每个 Processor 完成的数量。当一段时间守护线程发现 Processor 完成的协程数量没有变化，它就会往协程的任务栈中插入一个特殊的标记，当协程运行时遇到非内联函数 ，读到这个标记，就会中断下来，等候到协程队尾切换到别的协程继续运行。</p><p>当某一个协程被系统中断，例如 IO， 需要等待的时候。为了提高整体的并发，Processor 会把自己移动到另一个可使用的系统线程中继续执行它所挂载的其他协程。 当被中断的协程被唤醒完成之后，它会把自己加入到其中某一个 Processor 的队列中，后者加入到全局等待队列中。</p><p>当协程被中断后，它在寄存器中的运行状态也会保存到这个对象里，当协程被唤醒时，这些信息也会重新写入寄存器，继续运行。</p><h4 id="代码案例" tabindex="-1">代码案例 <a class="header-anchor" href="#代码案例" aria-label="Permalink to &quot;代码案例&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TestGroutine</span><span style="color:#E1E4E8;">(t </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">testing.T) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 使用 go 关键词启动协程运行程序</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">func</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">			fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}(i)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	time.</span><span style="color:#79B8FF;">Sleep</span><span style="color:#E1E4E8;">(time.Microsecond </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TestGroutine</span><span style="color:#24292E;">(t </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">testing.T) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 使用 go 关键词启动协程运行程序</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">func</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">			fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(i)</span></span>
<span class="line"><span style="color:#24292E;">		}(i)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	time.</span><span style="color:#005CC5;">Sleep</span><span style="color:#24292E;">(time.Microsecond </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>每次运行的结果都是不一致的，因为协程运行并不是按照指定顺序执行的。</p><h3 id="共享内存并发机制" tabindex="-1">共享内存并发机制 <a class="header-anchor" href="#共享内存并发机制" aria-label="Permalink to &quot;共享内存并发机制&quot;">​</a></h3><h4 id="lock" tabindex="-1">Lock <a class="header-anchor" href="#lock" aria-label="Permalink to &quot;Lock&quot;">​</a></h4><p>锁机制，对于 Java 和 C++ 程序员都很常见。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Lock lock </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ...;</span></span>
<span class="line"><span style="color:#E1E4E8;">lock.</span><span style="color:#B392F0;">lock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">ex</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  lock.</span><span style="color:#B392F0;">unlock</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Lock lock </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ...;</span></span>
<span class="line"><span style="color:#24292E;">lock.</span><span style="color:#6F42C1;">lock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">ex</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  lock.</span><span style="color:#6F42C1;">unlock</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,271),y=[E];function i(F,u,d,C,g,h){return n(),a("div",null,y)}const B=s(r,[["render",i]]);export{D as __pageData,B as default};

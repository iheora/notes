import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.88002d8f.js";const p="/notes/assets/httpbin.ea5fca9b.png",o="/notes/assets/get.2990850e.png",e="/notes/assets/get02.9ed86669.png",c="/notes/assets/get03.47bb16c6.png",t="/notes/assets/get04.deb47c92.png",r="/notes/assets/get05.ac91ef6a.png",i="/notes/assets/break_points_01.39e03152.png",y="/notes/assets/break_points_02.c94fdd34.png",E="/notes/assets/break_points_03.9895f211.png",d="/notes/assets/break_points_04.665b7cd4.png",x="/notes/assets/throttle_settings_01.39b6024a.png",h="/notes/assets/throttle_settings_02.63f34aa6.png",u="/notes/assets/reverse_proxy_01.6e36311d.png",_="/notes/assets/reverse_proxy_02.070ee7cb.png",F="/notes/assets/reverse_proxy_03.5d7b3d9e.png",b="/notes/assets/edit_mapping.b3aabcea.png",f="/notes/assets/edit_cookie_01.0054f03b.png",g="/notes/assets/edit_cookie_02.67222921.png",A="/notes/assets/edit_cookie_03.a0f17a16.png",D="/notes/assets/edit_cookie_04.ff9cd2e9.png",C="/notes/assets/edit_cookie_05.15175aee.png",m="/notes/assets/edit_cookie_06.69a92d6b.png",k="/notes/assets/edit_cookie_07.62b13aaf.png",v="/notes/assets/tamper_monkey_01.ede164a1.png",B="/notes/assets/tamper_monkey_02.122fb613.png",q="/notes/assets/tamper_monkey_03.ff6fc75d.png",I="/notes/assets/tamper_monkey_04.deea4ea8.png",S="/notes/assets/tamper_monkey_05.8448d6c7.png",j="/notes/assets/tamper_monkey_06.6d253df2.png",w="/notes/assets/tamper_monkey_07.f23e116e.png",P="/notes/assets/debug_01.f158c710.png",J="/notes/assets/debug_02.97bdb424.png",$="/notes/assets/debug_03.630c7dc3.png",M="/notes/assets/debug_04.31682739.png",O="/notes/assets/debug_05.03fdb29b.png",N="/notes/assets/debug_06.bdff2fa1.png",L="/notes/assets/quick_search_01.c96640a6.png",T="/notes/assets/quick_search_02.94cbb45a.png",U="/notes/assets/quick_search_03.9cdc8548.png",H="/notes/assets/quick_debugger_01.2cdf3206.png",W="/notes/assets/quick_debugger_02.8a5ddaef.png",G="/notes/assets/quick_debugger_03.0793df0b.png",R="/notes/assets/quick_event_01.53aa35c8.png",V="/notes/assets/quick_event_02.65648712.png",K="/notes/assets/quick_analysis_01.54af8273.png",X="/notes/assets/encrypt_01.d571ab8f.png",z="/notes/assets/encrypt_02.db7f5bf1.png",Y="/notes/assets/ascii.9cfa32a3.png",Z="/notes/assets/base64.c6acca9b.png",is=JSON.parse('{"title":"JavaScript 逆向","description":"","frontmatter":{},"headers":[],"relativePath":"crawler/night_team/index.md","filePath":"crawler/night_team/index.md"}'),Q={name:"crawler/night_team/index.md"},ss=l('<h1 id="javascript-逆向" tabindex="-1">JavaScript 逆向 <a class="header-anchor" href="#javascript-逆向" aria-label="Permalink to &quot;JavaScript 逆向&quot;">​</a></h1><h2 id="抓包工具-charles" tabindex="-1">抓包工具 Charles <a class="header-anchor" href="#抓包工具-charles" aria-label="Permalink to &quot;抓包工具 Charles&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ul><li>HTTP 抓包工具</li><li>支持 Windows、Linux、Mac</li><li>功能 <ul><li>截获请求</li><li>过滤请求</li><li>重发请求</li><li>设置断点</li><li>端口转发</li><li>反向代理</li></ul></li></ul><h3 id="截获请求" tabindex="-1">截获请求 <a class="header-anchor" href="#截获请求" aria-label="Permalink to &quot;截获请求&quot;">​</a></h3><p>测试地址：<a href="https://httpbin.org/#/" target="_blank" rel="noreferrer">https://httpbin.org/#/</a></p><img src="'+p+'"><p>我们可以使用 <a href="https://httpbin.org/get" target="_blank" rel="noreferrer">get 请求</a> 进行测试，</p><img src="'+o+'"><img src="'+e+'"><h3 id="过滤请求" tabindex="-1">过滤请求 <a class="header-anchor" href="#过滤请求" aria-label="Permalink to &quot;过滤请求&quot;">​</a></h3><p>左下角直接输入域名过滤请求或者在请求域名上面右键选择 Focus 选项。</p><img src="'+c+'"><p>Focus 选中后只显示当前域名，其他域名会被放到 Other Hosts 分组下。</p><img src="'+t+'"><h3 id="重发请求" tabindex="-1">重发请求 <a class="header-anchor" href="#重发请求" aria-label="Permalink to &quot;重发请求&quot;">​</a></h3><p>选中请求点击刷新按钮即可。</p><p>另外我们可以点击笔的图标进行修改模式，对请求进行修改。</p><img src="'+r+'"><h3 id="设置断点" tabindex="-1">设置断点 <a class="header-anchor" href="#设置断点" aria-label="Permalink to &quot;设置断点&quot;">​</a></h3><p>Proxy - Breakpoints Settings</p><img src="'+i+'"><img src="'+y+'"><p>配置好后，刷新页面就会进入断点调试页面，可以对请求进行编辑。</p><img src="'+E+'"><img src="'+d+'"><h3 id="模拟网速" tabindex="-1">模拟网速 <a class="header-anchor" href="#模拟网速" aria-label="Permalink to &quot;模拟网速&quot;">​</a></h3><p>Proxy - Throttle Settings</p><img src="'+x+'"><img src="'+h+'"><h3 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h3><p>反向代理相当于在我们发起请求的时候会经过我们配置的代理拿到响应之后再把响应转发给我们的客户端。</p><p>Proxy - Reverse Proxies Settings</p><img src="'+u+'"><img src="'+_+'"><p>这样配置好之后当我们访问本地的 localhost:55619，就会帮我们代理到 httpbin.org，实现本地访问的效果。</p><img src="'+F+'"><p>除了上述演示效果，还有另外一种反向代理的实现，即在请求链接上右键选择 Map Remote 或者 Map Local，即将请求地址转发到远程地址或者本地地址，实现代理效果。</p><p>这样我们就可以篡改浏览器实际的请求，返回我们想返回的内容。</p><img src="'+b+'"><h2 id="chrome-插件-editthiscookie" tabindex="-1">Chrome 插件 - EditThisCookie <a class="header-anchor" href="#chrome-插件-editthiscookie" aria-label="Permalink to &quot;Chrome 插件 - EditThisCookie&quot;">​</a></h2><h3 id="概述-1" tabindex="-1">概述 <a class="header-anchor" href="#概述-1" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>Cookie 常见操作</p><ul><li>查看 Cookies</li><li>编辑 Cookies（编辑内容或者有效期）</li><li>删除 Cookies，实现页面退出</li><li>添加 Cookie，未登录状态下添加某个 Cookie 绕过登录</li><li>导出导入 Cookie，持久化存储到电脑上</li></ul><p>上述需求都可以使用浏览器插件 EditThisCookie 来完成，实现整个 Cookie 的管理。</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p><a href="https://www.editthiscookie.com/" target="_blank" rel="noreferrer">官网地址</a></p><img src="'+f+'"><img src="'+g+'"><h3 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h3><p>可以使用插件弹窗的形式，也可以在开发者工具面板中找到。</p><img src="'+A+'"><img src="'+D+'"><p>Chrome 其实也自带 Cookie 管理面板，位于 Application - Storage - Cookies。</p><img src="'+C+'"><p>我们修改 Cookie 的 HttpOnly 属性，这样我们就可以使用 <code>document.cookie</code> 获取到所有的 Cookie。</p><img src="'+m+'"><p>控制台的面板相对于插件弹窗功能要少一些，使用弹窗使用同时操作所有 Cookie，例如删除所有，导入导出，新增 Cookie 等。</p><img src="'+k+'"><h2 id="chrome-插件-toggle-javascript" tabindex="-1">Chrome 插件 - Toggle JavaScript <a class="header-anchor" href="#chrome-插件-toggle-javascript" aria-label="Permalink to &quot;Chrome 插件 - Toggle JavaScript&quot;">​</a></h2><p>提供开启和关闭 JavaScript 功能的操作，使我们可以查看没有 JavaScript 代码执行时的页面效果。</p><h2 id="chrome-插件-tampermonkey" tabindex="-1">Chrome 插件 - Tampermonkey <a class="header-anchor" href="#chrome-插件-tampermonkey" aria-label="Permalink to &quot;Chrome 插件 - Tampermonkey&quot;">​</a></h2><h3 id="概述-2" tabindex="-1">概述 <a class="header-anchor" href="#概述-2" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>在浏览器自定义执行 JavaScript 脚本，完成如自动抢票、自动刷单等操作。</p><h3 id="安装-1" tabindex="-1">安装 <a class="header-anchor" href="#安装-1" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p>chrome 浏览器直接搜索 tampermonkey 就可以找到该扩展程序。</p><img src="'+v+'"><p>管理面板</p><img src="'+B+'"><h3 id="自定义脚本" tabindex="-1">自定义脚本 <a class="header-anchor" href="#自定义脚本" aria-label="Permalink to &quot;自定义脚本&quot;">​</a></h3><p><a href="https://www.tampermonkey.net/documentation.php?ext=dhdg#Q102" target="_blank" rel="noreferrer">脚本编写文档</a></p><p>新建脚本</p><img src="'+q+`"><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ==UserScript==</span></span>
<span class="line"><span style="color:#6A737D;">// @name         test</span></span>
<span class="line"><span style="color:#6A737D;">// @namespace    https://www.baidu.com/</span></span>
<span class="line"><span style="color:#6A737D;">// @version      0.1</span></span>
<span class="line"><span style="color:#6A737D;">// @description  test</span></span>
<span class="line"><span style="color:#6A737D;">// @author       heora</span></span>
<span class="line"><span style="color:#6A737D;">// @match        https://www.baidu.com/</span></span>
<span class="line"><span style="color:#6A737D;">// @grant        none</span></span>
<span class="line"><span style="color:#6A737D;">// ==/UserScript==</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello world&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ==UserScript==</span></span>
<span class="line"><span style="color:#6A737D;">// @name         test</span></span>
<span class="line"><span style="color:#6A737D;">// @namespace    https://www.baidu.com/</span></span>
<span class="line"><span style="color:#6A737D;">// @version      0.1</span></span>
<span class="line"><span style="color:#6A737D;">// @description  test</span></span>
<span class="line"><span style="color:#6A737D;">// @author       heora</span></span>
<span class="line"><span style="color:#6A737D;">// @match        https://www.baidu.com/</span></span>
<span class="line"><span style="color:#6A737D;">// @grant        none</span></span>
<span class="line"><span style="color:#6A737D;">// ==/UserScript==</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;use strict&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hello world&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p>保存后效果如下：</p><img src="`+I+'"><p>这样一个最简单的脚本就已经编写完成。打开百度就可以看到我们脚本并且会在控制台执行我们编写的函数被执行。</p><img src="'+S+'"><img src="'+j+'"><p>我们也可以在控制台看到我们编写的脚本源文件。</p><img src="'+w+`"><h3 id="javascript-逆向应用" tabindex="-1">JavaScript 逆向应用 <a class="header-anchor" href="#javascript-逆向应用" aria-label="Permalink to &quot;JavaScript 逆向应用&quot;">​</a></h3><p>Hook 技术。将原本执行的函数替换成我们自定义的函数，自定义函数会保持原有函数的功能，并为其附加新功能。不改变程序执行效果的前提下，实现自定义的效果。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ==UserScript==</span></span>
<span class="line"><span style="color:#6A737D;">// @name         HookBase64</span></span>
<span class="line"><span style="color:#6A737D;">// @namespace    http://xxx.com</span></span>
<span class="line"><span style="color:#6A737D;">// @version      0.1</span></span>
<span class="line"><span style="color:#6A737D;">// @description  Hook Base64 encode function</span></span>
<span class="line"><span style="color:#6A737D;">// @author       heora</span></span>
<span class="line"><span style="color:#6A737D;">// @match        http://xxx.com/login</span></span>
<span class="line"><span style="color:#6A737D;">// @grant        none</span></span>
<span class="line"><span style="color:#6A737D;">// ==/UserScript==</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hook</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">object</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">attr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> object[attr]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      object[attr] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hooked&#39;</span><span style="color:#E1E4E8;">, object, attr)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ret</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> func.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(object, </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">debugger</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ret</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">hook</span><span style="color:#E1E4E8;">(window, </span><span style="color:#9ECBFF;">&#39;btoa&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ==UserScript==</span></span>
<span class="line"><span style="color:#6A737D;">// @name         HookBase64</span></span>
<span class="line"><span style="color:#6A737D;">// @namespace    http://xxx.com</span></span>
<span class="line"><span style="color:#6A737D;">// @version      0.1</span></span>
<span class="line"><span style="color:#6A737D;">// @description  Hook Base64 encode function</span></span>
<span class="line"><span style="color:#6A737D;">// @author       heora</span></span>
<span class="line"><span style="color:#6A737D;">// @match        http://xxx.com/login</span></span>
<span class="line"><span style="color:#6A737D;">// @grant        none</span></span>
<span class="line"><span style="color:#6A737D;">// ==/UserScript==</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;use strict&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hook</span><span style="color:#24292E;">(</span><span style="color:#E36209;">object</span><span style="color:#24292E;">, </span><span style="color:#E36209;">attr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">func</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> object[attr]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      object[attr] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;hooked&#39;</span><span style="color:#24292E;">, object, attr)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ret</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> func.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(object, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">debugger</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ret</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">hook</span><span style="color:#24292E;">(window, </span><span style="color:#032F62;">&#39;btoa&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><p>原理就是代理方法，对方法进行重写，调试。例如上述代理的 btoa 方法，用于 base64 编码。</p><h2 id="无限-debugger" tabindex="-1">无限 debugger <a class="header-anchor" href="#无限-debugger" aria-label="Permalink to &quot;无限 debugger&quot;">​</a></h2><h3 id="概述-3" tabindex="-1">概述 <a class="header-anchor" href="#概述-3" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>什么情况下会碰到 debugger</p><ul><li>分析网络请求、查看元素的事件监听器、跟踪 js 等需求第一步就要打开浏览器的开发者工具，只要打开开发者工具就可能会碰到无限 debugger 死循环，或者在调试过程中也可能会出现无限 debugger 的死循环。</li></ul><p>为什么反爬虫会用到无限 debugger</p><ul><li>分析代码逻辑、调试跟踪代码是 js 破解的必要手段，分析调试主要就是使用开发者工具，使用无限 debugger 属于精准防控手段。</li></ul><p>debugger 反爬虫的优势在哪里</p><ul><li>实现比较简单，不必写复杂的反人类的反爬虫代码，写无限 debugger 应该是基本操作</li><li>效果比较明显，如果破解不了，不能进行下一步</li><li>一定程序可以提高代码逻辑的安全性，因为它可以阻止我们调试分析代码逻辑</li></ul><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><p>反调试：阻止调试和分析目标代码的运行逻辑</p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>debugger 关键字的应用</p><ul><li>Function/eval &quot;debugger&quot;</li><li>function debugger</li></ul><h3 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h3><p>测试代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">startDebug</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">debugger</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">startDebug</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`i \${</span><span style="color:#E1E4E8;">i</span><span style="color:#F97583;">++</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">startDebug</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">debugger</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">startDebug</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`i \${</span><span style="color:#24292E;">i</span><span style="color:#D73A49;">++</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="禁用所有断点" tabindex="-1">禁用所有断点 <a class="header-anchor" href="#禁用所有断点" aria-label="Permalink to &quot;禁用所有断点&quot;">​</a></h4><p>上述代码需要中断 10 次才能正常进行调试。解决方案也很简单，就是禁用所有断点。</p><img src="`+P+'"><p>禁用所有断点后，重新刷新页面代码可以正常执行。</p><h4 id="禁用某处断点" tabindex="-1">禁用某处断点 <a class="header-anchor" href="#禁用某处断点" aria-label="Permalink to &quot;禁用某处断点&quot;">​</a></h4><p>上述代码的关键就是 debugger，我们可以在行号前设置 Never pause here。</p><img src="'+J+'"><img src="'+$+'"><h4 id="条件断点" tabindex="-1">条件断点 <a class="header-anchor" href="#条件断点" aria-label="Permalink to &quot;条件断点&quot;">​</a></h4><p>我们可以在行号前设置 Add conditional breakpoint。</p><img src="'+M+'"><img src="'+O+'"><p>当 i &gt; 5 时，才会执行 debugger，暂停程序执行。</p><h4 id="中间人工具替换特征字符串" tabindex="-1">中间人工具替换特征字符串 <a class="header-anchor" href="#中间人工具替换特征字符串" aria-label="Permalink to &quot;中间人工具替换特征字符串&quot;">​</a></h4><p>在我们的案例中，特征字符串就是 debugger 关键字。我们可以利用 fiddler、charles 等工具将 debugger 关键字换成 &quot;debugger&quot; 或者替换为空。</p><img src="'+N+`"><h4 id="reres-替换本地修改过的文件" tabindex="-1">reres 替换本地修改过的文件 <a class="header-anchor" href="#reres-替换本地修改过的文件" aria-label="Permalink to &quot;reres 替换本地修改过的文件&quot;">​</a></h4><p>reres 是一个浏览器插件，当它监控到目标文件时，就不进行网络请求，直接返回本地修改过的文件进行返回。其实也是篡改响应接口的一种方式。</p><h4 id="重写关键函数" tabindex="-1">重写关键函数 <a class="header-anchor" href="#重写关键函数" aria-label="Permalink to &quot;重写关键函数&quot;">​</a></h4><p>这种方式算是比较稳妥，使用比较多的一种方式。需要在函数声明之后打断点，然后再重写目标函数。</p><p>对于 function 关键字声明或 var 声明的函数是有效的，不过对于 const 关键字声明的箭头函数是无效的，函数不能被重写。</p><p>重写关键函数可以指定方法名，或者使用 <code>Function.prototype.constructor = function() {}</code> ，这种方法只有在 <code>(function(){}).constructor === Function</code> 时才会生效。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 重写 eval 案例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(eval </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;function eval() { [native code] }&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重写 eval</span></span>
<span class="line"><span style="color:#E1E4E8;">window._origin_eval </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.eval</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$eval</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">src</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`==== eveal begin: length=\${</span><span style="color:#E1E4E8;">src</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">length</span><span style="color:#9ECBFF;">}, caller=~\${</span><span style="color:#E1E4E8;">$eval</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">caller</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$eval</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">caller</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">} ====\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`injected \${</span><span style="color:#E1E4E8;">document</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">location</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(src)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`==== eval end ====\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">_origin_eval</span><span style="color:#E1E4E8;">(src)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(window, </span><span style="color:#9ECBFF;">&#39;eval&#39;</span><span style="color:#E1E4E8;">, { value: $eval })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(eval </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;function $eval(src) {\\n  console.log(\\n    \`==== eveal begin: length=\${src.length}, caller=~\${$eval.caller &amp;&amp; $eval.caller.name} ====\`\\n  )\\n  console.log(\`injected \${document.location}\`)\\n  console.log(src)\\n  console.log(\`==== eval end ====\`)\\n\\n  return window._origin_eval(src)\\n}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$eval.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function eval() { [native code] }&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(eval </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;function eval() { [native code] }&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 重写 eval 案例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(eval </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;function eval() { [native code] }&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 重写 eval</span></span>
<span class="line"><span style="color:#24292E;">window._origin_eval </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.eval</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$eval</span><span style="color:#24292E;">(</span><span style="color:#E36209;">src</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`==== eveal begin: length=\${</span><span style="color:#24292E;">src</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">length</span><span style="color:#032F62;">}, caller=~\${</span><span style="color:#24292E;">$eval</span><span style="color:#032F62;">.</span><span style="color:#24292E;">caller</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$eval</span><span style="color:#032F62;">.</span><span style="color:#24292E;">caller</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">} ====\`</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`injected \${</span><span style="color:#24292E;">document</span><span style="color:#032F62;">.</span><span style="color:#24292E;">location</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(src)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`==== eval end ====\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">_origin_eval</span><span style="color:#24292E;">(src)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(window, </span><span style="color:#032F62;">&#39;eval&#39;</span><span style="color:#24292E;">, { value: $eval })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(eval </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;function $eval(src) {\\n  console.log(\\n    \`==== eveal begin: length=\${src.length}, caller=~\${$eval.caller &amp;&amp; $eval.caller.name} ====\`\\n  )\\n  console.log(\`injected \${document.location}\`)\\n  console.log(src)\\n  console.log(\`==== eval end ====\`)\\n\\n  return window._origin_eval(src)\\n}&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$eval.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function eval() { [native code] }&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(eval </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;function eval() { [native code] }&#39;</span></span></code></pre></div><h2 id="快速定位关键代码点" tabindex="-1">快速定位关键代码点 <a class="header-anchor" href="#快速定位关键代码点" aria-label="Permalink to &quot;快速定位关键代码点&quot;">​</a></h2><h3 id="概述-4" tabindex="-1">概述 <a class="header-anchor" href="#概述-4" aria-label="Permalink to &quot;概述&quot;">​</a></h3><ul><li>快速定位 - 搜索</li><li>快速定位 - 断点</li><li>快速定位 - hook</li><li>快速定位 - 分析</li></ul><h3 id="快速定位-搜索" tabindex="-1">快速定位 - 搜索 <a class="header-anchor" href="#快速定位-搜索" aria-label="Permalink to &quot;快速定位 - 搜索&quot;">​</a></h3><p>这里仅介绍比较常用的两个搜索：</p><h4 id="中间人的全局搜索" tabindex="-1">中间人的全局搜索 <a class="header-anchor" href="#中间人的全局搜索" aria-label="Permalink to &quot;中间人的全局搜索&quot;">​</a></h4><p>例如 fiddler 有放大镜按钮，就是全局搜索功能，支持关键字符串在请求和响应中的搜索</p><h4 id="开发者工具的全局搜索" tabindex="-1">开发者工具的全局搜索 <a class="header-anchor" href="#开发者工具的全局搜索" aria-label="Permalink to &quot;开发者工具的全局搜索&quot;">​</a></h4><p>开发者工具搜索分为两个搜索：</p><p><strong>Elements 面板搜索：基于 html 文本搜索（command + f）</strong></p><img src="`+L+'"><p><strong>全局搜索（command + option + f）</strong></p><img src="'+T+'"><p>两者的区别主要是 elements 面板搜索只能搜索 html 文本内容，不能搜索页面引入的 js 中的内容，而全局搜索支持搜索 js 文件。</p><p>所以当我们发现接口请求存在加密参数时，第一步就可以全局搜索一下加密参数，看看能否找到使用痕迹，如果发现踪迹，我们就可以去打断点调试 js 代码，进行分析。</p><p>如果全局搜索搜索不到内容，这时我们就需要分析调用栈，分析触发来源。</p><p><strong>网络过滤</strong></p><img src="'+U+'"><h3 id="快速定位-断点" tabindex="-1">快速定位 - 断点 <a class="header-anchor" href="#快速定位-断点" aria-label="Permalink to &quot;快速定位 - 断点&quot;">​</a></h3><h4 id="xhr" tabindex="-1">xhr <a class="header-anchor" href="#xhr" aria-label="Permalink to &quot;xhr&quot;">​</a></h4><p>例如下面这个例子，这里的断点就是监听请求链接中是否存在 formSite 字段，如果命中。</p><img src="'+H+'"><h4 id="dom" tabindex="-1">dom <a class="header-anchor" href="#dom" aria-label="Permalink to &quot;dom&quot;">​</a></h4><img src="'+W+'"><p>Break on 有三个，分别是子树、属性和节点移除，当触发这三个事件时，就会中断程序运行。</p><img src="'+G+'"><p>应用场景，某网站会采集用户鼠标事件、鼠标移动事件、鼠标左键单击事件、鼠标右键单击事件，还有键盘事件等，然后在触发事件时，会有一个隐藏的 input 标签记录操作行为， 当你点击登陆按钮时，会把属性值提交给后端，记录用户这段时间到底做了什么事情。</p><h4 id="event" tabindex="-1">event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;event&quot;">​</a></h4><p>event，即事件监听器。</p><img src="'+R+'"><p>在上图中，我们可以看到，在 Elements 面板的 Event Listeners 中看到所有事件，如果我们有需求就可以对单独事件进行 debugger。</p><img src="'+V+`"><h4 id="自定义" tabindex="-1">自定义 <a class="header-anchor" href="#自定义" aria-label="Permalink to &quot;自定义&quot;">​</a></h4><p>自定义断点即用户自己打的断点。</p><h3 id="快速定位-hook" tabindex="-1">快速定位 - hook <a class="header-anchor" href="#快速定位-hook" aria-label="Permalink to &quot;快速定位 - hook&quot;">​</a></h3><h4 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-label="Permalink to &quot;json&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">origin_stringify</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.stringify</span></span>
<span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;stringify&#39;</span><span style="color:#E1E4E8;">, params)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">origin_stringify</span><span style="color:#E1E4E8;">(params)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">origin_parse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.parse</span></span>
<span class="line"><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">params</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;parse&#39;</span><span style="color:#E1E4E8;">, params)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">origin_parse</span><span style="color:#E1E4E8;">(params)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">origin_stringify</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.stringify</span></span>
<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">params</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;stringify&#39;</span><span style="color:#24292E;">, params)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">origin_stringify</span><span style="color:#24292E;">(params)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">origin_parse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.parse</span></span>
<span class="line"><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">params</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;parse&#39;</span><span style="color:#24292E;">, params)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">origin_parse</span><span style="color:#24292E;">(params)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;cookie&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> origin_cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.cookie</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(document, </span><span style="color:#9ECBFF;">&#39;cookie&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;getter cookie&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> origin_cookie</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setter cookie&#39;</span><span style="color:#E1E4E8;">, value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cookie</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;;&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cookieArr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cookie.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> flag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> origin_cookie.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> cookieArr[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        flag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> cookie</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> item</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    origin_cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;; &#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">flag) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      origin_cookie </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> cookie </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;; &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">._value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> origin_cookie</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> origin_cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.cookie</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(document, </span><span style="color:#032F62;">&#39;cookie&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;getter cookie&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> origin_cookie</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;setter cookie&#39;</span><span style="color:#24292E;">, value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cookie</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;;&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cookieArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cookie.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> origin_cookie.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#E36209;">item</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> cookieArr[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">]) {</span></span>
<span class="line"><span style="color:#24292E;">        flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> cookie</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> item</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    origin_cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;; &#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">flag) {</span></span>
<span class="line"><span style="color:#24292E;">      origin_cookie </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> cookie </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;; &#39;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">._value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> origin_cookie</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h4 id="window-attr" tabindex="-1">window attr <a class="header-anchor" href="#window-attr" aria-label="Permalink to &quot;window attr&quot;">​</a></h4><p>比如我们有一个加密参数是 window 属性，我们需要找到属性谁在哪里被赋值的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hook</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">origin_window</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(window, key, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;getter window&#39;</span><span style="color:#E1E4E8;">, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> origin_window[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setter window&#39;</span><span style="color:#E1E4E8;">, value)</span></span>
<span class="line"><span style="color:#E1E4E8;">      origin_window.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hook</span><span style="color:#24292E;">(</span><span style="color:#E36209;">key</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">origin_window</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(window, key, {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;getter window&#39;</span><span style="color:#24292E;">, key)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> origin_window[key]</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;setter window&#39;</span><span style="color:#24292E;">, value)</span></span>
<span class="line"><span style="color:#24292E;">      origin_window.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="eval-function" tabindex="-1">eval/Function <a class="header-anchor" href="#eval-function" aria-label="Permalink to &quot;eval/Function&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// eval</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">origin_eval</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.eval</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$eval</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">src</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`==== eveal begin: length=\${</span><span style="color:#E1E4E8;">src</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">length</span><span style="color:#9ECBFF;">}, caller=~\${</span><span style="color:#E1E4E8;">$eval</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">caller</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$eval</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">caller</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">} ====\`</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`injected \${</span><span style="color:#E1E4E8;">document</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">location</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(src)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`==== eval end ====\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">origin_eval</span><span style="color:#E1E4E8;">(src)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$eval.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;function eval() { [native code] }&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(window, </span><span style="color:#9ECBFF;">&#39;eval&#39;</span><span style="color:#E1E4E8;">, { value: $eval })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// eval</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">origin_eval</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.eval</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$eval</span><span style="color:#24292E;">(</span><span style="color:#E36209;">src</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">\`==== eveal begin: length=\${</span><span style="color:#24292E;">src</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">length</span><span style="color:#032F62;">}, caller=~\${</span><span style="color:#24292E;">$eval</span><span style="color:#032F62;">.</span><span style="color:#24292E;">caller</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$eval</span><span style="color:#032F62;">.</span><span style="color:#24292E;">caller</span><span style="color:#032F62;">.</span><span style="color:#24292E;">name</span><span style="color:#032F62;">} ====\`</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`injected \${</span><span style="color:#24292E;">document</span><span style="color:#032F62;">.</span><span style="color:#24292E;">location</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(src)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`==== eval end ====\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">origin_eval</span><span style="color:#24292E;">(src)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$eval.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;function eval() { [native code] }&#39;</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(window, </span><span style="color:#032F62;">&#39;eval&#39;</span><span style="color:#24292E;">, { value: $eval })</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">origin_function</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.Function</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$func</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [].slice.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;,&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">src</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [].slice.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function start&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(src)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function end&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> origin_function.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$func.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> origin_function </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">Object.</span><span style="color:#B392F0;">defineProperty</span><span style="color:#E1E4E8;">(window, </span><span style="color:#9ECBFF;">&#39;Function&#39;</span><span style="color:#E1E4E8;">, { value: $func })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">origin_function</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.Function</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$func</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [].slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;,&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">src</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [].slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">at</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function start&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(src)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;function end&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> origin_function.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$func.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> origin_function </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">defineProperty</span><span style="color:#24292E;">(window, </span><span style="color:#032F62;">&#39;Function&#39;</span><span style="color:#24292E;">, { value: $func })</span></span></code></pre></div><h4 id="websocket" tabindex="-1">websocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;websocket&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">origin_ws</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WebSocket</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.send</span></span>
<span class="line"><span style="color:#79B8FF;">WebSocket</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;websocket&#39;</span><span style="color:#E1E4E8;">, data)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">origin_ws</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">origin_ws</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WebSocket</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.send</span></span>
<span class="line"><span style="color:#005CC5;">WebSocket</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;websocket&#39;</span><span style="color:#24292E;">, data)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">origin_ws</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="and-so-on" tabindex="-1">and so on <a class="header-anchor" href="#and-so-on" aria-label="Permalink to &quot;and so on&quot;">​</a></h4><p>只要我们可以想到的都可以去重写，感兴趣可以自己去尝试一下。</p><h3 id="快速定位-分析" tabindex="-1">快速定位 - 分析 <a class="header-anchor" href="#快速定位-分析" aria-label="Permalink to &quot;快速定位 - 分析&quot;">​</a></h3><h4 id="elements-event-listeners" tabindex="-1">Elements Event Listeners <a class="header-anchor" href="#elements-event-listeners" aria-label="Permalink to &quot;Elements Event Listeners&quot;">​</a></h4><p>elements event listeners 之间我们已经说过很多次，这里就不再赘述。</p><h4 id="network-type-initator" tabindex="-1">Network type initator <a class="header-anchor" href="#network-type-initator" aria-label="Permalink to &quot;Network type initator&quot;">​</a></h4><p>当鼠标悬停于 initator 上时，就可以看到其调用栈，我们就可以根据调用栈一层一层的点进去，然后我们就可以对此进行分析。</p><img src="`+K+'"><h4 id="console-log-xmlhttprequests" tabindex="-1">Console Log XMLHttpRequests <a class="header-anchor" href="#console-log-xmlhttprequests" aria-label="Permalink to &quot;Console Log XMLHttpRequests&quot;">​</a></h4><p>这个其实就是查看控制台信息，可以自主去查看开发者工具的其他功能。</p><h2 id="代码混淆与加密" tabindex="-1">代码混淆与加密 <a class="header-anchor" href="#代码混淆与加密" aria-label="Permalink to &quot;代码混淆与加密&quot;">​</a></h2><h3 id="为什么加密或混淆" tabindex="-1">为什么加密或混淆 <a class="header-anchor" href="#为什么加密或混淆" aria-label="Permalink to &quot;为什么加密或混淆&quot;">​</a></h3><ul><li>JavaScript 代码运行于客户端</li><li>JavaScript 代码是公开透明的</li></ul><h3 id="如何对-javascript-进行保护" tabindex="-1">如何对 JavaScript 进行保护 <a class="header-anchor" href="#如何对-javascript-进行保护" aria-label="Permalink to &quot;如何对 JavaScript 进行保护&quot;">​</a></h3><ul><li>代码压缩：去除空格、换行等</li><li>代码加密：eval、emscripten、WebAssembly 等</li><li>代码混淆：变量混淆、常量混淆、控制流扁平化、调试保护等</li></ul><h3 id="javascript-加密实现" tabindex="-1">JavaScript 加密实现 <a class="header-anchor" href="#javascript-加密实现" aria-label="Permalink to &quot;JavaScript 加密实现&quot;">​</a></h3><h4 id="eval-加密" tabindex="-1">eval 加密 <a class="header-anchor" href="#eval-加密" aria-label="Permalink to &quot;eval 加密&quot;">​</a></h4><p>利用 eval 函数将 JavaScrpt 代码变成参数， eval 方法就是 JavaScript 代码的一个执行器，它可以把其中的参数按照 JavaScript 语法进行解析并执行。</p><p>这种加密方式其实就是把 JavaScript 代码变成 eval 方法的字符串参数，其中的一些字符都会被按照特定的格式编码。</p><img src="'+X+'"><p>这种加密方式并不复杂，将代码在控制台执行运行就可以得到结果。或者将 eval 包裹去掉，我们也可以得到一个函数。</p><h4 id="emscripten" tabindex="-1">Emscripten <a class="header-anchor" href="#emscripten" aria-label="Permalink to &quot;Emscripten&quot;">​</a></h4><ul><li>核心：C/C++</li><li>编译：Emscripten</li><li>结果：asm.js</li><li>调用：JavaScript</li></ul><h4 id="webassembly" tabindex="-1">WebAssembly <a class="header-anchor" href="#webassembly" aria-label="Permalink to &quot;WebAssembly&quot;">​</a></h4><ul><li>核心：C/C++</li><li>结果：wasm 文件</li><li>调用：JavaScript</li></ul><img src="'+z+`"><p>基本和 Emscripten 一致，不过它使用的是二进制编码，运行速度会更快，体积也会更小。</p><p>性能相对其他加密方式会好一些，但是涉及 C/C++ 代码改写，还需要进行编译，整体成本还是比较高的，这里仅做一下介绍。</p><h3 id="javascript-混淆技术" tabindex="-1">JavaScript 混淆技术 <a class="header-anchor" href="#javascript-混淆技术" aria-label="Permalink to &quot;JavaScript 混淆技术&quot;">​</a></h3><h4 id="相关技术" tabindex="-1">相关技术 <a class="header-anchor" href="#相关技术" aria-label="Permalink to &quot;相关技术&quot;">​</a></h4><ul><li>变量混淆 <ul><li>源代码变量名基本都具有语义，例如 count 代表计数器等。</li><li>变量混淆之后将变量变成一些无意义的、看起来比较乱的一些字符串，例如 16 进制的字符串，降低代码可读性。</li></ul></li><li>字符串混淆 <ul><li>将字符串进行 md5 加密、base64 编码、RC4，确保代码不会通过搜索的功能查到原始字符串，降低通过字符串寻找入口的风险。</li></ul></li><li>属性加密 <ul><li>javascript 存在对象类型，可能是 key-value 的键值对，所以我们可以把 javascript 中的对象进行加密转化，将 key- value 映射关系混淆掉，变的更加难以寻找其中逻辑。</li></ul></li><li>控制流平坦化 <ul><li>打乱原有代码的执行流程和函数调用关系。</li><li>例如之前我们存在一些逻辑区块，它是由 A 到 B 到 C。 我们可以给它的控制流加上一个前置的控制流，前置的控制流中再加上一些条件判断，由前置的控制流进行分流。这样我们就可以把执行的逻辑变得更加复杂，难读。</li></ul></li><li>僵尸代码注入 <ul><li>将一些无用代码、不可能被执行到的代码注入到当前的代码里面，实现一些认为的扰乱。</li></ul></li><li>代码压缩 <ul><li>去除一些空格，回车，调试语句等代码，使文件变得更小，由多行代码变为一行代码，压缩代码体积，使代码更难读。</li></ul></li><li>反调试 <ul><li>基于浏览器的一些特性，对当前环境进行检验，加上 debugger 语句，例如无限 debugger，定时器 debugger，用一些断点进行干扰。</li></ul></li><li>多态变异 <ul><li>JavaScript 代码被调用时，一旦代码被调用，代码就会立刻发生变化，变成和原来完全不同的代码，但是依旧可以保持功能完全，只是代码形式发生变化。 避免代码被动态分析、调试。</li></ul></li><li>锁定域名 <ul><li>对域名进行检测，JavaScript 代码必须运行在特定的域名下。</li></ul></li><li>反格式化 <ul><li>将代码格式化后，会有一些机制使得代码在运行的时候无法正常工作。</li></ul></li><li>特殊编码 <ul><li>将 JavaScript 代码编码成一些特别难读的代码，例如中括号，叹号等等，编译成一些表情，符号等等，不易读。</li></ul></li></ul><h4 id="开源项目" tabindex="-1">开源项目 <a class="header-anchor" href="#开源项目" aria-label="Permalink to &quot;开源项目&quot;">​</a></h4><ul><li>UglifyJS：<a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="noreferrer">https://github.com/mishoo/UglifyJS2</a><ul><li>抽象语法树，然后进行代码压缩或变异</li></ul></li><li>terser：<a href="https://github.com/terser/terser" target="_blank" rel="noreferrer">https://github.com/terser/terser</a><ul><li>和 UglifyJS 功能类似，增加 ES6 支持</li></ul></li><li>javascript-obfuscator：<a href="https://github.com/javascript-obfuscator/javascript-obfuscator" target="_blank" rel="noreferrer">https://github.com/javascript-obfuscator/javascript-obfuscator</a><ul><li>可以用来实现几乎所有的混淆效果，比如变量混淆、字符串混淆、属性加密、平展控制流、僵尸代码注入、反调试、反格式化等等。</li></ul></li><li>jsfuck：<a href="https://github.com/aemkei/jsfuck" target="_blank" rel="noreferrer">https://github.com/aemkei/jsfuck</a><ul><li>将一些变量或者定义统一替换成有中括号等等的一些表示，代码代码体积也会变得很大</li></ul></li><li>AAEncode：<a href="https://github.com/bprayudha/jquery.aaencode" target="_blank" rel="noreferrer">https://github.com/bprayudha/jquery.aaencode</a></li><li>JJEncode：<a href="https://github.com/ay86/jEncrypt" target="_blank" rel="noreferrer">https://github.com/ay86/jEncrypt</a></li></ul><h4 id="在线工具" tabindex="-1">在线工具 <a class="header-anchor" href="#在线工具" aria-label="Permalink to &quot;在线工具&quot;">​</a></h4><ul><li><a href="https://obfuscator.io/" target="_blank" rel="noreferrer">https://obfuscator.io/</a></li><li><a href="http://www.freejsobfuscator.com/" target="_blank" rel="noreferrer">http://www.freejsobfuscator.com/</a></li><li><a href="https://www.daftlogic.com/projects-online-javascript-obfuscator.htm" target="_blank" rel="noreferrer">https://www.daftlogic.com/projects-online-javascript-obfuscator.htm</a></li><li><a href="https://beautifytools.com/javascript-obfuscator.php" target="_blank" rel="noreferrer">https://beautifytools.com/javascript-obfuscator.php</a></li><li><a href="https://www.sojson.com/jscodeconfusion.html" target="_blank" rel="noreferrer">https://www.sojson.com/jscodeconfusion.html</a></li><li><a href="http://www.jshaman.com/#free" target="_blank" rel="noreferrer">http://www.jshaman.com/#free</a></li></ul><h4 id="商业服务" tabindex="-1">商业服务 <a class="header-anchor" href="#商业服务" aria-label="Permalink to &quot;商业服务&quot;">​</a></h4><ul><li><a href="https://javascriptobfuscator.com/" target="_blank" rel="noreferrer">https://javascriptobfuscator.com/</a></li><li><a href="https://jscrambler.com/" target="_blank" rel="noreferrer">https://jscrambler.com/</a></li><li><a href="http://stunnix.com/" target="_blank" rel="noreferrer">http://stunnix.com/</a></li></ul><h3 id="javascript-混淆实现" tabindex="-1">JavaScript 混淆实现 <a class="header-anchor" href="#javascript-混淆实现" aria-label="Permalink to &quot;JavaScript 混淆实现&quot;">​</a></h3><p>基于 javascript-obfuscator 演示、使用多种混淆技术、依赖 Node.js。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pnpm init</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pnpm init</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pnpm i javascript</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">obfuscator </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">save</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pnpm i javascript</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">obfuscator </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">save</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">dev</span></span></code></pre></div><h4 id="基础案例" tabindex="-1">基础案例 <a class="header-anchor" href="#基础案例" aria-label="Permalink to &quot;基础案例&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// demo01.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obfuscator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;javascript-obfuscator&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  const x  = &#39;l&#39; + 1</span></span>
<span class="line"><span style="color:#9ECBFF;">  console.log(&#39;x&#39;, x)</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  compact: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否压缩成一行</span></span>
<span class="line"><span style="color:#E1E4E8;">  controlFlowFlattening: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 控制流平坦化</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> obfuscator.</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options).</span><span style="color:#B392F0;">getObfuscatedCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const _0x319a8e = _0x17c8;</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x52f8e7, _0x57164d) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x46023b = _0x17c8, _0x430115 = _0x52f8e7();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x139205 = parseInt(_0x46023b(0x1c2)) / 0x1 + -parseInt(_0x46023b(0x1c0)) / 0x2 + -parseInt(_0x46023b(0x1c4)) / 0x3 + parseInt(_0x46023b(0x1be)) / 0x4 * (-parseInt(_0x46023b(0x1bc)) / 0x5) + -parseInt(_0x46023b(0x1ba)) / 0x6 + -parseInt(_0x46023b(0x1bb)) / 0x7 * (-parseInt(_0x46023b(0x1bd)) / 0x8) + -parseInt(_0x46023b(0x1c1)) / 0x9 * (-parseInt(_0x46023b(0x1c3)) / 0xa);</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x139205 === _0x57164d)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">// heora@yueluodeMBP obfuscator % node demo01.js</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x37c2(_0x15e667, _0x179462) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x3fc284 = _0x3fc2();</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0x37c2 = function (_0x37c288, _0x365673) {</span></span>
<span class="line"><span style="color:#6A737D;">//         _0x37c288 = _0x37c288 - 0x149;</span></span>
<span class="line"><span style="color:#6A737D;">//         let _0x3bb96b = _0x3fc284[_0x37c288];</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0x3bb96b;</span></span>
<span class="line"><span style="color:#6A737D;">//     }, _0x37c2(_0x15e667, _0x179462);</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// const _0x41fee7 = _0x37c2;</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x3fc2() {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0xff6162 = [</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;2180445LYHBNw&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;6PoXlVC&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;1062245HPVdof&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;4962699JsvSZR&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;2037424UwkIQW&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;2wCqcbN&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;22550990HHAjbJ&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;log&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;181064EFBbAW&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;744311jBDKbx&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;153fCiFKW&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//     ];</span></span>
<span class="line"><span style="color:#6A737D;">//     _0x3fc2 = function () {</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0xff6162;</span></span>
<span class="line"><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0x3fc2();</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x44b360, _0x36241e) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x352cf1 = _0x37c2, _0x59526 = _0x44b360();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x546e33 = -parseInt(_0x352cf1(0x153)) / 0x1 + parseInt(_0x352cf1(0x14f)) / 0x2 * (parseInt(_0x352cf1(0x14a)) / 0x3) + -parseInt(_0x352cf1(0x14e)) / 0x4 + -parseInt(_0x352cf1(0x14c)) / 0x5 * (parseInt(_0x352cf1(0x14b)) / 0x6) + -parseInt(_0x352cf1(0x14d)) / 0x7 + parseInt(_0x352cf1(0x152)) / 0x8 * (-parseInt(_0x352cf1(0x149)) / 0x9) + parseInt(_0x352cf1(0x150)) / 0xa;</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x546e33 === _0x36241e)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">//                 _0x59526[&#39;push&#39;](_0x59526[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         } catch (_0x479a3c) {</span></span>
<span class="line"><span style="color:#6A737D;">//             _0x59526[&#39;push&#39;](_0x59526[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0x3fc2, 0x670c0));</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// console[_0x41fee7(0x151)](&#39;x&#39;, x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// demo01.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obfuscator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;javascript-obfuscator&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  const x  = &#39;l&#39; + 1</span></span>
<span class="line"><span style="color:#032F62;">  console.log(&#39;x&#39;, x)</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  compact: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否压缩成一行</span></span>
<span class="line"><span style="color:#24292E;">  controlFlowFlattening: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 控制流平坦化</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> obfuscator.</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options).</span><span style="color:#6F42C1;">getObfuscatedCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const _0x319a8e = _0x17c8;</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x52f8e7, _0x57164d) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x46023b = _0x17c8, _0x430115 = _0x52f8e7();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x139205 = parseInt(_0x46023b(0x1c2)) / 0x1 + -parseInt(_0x46023b(0x1c0)) / 0x2 + -parseInt(_0x46023b(0x1c4)) / 0x3 + parseInt(_0x46023b(0x1be)) / 0x4 * (-parseInt(_0x46023b(0x1bc)) / 0x5) + -parseInt(_0x46023b(0x1ba)) / 0x6 + -parseInt(_0x46023b(0x1bb)) / 0x7 * (-parseInt(_0x46023b(0x1bd)) / 0x8) + -parseInt(_0x46023b(0x1c1)) / 0x9 * (-parseInt(_0x46023b(0x1c3)) / 0xa);</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x139205 === _0x57164d)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">// heora@yueluodeMBP obfuscator % node demo01.js</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x37c2(_0x15e667, _0x179462) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x3fc284 = _0x3fc2();</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0x37c2 = function (_0x37c288, _0x365673) {</span></span>
<span class="line"><span style="color:#6A737D;">//         _0x37c288 = _0x37c288 - 0x149;</span></span>
<span class="line"><span style="color:#6A737D;">//         let _0x3bb96b = _0x3fc284[_0x37c288];</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0x3bb96b;</span></span>
<span class="line"><span style="color:#6A737D;">//     }, _0x37c2(_0x15e667, _0x179462);</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// const _0x41fee7 = _0x37c2;</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x3fc2() {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0xff6162 = [</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;2180445LYHBNw&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;6PoXlVC&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;1062245HPVdof&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;4962699JsvSZR&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;2037424UwkIQW&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;2wCqcbN&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;22550990HHAjbJ&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;log&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;181064EFBbAW&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;744311jBDKbx&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;153fCiFKW&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//     ];</span></span>
<span class="line"><span style="color:#6A737D;">//     _0x3fc2 = function () {</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0xff6162;</span></span>
<span class="line"><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0x3fc2();</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x44b360, _0x36241e) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x352cf1 = _0x37c2, _0x59526 = _0x44b360();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x546e33 = -parseInt(_0x352cf1(0x153)) / 0x1 + parseInt(_0x352cf1(0x14f)) / 0x2 * (parseInt(_0x352cf1(0x14a)) / 0x3) + -parseInt(_0x352cf1(0x14e)) / 0x4 + -parseInt(_0x352cf1(0x14c)) / 0x5 * (parseInt(_0x352cf1(0x14b)) / 0x6) + -parseInt(_0x352cf1(0x14d)) / 0x7 + parseInt(_0x352cf1(0x152)) / 0x8 * (-parseInt(_0x352cf1(0x149)) / 0x9) + parseInt(_0x352cf1(0x150)) / 0xa;</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x546e33 === _0x36241e)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">//                 _0x59526[&#39;push&#39;](_0x59526[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         } catch (_0x479a3c) {</span></span>
<span class="line"><span style="color:#6A737D;">//             _0x59526[&#39;push&#39;](_0x59526[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0x3fc2, 0x670c0));</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// console[_0x41fee7(0x151)](&#39;x&#39;, x);</span></span></code></pre></div><p>整体来看，混淆之后可读性变得非常差。</p><h4 id="代码压缩" tabindex="-1">代码压缩 <a class="header-anchor" href="#代码压缩" aria-label="Permalink to &quot;代码压缩&quot;">​</a></h4><p>启用 compact 配置可以进行代码压缩，将多行代码压缩为一行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obfuscator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;javascript-obfuscator&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  const x  = &#39;l&#39; + 1</span></span>
<span class="line"><span style="color:#9ECBFF;">  console.log(&#39;x&#39;, x)</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  compact: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否压缩成一行</span></span>
<span class="line"><span style="color:#E1E4E8;">  controlFlowFlattening: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 控制流平坦化</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> obfuscator.</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options).</span><span style="color:#B392F0;">getObfuscatedCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function _0x1ed0(){const _0x11ff60=[&#39;1696072pCxUdw&#39;,&#39;9081JMWsXK&#39;,&#39;58LluwlY&#39;,&#39;log&#39;,&#39;2552oFOSUn&#39;,&#39;1122qjQuAv&#39;,&#39;25537SpbjXH&#39;,&#39;711552eXkfAf&#39;,&#39;4202505CboVKg&#39;,&#39;8669610XfCMvT&#39;,&#39;29701fxdBiQ&#39;];_0x1ed0=function(){return _0x11ff60;};return _0x1ed0();}const _0x34263e=_0x2ad4;(function(_0x51afa7,_0x14bd8d){const _0x11aac9=_0x2ad4,_0x4255eb=_0x51afa7();while(!![]){try{const _0x2f7cdd=parseInt(_0x11aac9(0x1a4))/0x1*(parseInt(_0x11aac9(0x1a0))/0x2)+-parseInt(_0x11aac9(0x19a))/0x3+-parseInt(_0x11aac9(0x19e))/0x4+-parseInt(_0x11aac9(0x19b))/0x5+parseInt(_0x11aac9(0x1a3))/0x6*(parseInt(_0x11aac9(0x19d))/0x7)+parseInt(_0x11aac9(0x1a2))/0x8*(-parseInt(_0x11aac9(0x19f))/0x9)+parseInt(_0x11aac9(0x19c))/0xa;if(_0x2f7cdd===_0x14bd8d)break;else _0x4255eb[&#39;push&#39;](_0x4255eb[&#39;shift&#39;]());}catch(_0x12ce85){_0x4255eb[&#39;push&#39;](_0x4255eb[&#39;shift&#39;]());}}}(_0x1ed0,0x8cf79));const x=&#39;l&#39;+0x1;function _0x2ad4(_0x3170d9,_0x25c3ba){const _0x1ed02b=_0x1ed0();return _0x2ad4=function(_0x2ad40e,_0x2457e3){_0x2ad40e=_0x2ad40e-0x19a;let _0xf8cd45=_0x1ed02b[_0x2ad40e];return _0xf8cd45;},_0x2ad4(_0x3170d9,_0x25c3ba);}console[_0x34263e(0x1a1)](&#39;x&#39;,x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obfuscator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;javascript-obfuscator&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  const x  = &#39;l&#39; + 1</span></span>
<span class="line"><span style="color:#032F62;">  console.log(&#39;x&#39;, x)</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  compact: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否压缩成一行</span></span>
<span class="line"><span style="color:#24292E;">  controlFlowFlattening: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 控制流平坦化</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> obfuscator.</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options).</span><span style="color:#6F42C1;">getObfuscatedCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function _0x1ed0(){const _0x11ff60=[&#39;1696072pCxUdw&#39;,&#39;9081JMWsXK&#39;,&#39;58LluwlY&#39;,&#39;log&#39;,&#39;2552oFOSUn&#39;,&#39;1122qjQuAv&#39;,&#39;25537SpbjXH&#39;,&#39;711552eXkfAf&#39;,&#39;4202505CboVKg&#39;,&#39;8669610XfCMvT&#39;,&#39;29701fxdBiQ&#39;];_0x1ed0=function(){return _0x11ff60;};return _0x1ed0();}const _0x34263e=_0x2ad4;(function(_0x51afa7,_0x14bd8d){const _0x11aac9=_0x2ad4,_0x4255eb=_0x51afa7();while(!![]){try{const _0x2f7cdd=parseInt(_0x11aac9(0x1a4))/0x1*(parseInt(_0x11aac9(0x1a0))/0x2)+-parseInt(_0x11aac9(0x19a))/0x3+-parseInt(_0x11aac9(0x19e))/0x4+-parseInt(_0x11aac9(0x19b))/0x5+parseInt(_0x11aac9(0x1a3))/0x6*(parseInt(_0x11aac9(0x19d))/0x7)+parseInt(_0x11aac9(0x1a2))/0x8*(-parseInt(_0x11aac9(0x19f))/0x9)+parseInt(_0x11aac9(0x19c))/0xa;if(_0x2f7cdd===_0x14bd8d)break;else _0x4255eb[&#39;push&#39;](_0x4255eb[&#39;shift&#39;]());}catch(_0x12ce85){_0x4255eb[&#39;push&#39;](_0x4255eb[&#39;shift&#39;]());}}}(_0x1ed0,0x8cf79));const x=&#39;l&#39;+0x1;function _0x2ad4(_0x3170d9,_0x25c3ba){const _0x1ed02b=_0x1ed0();return _0x2ad4=function(_0x2ad40e,_0x2457e3){_0x2ad40e=_0x2ad40e-0x19a;let _0xf8cd45=_0x1ed02b[_0x2ad40e];return _0xf8cd45;},_0x2ad4(_0x3170d9,_0x25c3ba);}console[_0x34263e(0x1a1)](&#39;x&#39;,x);</span></span></code></pre></div><h4 id="变量名混淆" tabindex="-1">变量名混淆 <a class="header-anchor" href="#变量名混淆" aria-label="Permalink to &quot;变量名混淆&quot;">​</a></h4><p>controlFlowFlattening 配置为 true，使用的是 16 进制混淆。我们还可以使用 identifierNameGenerator 属性， 设置其值为 <code>mangled</code>，即普通混淆。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">obfuscator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;javascript-obfuscator&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  const x  = &#39;l&#39; + 1</span></span>
<span class="line"><span style="color:#9ECBFF;">  console.log(&#39;x&#39;, x)</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  compact: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否压缩成一行</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// controlFlowFlattening: true // 控制流平坦化</span></span>
<span class="line"><span style="color:#E1E4E8;">  identifierNamesGenerator: </span><span style="color:#9ECBFF;">&#39;mangled&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> obfuscator.</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options).</span><span style="color:#B392F0;">getObfuscatedCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function a(){const i=[&#39;1402511atPvUm&#39;,&#39;226fjmYht&#39;,&#39;1084160Vfcblk&#39;,&#39;6748XotdGE&#39;,&#39;6ldcOls&#39;,&#39;374521DOItpE&#39;,&#39;587862aDEfQq&#39;,&#39;56gRDPSI&#39;,&#39;307471KdMVmp&#39;,&#39;5862OyJEBp&#39;,&#39;215otlhqL&#39;];a=function(){return i;};return a();}(function(c,d){const h=b,e=c();while(!![]){try{const f=-parseInt(h(0x184))/0x1+parseInt(h(0x188))/0x2*(parseInt(h(0x185))/0x3)+parseInt(h(0x17f))/0x4*(parseInt(h(0x186))/0x5)+-parseInt(h(0x180))/0x6*(-parseInt(h(0x181))/0x7)+parseInt(h(0x183))/0x8*(parseInt(h(0x182))/0x9)+-parseInt(h(0x189))/0xa+-parseInt(h(0x187))/0xb;if(f===d)break;else e[&#39;push&#39;](e[&#39;shift&#39;]());}catch(g){e[&#39;push&#39;](e[&#39;shift&#39;]());}}}(a,0x3fa4c));function b(c,d){const e=a();return b=function(f,g){f=f-0x17f;let h=e[f];return h;},b(c,d);}const x=&#39;l&#39;+0x1;console[&#39;log&#39;](&#39;x&#39;,x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">obfuscator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;javascript-obfuscator&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  const x  = &#39;l&#39; + 1</span></span>
<span class="line"><span style="color:#032F62;">  console.log(&#39;x&#39;, x)</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  compact: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否压缩成一行</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// controlFlowFlattening: true // 控制流平坦化</span></span>
<span class="line"><span style="color:#24292E;">  identifierNamesGenerator: </span><span style="color:#032F62;">&#39;mangled&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> obfuscator.</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options).</span><span style="color:#6F42C1;">getObfuscatedCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function a(){const i=[&#39;1402511atPvUm&#39;,&#39;226fjmYht&#39;,&#39;1084160Vfcblk&#39;,&#39;6748XotdGE&#39;,&#39;6ldcOls&#39;,&#39;374521DOItpE&#39;,&#39;587862aDEfQq&#39;,&#39;56gRDPSI&#39;,&#39;307471KdMVmp&#39;,&#39;5862OyJEBp&#39;,&#39;215otlhqL&#39;];a=function(){return i;};return a();}(function(c,d){const h=b,e=c();while(!![]){try{const f=-parseInt(h(0x184))/0x1+parseInt(h(0x188))/0x2*(parseInt(h(0x185))/0x3)+parseInt(h(0x17f))/0x4*(parseInt(h(0x186))/0x5)+-parseInt(h(0x180))/0x6*(-parseInt(h(0x181))/0x7)+parseInt(h(0x183))/0x8*(parseInt(h(0x182))/0x9)+-parseInt(h(0x189))/0xa+-parseInt(h(0x187))/0xb;if(f===d)break;else e[&#39;push&#39;](e[&#39;shift&#39;]());}catch(g){e[&#39;push&#39;](e[&#39;shift&#39;]());}}}(a,0x3fa4c));function b(c,d){const e=a();return b=function(f,g){f=f-0x17f;let h=e[f];return h;},b(c,d);}const x=&#39;l&#39;+0x1;console[&#39;log&#39;](&#39;x&#39;,x);</span></span></code></pre></div><h4 id="字符串混淆" tabindex="-1">字符串混淆 <a class="header-anchor" href="#字符串混淆" aria-label="Permalink to &quot;字符串混淆&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  stringArray: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  rotateStringArray: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  stringArrayEncoding: [</span><span style="color:#9ECBFF;">&#39;base64&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// none, base64, rc4</span></span>
<span class="line"><span style="color:#E1E4E8;">  stringArrayThreshold: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> obfuscator.</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options).</span><span style="color:#B392F0;">getObfuscatedCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const _0x58c2e4=_0x30f4;(function(_0x3dd5c3,_0x43cf03){const _0x50015b=_0x30f4,_0x175929=_0x3dd5c3();while(!![]){try{const _0x179e3e=parseInt(_0x50015b(0x13b))/0x1+-parseInt(_0x50015b(0x13d))/0x2+parseInt(_0x50015b(0x13e))/0x3+-parseInt(_0x50015b(0x13a))/0x4*(parseInt(_0x50015b(0x13f))/0x5)+-parseInt(_0x50015b(0x143))/0x6+-parseInt(_0x50015b(0x141))/0x7+-parseInt(_0x50015b(0x140))/0x8*(-parseInt(_0x50015b(0x13c))/0x9);if(_0x179e3e===_0x43cf03)break;else _0x175929[&#39;push&#39;](_0x175929[&#39;shift&#39;]());}catch(_0x541ffd){_0x175929[&#39;push&#39;](_0x175929[&#39;shift&#39;]());}}}(_0x1ccc,0xe0350));function _0x30f4(_0x4eb79e,_0x329d01){const _0x1ccc2c=_0x1ccc();return _0x30f4=function(_0x30f48d,_0x5a5d5e){_0x30f48d=_0x30f48d-0x13a;let _0x2d532d=_0x1ccc2c[_0x30f48d];if(_0x30f4[&#39;xjhYfs&#39;]===undefined){var _0x41f5fe=function(_0x56b76d){const _0x53a9ee=&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=&#39;;let _0x1528e0=&#39;&#39;,_0x57a8e8=&#39;&#39;;for(let _0x170a79=0x0,_0xdbd185,_0x647290,_0x1847b2=0x0;_0x647290=_0x56b76d[&#39;charAt&#39;](_0x1847b2++);~_0x647290&amp;&amp;(_0xdbd185=_0x170a79%0x4?_0xdbd185*0x40+_0x647290:_0x647290,_0x170a79++%0x4)?_0x1528e0+=String[&#39;fromCharCode&#39;](0xff&amp;_0xdbd185&gt;&gt;(-0x2*_0x170a79&amp;0x6)):0x0){_0x647290=_0x53a9ee[&#39;indexOf&#39;](_0x647290);}for(let _0x7c52f0=0x0,_0x13a433=_0x1528e0[&#39;length&#39;];_0x7c52f0&lt;_0x13a433;_0x7c52f0++){_0x57a8e8+=&#39;%&#39;+(&#39;00&#39;+_0x1528e0[&#39;charCodeAt&#39;](_0x7c52f0)[&#39;toString&#39;](0x10))[&#39;slice&#39;](-0x2);}return decodeURIComponent(_0x57a8e8);};_0x30f4[&#39;BApANM&#39;]=_0x41f5fe,_0x4eb79e=arguments,_0x30f4[&#39;xjhYfs&#39;]=!![];}const _0x37ec4a=_0x1ccc2c[0x0],_0x52ca06=_0x30f48d+_0x37ec4a,_0x44eed0=_0x4eb79e[_0x52ca06];return!_0x44eed0?(_0x2d532d=_0x30f4[&#39;BApANM&#39;](_0x2d532d),_0x4eb79e[_0x52ca06]=_0x2d532d):_0x2d532d=_0x44eed0,_0x2d532d;},_0x30f4(_0x4eb79e,_0x329d01);}function _0x1ccc(){const _0x1e5d0c=[&#39;mZzTuuDct0C&#39;,&#39;mtm4ntG1m1vnshvUAa&#39;,&#39;mJu4mdq4mdLSuwnuAvq&#39;,&#39;mJa0mZKWnfbqtgvWBa&#39;,&#39;ndyXotm2n0jjuNzfCa&#39;,&#39;nti3ndKWBgX6yxr5&#39;,&#39;ofHbvfvTua&#39;,&#39;mteXnJy2mtb6yw9mBhG&#39;,&#39;Bg9N&#39;,&#39;nZG0nJK2mLfeu0zSsG&#39;];_0x1ccc=function(){return _0x1e5d0c;};return _0x1ccc();}const x=&#39;l&#39;+0x1;console[_0x58c2e4(0x142)](&#39;x&#39;,x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  stringArray: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  rotateStringArray: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  stringArrayEncoding: [</span><span style="color:#032F62;">&#39;base64&#39;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// none, base64, rc4</span></span>
<span class="line"><span style="color:#24292E;">  stringArrayThreshold: </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> obfuscator.</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options).</span><span style="color:#6F42C1;">getObfuscatedCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const _0x58c2e4=_0x30f4;(function(_0x3dd5c3,_0x43cf03){const _0x50015b=_0x30f4,_0x175929=_0x3dd5c3();while(!![]){try{const _0x179e3e=parseInt(_0x50015b(0x13b))/0x1+-parseInt(_0x50015b(0x13d))/0x2+parseInt(_0x50015b(0x13e))/0x3+-parseInt(_0x50015b(0x13a))/0x4*(parseInt(_0x50015b(0x13f))/0x5)+-parseInt(_0x50015b(0x143))/0x6+-parseInt(_0x50015b(0x141))/0x7+-parseInt(_0x50015b(0x140))/0x8*(-parseInt(_0x50015b(0x13c))/0x9);if(_0x179e3e===_0x43cf03)break;else _0x175929[&#39;push&#39;](_0x175929[&#39;shift&#39;]());}catch(_0x541ffd){_0x175929[&#39;push&#39;](_0x175929[&#39;shift&#39;]());}}}(_0x1ccc,0xe0350));function _0x30f4(_0x4eb79e,_0x329d01){const _0x1ccc2c=_0x1ccc();return _0x30f4=function(_0x30f48d,_0x5a5d5e){_0x30f48d=_0x30f48d-0x13a;let _0x2d532d=_0x1ccc2c[_0x30f48d];if(_0x30f4[&#39;xjhYfs&#39;]===undefined){var _0x41f5fe=function(_0x56b76d){const _0x53a9ee=&#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=&#39;;let _0x1528e0=&#39;&#39;,_0x57a8e8=&#39;&#39;;for(let _0x170a79=0x0,_0xdbd185,_0x647290,_0x1847b2=0x0;_0x647290=_0x56b76d[&#39;charAt&#39;](_0x1847b2++);~_0x647290&amp;&amp;(_0xdbd185=_0x170a79%0x4?_0xdbd185*0x40+_0x647290:_0x647290,_0x170a79++%0x4)?_0x1528e0+=String[&#39;fromCharCode&#39;](0xff&amp;_0xdbd185&gt;&gt;(-0x2*_0x170a79&amp;0x6)):0x0){_0x647290=_0x53a9ee[&#39;indexOf&#39;](_0x647290);}for(let _0x7c52f0=0x0,_0x13a433=_0x1528e0[&#39;length&#39;];_0x7c52f0&lt;_0x13a433;_0x7c52f0++){_0x57a8e8+=&#39;%&#39;+(&#39;00&#39;+_0x1528e0[&#39;charCodeAt&#39;](_0x7c52f0)[&#39;toString&#39;](0x10))[&#39;slice&#39;](-0x2);}return decodeURIComponent(_0x57a8e8);};_0x30f4[&#39;BApANM&#39;]=_0x41f5fe,_0x4eb79e=arguments,_0x30f4[&#39;xjhYfs&#39;]=!![];}const _0x37ec4a=_0x1ccc2c[0x0],_0x52ca06=_0x30f48d+_0x37ec4a,_0x44eed0=_0x4eb79e[_0x52ca06];return!_0x44eed0?(_0x2d532d=_0x30f4[&#39;BApANM&#39;](_0x2d532d),_0x4eb79e[_0x52ca06]=_0x2d532d):_0x2d532d=_0x44eed0,_0x2d532d;},_0x30f4(_0x4eb79e,_0x329d01);}function _0x1ccc(){const _0x1e5d0c=[&#39;mZzTuuDct0C&#39;,&#39;mtm4ntG1m1vnshvUAa&#39;,&#39;mJu4mdq4mdLSuwnuAvq&#39;,&#39;mJa0mZKWnfbqtgvWBa&#39;,&#39;ndyXotm2n0jjuNzfCa&#39;,&#39;nti3ndKWBgX6yxr5&#39;,&#39;ofHbvfvTua&#39;,&#39;mteXnJy2mtb6yw9mBhG&#39;,&#39;Bg9N&#39;,&#39;nZG0nJK2mLfeu0zSsG&#39;];_0x1ccc=function(){return _0x1e5d0c;};return _0x1ccc();}const x=&#39;l&#39;+0x1;console[_0x58c2e4(0x142)](&#39;x&#39;,x);</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  compact: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  unicodeEscaoeSequence: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> obfuscator.</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options).</span><span style="color:#B392F0;">getObfuscatedCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function _0x26ba(_0x36c780, _0x53d9ad) {</span></span>
<span class="line"><span style="color:#6A737D;">//   const _0x395a7c = _0x395a();</span></span>
<span class="line"><span style="color:#6A737D;">//   return _0x26ba = function (_0x26ba1b, _0x50e0f8) {</span></span>
<span class="line"><span style="color:#6A737D;">//       _0x26ba1b = _0x26ba1b - 0xf6;</span></span>
<span class="line"><span style="color:#6A737D;">//       let _0x673a36 = _0x395a7c[_0x26ba1b];</span></span>
<span class="line"><span style="color:#6A737D;">//       return _0x673a36;</span></span>
<span class="line"><span style="color:#6A737D;">//   }, _0x26ba(_0x36c780, _0x53d9ad);</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// const _0x4a8483 = _0x26ba;</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x4f6148, _0x62c41e) {</span></span>
<span class="line"><span style="color:#6A737D;">//   const _0x12fd5b = _0x26ba, _0x1cdb96 = _0x4f6148();</span></span>
<span class="line"><span style="color:#6A737D;">//   while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//       try {</span></span>
<span class="line"><span style="color:#6A737D;">//           const _0x425692 = -parseInt(_0x12fd5b(0xff)) / 0x1 * (-parseInt(_0x12fd5b(0xfc)) / 0x2) + -parseInt(_0x12fd5b(0xf7)) / 0x3 + parseInt(_0x12fd5b(0xfb)) / 0x4 * (-parseInt(_0x12fd5b(0xfd)) / 0x5) + -parseInt(_0x12fd5b(0xfe)) / 0x6 * (-parseInt(_0x12fd5b(0xf9)) / 0x7) + -parseInt(_0x12fd5b(0xf6)) / 0x8 + -parseInt(_0x12fd5b(0xfa)) / 0x9 + parseInt(_0x12fd5b(0xf8)) / 0xa;</span></span>
<span class="line"><span style="color:#6A737D;">//           if (_0x425692 === _0x62c41e)</span></span>
<span class="line"><span style="color:#6A737D;">//               break;</span></span>
<span class="line"><span style="color:#6A737D;">//           else</span></span>
<span class="line"><span style="color:#6A737D;">//               _0x1cdb96[&#39;push&#39;](_0x1cdb96[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//       } catch (_0x52d520) {</span></span>
<span class="line"><span style="color:#6A737D;">//           _0x1cdb96[&#39;push&#39;](_0x1cdb96[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//       }</span></span>
<span class="line"><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0x395a, 0xe5bec));</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x395a() {</span></span>
<span class="line"><span style="color:#6A737D;">//   const _0x396de0 = [</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;11wNEArv&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;log&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;3704680AnmDYz&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;4713714utvsgx&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;34268930dvIjTj&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;53137GzFDpL&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;8750070qAxqEg&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;260292YHShGR&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;138466fDpVBL&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;85BHgFkg&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;684wMjWNk&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//   ];</span></span>
<span class="line"><span style="color:#6A737D;">//   _0x395a = function () {</span></span>
<span class="line"><span style="color:#6A737D;">//       return _0x396de0;</span></span>
<span class="line"><span style="color:#6A737D;">//   };</span></span>
<span class="line"><span style="color:#6A737D;">//   return _0x395a();</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// console[_0x4a8483(0x100)](&#39;x&#39;, x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  compact: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  unicodeEscaoeSequence: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> obfuscator.</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options).</span><span style="color:#6F42C1;">getObfuscatedCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function _0x26ba(_0x36c780, _0x53d9ad) {</span></span>
<span class="line"><span style="color:#6A737D;">//   const _0x395a7c = _0x395a();</span></span>
<span class="line"><span style="color:#6A737D;">//   return _0x26ba = function (_0x26ba1b, _0x50e0f8) {</span></span>
<span class="line"><span style="color:#6A737D;">//       _0x26ba1b = _0x26ba1b - 0xf6;</span></span>
<span class="line"><span style="color:#6A737D;">//       let _0x673a36 = _0x395a7c[_0x26ba1b];</span></span>
<span class="line"><span style="color:#6A737D;">//       return _0x673a36;</span></span>
<span class="line"><span style="color:#6A737D;">//   }, _0x26ba(_0x36c780, _0x53d9ad);</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// const _0x4a8483 = _0x26ba;</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x4f6148, _0x62c41e) {</span></span>
<span class="line"><span style="color:#6A737D;">//   const _0x12fd5b = _0x26ba, _0x1cdb96 = _0x4f6148();</span></span>
<span class="line"><span style="color:#6A737D;">//   while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//       try {</span></span>
<span class="line"><span style="color:#6A737D;">//           const _0x425692 = -parseInt(_0x12fd5b(0xff)) / 0x1 * (-parseInt(_0x12fd5b(0xfc)) / 0x2) + -parseInt(_0x12fd5b(0xf7)) / 0x3 + parseInt(_0x12fd5b(0xfb)) / 0x4 * (-parseInt(_0x12fd5b(0xfd)) / 0x5) + -parseInt(_0x12fd5b(0xfe)) / 0x6 * (-parseInt(_0x12fd5b(0xf9)) / 0x7) + -parseInt(_0x12fd5b(0xf6)) / 0x8 + -parseInt(_0x12fd5b(0xfa)) / 0x9 + parseInt(_0x12fd5b(0xf8)) / 0xa;</span></span>
<span class="line"><span style="color:#6A737D;">//           if (_0x425692 === _0x62c41e)</span></span>
<span class="line"><span style="color:#6A737D;">//               break;</span></span>
<span class="line"><span style="color:#6A737D;">//           else</span></span>
<span class="line"><span style="color:#6A737D;">//               _0x1cdb96[&#39;push&#39;](_0x1cdb96[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//       } catch (_0x52d520) {</span></span>
<span class="line"><span style="color:#6A737D;">//           _0x1cdb96[&#39;push&#39;](_0x1cdb96[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//       }</span></span>
<span class="line"><span style="color:#6A737D;">//   }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0x395a, 0xe5bec));</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x395a() {</span></span>
<span class="line"><span style="color:#6A737D;">//   const _0x396de0 = [</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;11wNEArv&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;log&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;3704680AnmDYz&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;4713714utvsgx&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;34268930dvIjTj&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;53137GzFDpL&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;8750070qAxqEg&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;260292YHShGR&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;138466fDpVBL&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;85BHgFkg&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//       &#39;684wMjWNk&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//   ];</span></span>
<span class="line"><span style="color:#6A737D;">//   _0x395a = function () {</span></span>
<span class="line"><span style="color:#6A737D;">//       return _0x396de0;</span></span>
<span class="line"><span style="color:#6A737D;">//   };</span></span>
<span class="line"><span style="color:#6A737D;">//   return _0x395a();</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// console[_0x4a8483(0x100)](&#39;x&#39;, x);</span></span></code></pre></div><h4 id="自我保护" tabindex="-1">自我保护 <a class="header-anchor" href="#自我保护" aria-label="Permalink to &quot;自我保护&quot;">​</a></h4><p>代码混淆后，如果格式化运行，会将浏览器直接卡死。</p><p>原理：申请一些空间、新建一些对象、无限的新建一些 DOM 节点，或者有一些其他操作，它会疯狂占用浏览器和本机内存，将浏览器直接卡死，无法运行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  selfDefending: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> obfuscator.</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options).</span><span style="color:#B392F0;">getObfuscatedCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function _0x6a5a(_0x57ebb1,_0x288f15){const _0x57a170=_0x3833();return _0x6a5a=function(_0x2482c9,_0x25f644){_0x2482c9=_0x2482c9-0x1ef;let _0x3833aa=_0x57a170[_0x2482c9];return _0x3833aa;},_0x6a5a(_0x57ebb1,_0x288f15);}const _0x252268=_0x6a5a;(function(_0x385891,_0x470326){const _0x193ce5=_0x6a5a,_0x3015bf=_0x385891();while(!![]){try{const _0x49f914=-parseInt(_0x193ce5(0x1fb))/0x1+-parseInt(_0x193ce5(0x1fc))/0x2*(parseInt(_0x193ce5(0x1ef))/0x3)+parseInt(_0x193ce5(0x1f3))/0x4+parseInt(_0x193ce5(0x1f2))/0x5*(parseInt(_0x193ce5(0x1f4))/0x6)+-parseInt(_0x193ce5(0x1f1))/0x7+parseInt(_0x193ce5(0x1f9))/0x8+-parseInt(_0x193ce5(0x1f0))/0x9*(parseInt(_0x193ce5(0x1f7))/0xa);if(_0x49f914===_0x470326)break;else _0x3015bf[&#39;push&#39;](_0x3015bf[&#39;shift&#39;]());}catch(_0x5897ea){_0x3015bf[&#39;push&#39;](_0x3015bf[&#39;shift&#39;]());}}}(_0x3833,0x86bac));const _0x25f644=(function(){let _0x8e8490=!![];return function(_0x19b5dc,_0x146e4a){const _0x16be9a=_0x8e8490?function(){const _0x556212=_0x6a5a;if(_0x146e4a){const _0x495ee9=_0x146e4a[_0x556212(0x1f5)](_0x19b5dc,arguments);return _0x146e4a=null,_0x495ee9;}}:function(){};return _0x8e8490=![],_0x16be9a;};}()),_0x2482c9=_0x25f644(this,function(){const _0x35d7d9=_0x6a5a;return _0x2482c9[&#39;toString&#39;]()[_0x35d7d9(0x1fa)](_0x35d7d9(0x1f6))[_0x35d7d9(0x1fd)]()[_0x35d7d9(0x1fe)](_0x2482c9)[_0x35d7d9(0x1fa)](_0x35d7d9(0x1f6));});_0x2482c9();function _0x3833(){const _0x3304a8=[&#39;5oGONaW&#39;,&#39;2118072PoiGNm&#39;,&#39;6069912QkkLzC&#39;,&#39;apply&#39;,&#39;(((.+)+)+)+$&#39;,&#39;236020nALghG&#39;,&#39;log&#39;,&#39;8703416GbJlym&#39;,&#39;search&#39;,&#39;697721FGPyIP&#39;,&#39;41456DmSEci&#39;,&#39;toString&#39;,&#39;constructor&#39;,&#39;51yNMskw&#39;,&#39;144UZjKrD&#39;,&#39;4546612XUZMRy&#39;];_0x3833=function(){return _0x3304a8;};return _0x3833();}const x=&#39;l&#39;+0x1;console[_0x252268(0x1f8)](&#39;x&#39;,x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  selfDefending: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> obfuscator.</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options).</span><span style="color:#6F42C1;">getObfuscatedCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// function _0x6a5a(_0x57ebb1,_0x288f15){const _0x57a170=_0x3833();return _0x6a5a=function(_0x2482c9,_0x25f644){_0x2482c9=_0x2482c9-0x1ef;let _0x3833aa=_0x57a170[_0x2482c9];return _0x3833aa;},_0x6a5a(_0x57ebb1,_0x288f15);}const _0x252268=_0x6a5a;(function(_0x385891,_0x470326){const _0x193ce5=_0x6a5a,_0x3015bf=_0x385891();while(!![]){try{const _0x49f914=-parseInt(_0x193ce5(0x1fb))/0x1+-parseInt(_0x193ce5(0x1fc))/0x2*(parseInt(_0x193ce5(0x1ef))/0x3)+parseInt(_0x193ce5(0x1f3))/0x4+parseInt(_0x193ce5(0x1f2))/0x5*(parseInt(_0x193ce5(0x1f4))/0x6)+-parseInt(_0x193ce5(0x1f1))/0x7+parseInt(_0x193ce5(0x1f9))/0x8+-parseInt(_0x193ce5(0x1f0))/0x9*(parseInt(_0x193ce5(0x1f7))/0xa);if(_0x49f914===_0x470326)break;else _0x3015bf[&#39;push&#39;](_0x3015bf[&#39;shift&#39;]());}catch(_0x5897ea){_0x3015bf[&#39;push&#39;](_0x3015bf[&#39;shift&#39;]());}}}(_0x3833,0x86bac));const _0x25f644=(function(){let _0x8e8490=!![];return function(_0x19b5dc,_0x146e4a){const _0x16be9a=_0x8e8490?function(){const _0x556212=_0x6a5a;if(_0x146e4a){const _0x495ee9=_0x146e4a[_0x556212(0x1f5)](_0x19b5dc,arguments);return _0x146e4a=null,_0x495ee9;}}:function(){};return _0x8e8490=![],_0x16be9a;};}()),_0x2482c9=_0x25f644(this,function(){const _0x35d7d9=_0x6a5a;return _0x2482c9[&#39;toString&#39;]()[_0x35d7d9(0x1fa)](_0x35d7d9(0x1f6))[_0x35d7d9(0x1fd)]()[_0x35d7d9(0x1fe)](_0x2482c9)[_0x35d7d9(0x1fa)](_0x35d7d9(0x1f6));});_0x2482c9();function _0x3833(){const _0x3304a8=[&#39;5oGONaW&#39;,&#39;2118072PoiGNm&#39;,&#39;6069912QkkLzC&#39;,&#39;apply&#39;,&#39;(((.+)+)+)+$&#39;,&#39;236020nALghG&#39;,&#39;log&#39;,&#39;8703416GbJlym&#39;,&#39;search&#39;,&#39;697721FGPyIP&#39;,&#39;41456DmSEci&#39;,&#39;toString&#39;,&#39;constructor&#39;,&#39;51yNMskw&#39;,&#39;144UZjKrD&#39;,&#39;4546612XUZMRy&#39;];_0x3833=function(){return _0x3304a8;};return _0x3833();}const x=&#39;l&#39;+0x1;console[_0x252268(0x1f8)](&#39;x&#39;,x);</span></span></code></pre></div><h4 id="控制流平坦化" tabindex="-1">控制流平坦化 <a class="header-anchor" href="#控制流平坦化" aria-label="Permalink to &quot;控制流平坦化&quot;">​</a></h4><p>逻辑处理块统一加上前驱逻辑块，提高逻辑流程复杂度。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  compact: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  controlFLowFlattening: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> obfuscator.</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options).</span><span style="color:#B392F0;">getObfuscatedCode</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">obfuscate</span><span style="color:#E1E4E8;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const _0x5dc750 = _0x5706;</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x3705ad, _0x1ab8ab) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x1cd39c = _0x5706, _0x35c863 = _0x3705ad();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x1b977e = parseInt(_0x1cd39c(0xb7)) / 0x1 * (-parseInt(_0x1cd39c(0xbc)) / 0x2) + -parseInt(_0x1cd39c(0xbf)) / 0x3 * (-parseInt(_0x1cd39c(0xba)) / 0x4) + -parseInt(_0x1cd39c(0xbe)) / 0x5 * (parseInt(_0x1cd39c(0xb6)) / 0x6) + parseInt(_0x1cd39c(0xc2)) / 0x7 + -parseInt(_0x1cd39c(0xb9)) / 0x8 + parseInt(_0x1cd39c(0xbb)) / 0x9 * (-parseInt(_0x1cd39c(0xc1)) / 0xa) + -parseInt(_0x1cd39c(0xb8)) / 0xb * (-parseInt(_0x1cd39c(0xc0)) / 0xc);</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x1b977e === _0x1ab8ab)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">//                 _0x35c863[&#39;push&#39;](_0x35c863[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         } catch (_0x40471c) {</span></span>
<span class="line"><span style="color:#6A737D;">//             _0x35c863[&#39;push&#39;](_0x35c863[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0x3311, 0x2e4d1));</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x5706(_0x5eb3cb, _0x2fe232) {</span></span>
<span class="line"><span style="color:#6A737D;">// heora@yueluodeMBP obfuscator % node index.js</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x5e0a(_0x3c930e, _0xf6aecd) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0xb7c1fd = _0xb7c1();</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0x5e0a = function (_0x5e0a43, _0x2da791) {</span></span>
<span class="line"><span style="color:#6A737D;">//         _0x5e0a43 = _0x5e0a43 - 0x91;</span></span>
<span class="line"><span style="color:#6A737D;">//         let _0x5bad25 = _0xb7c1fd[_0x5e0a43];</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0x5bad25;</span></span>
<span class="line"><span style="color:#6A737D;">//     }, _0x5e0a(_0x3c930e, _0xf6aecd);</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x5cc324, _0x3698c3) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x118339 = _0x5e0a, _0x5a6295 = _0x5cc324();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x2d006b = parseInt(_0x118339(0x9a)) / 0x1 * (-parseInt(_0x118339(0x97)) / 0x2) + parseInt(_0x118339(0x94)) / 0x3 + parseInt(_0x118339(0x98)) / 0x4 * (-parseInt(_0x118339(0x95)) / 0x5) + parseInt(_0x118339(0x91)) / 0x6 * (parseInt(_0x118339(0x99)) / 0x7) + parseInt(_0x118339(0x93)) / 0x8 + -parseInt(_0x118339(0x92)) / 0x9 * (parseInt(_0x118339(0x9b)) / 0xa) + parseInt(_0x118339(0x96)) / 0xb;</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x2d006b === _0x3698c3)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">//                 _0x5a6295[&#39;push&#39;](_0x5a6295[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         } catch (_0x610e47) {</span></span>
<span class="line"><span style="color:#6A737D;">//             _0x5a6295[&#39;push&#39;](_0x5a6295[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0xb7c1, 0xe2a91));</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// console[&#39;log&#39;](&#39;x&#39;, x);</span></span>
<span class="line"><span style="color:#6A737D;">// function _0xb7c1() {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x1b686a = [</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;13309008LblyTk&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;4726668qrEbyA&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;24065OkOLaS&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;849354IMMUmk&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;727178NkDDmz&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;956iVWkFu&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;12497821clefPv&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;5WaaQvM&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;20kFAjWw&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;6FgSNaA&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;5423157YBbrFb&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//     ];</span></span>
<span class="line"><span style="color:#6A737D;">//     _0xb7c1 = function () {</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0x1b686a;</span></span>
<span class="line"><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0xb7c1();</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  compact: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  controlFLowFlattening: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> obfuscator.</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options).</span><span style="color:#6F42C1;">getObfuscatedCode</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">obfuscate</span><span style="color:#24292E;">(code, options))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// const _0x5dc750 = _0x5706;</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x3705ad, _0x1ab8ab) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x1cd39c = _0x5706, _0x35c863 = _0x3705ad();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x1b977e = parseInt(_0x1cd39c(0xb7)) / 0x1 * (-parseInt(_0x1cd39c(0xbc)) / 0x2) + -parseInt(_0x1cd39c(0xbf)) / 0x3 * (-parseInt(_0x1cd39c(0xba)) / 0x4) + -parseInt(_0x1cd39c(0xbe)) / 0x5 * (parseInt(_0x1cd39c(0xb6)) / 0x6) + parseInt(_0x1cd39c(0xc2)) / 0x7 + -parseInt(_0x1cd39c(0xb9)) / 0x8 + parseInt(_0x1cd39c(0xbb)) / 0x9 * (-parseInt(_0x1cd39c(0xc1)) / 0xa) + -parseInt(_0x1cd39c(0xb8)) / 0xb * (-parseInt(_0x1cd39c(0xc0)) / 0xc);</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x1b977e === _0x1ab8ab)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">//                 _0x35c863[&#39;push&#39;](_0x35c863[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         } catch (_0x40471c) {</span></span>
<span class="line"><span style="color:#6A737D;">//             _0x35c863[&#39;push&#39;](_0x35c863[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0x3311, 0x2e4d1));</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x5706(_0x5eb3cb, _0x2fe232) {</span></span>
<span class="line"><span style="color:#6A737D;">// heora@yueluodeMBP obfuscator % node index.js</span></span>
<span class="line"><span style="color:#6A737D;">// function _0x5e0a(_0x3c930e, _0xf6aecd) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0xb7c1fd = _0xb7c1();</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0x5e0a = function (_0x5e0a43, _0x2da791) {</span></span>
<span class="line"><span style="color:#6A737D;">//         _0x5e0a43 = _0x5e0a43 - 0x91;</span></span>
<span class="line"><span style="color:#6A737D;">//         let _0x5bad25 = _0xb7c1fd[_0x5e0a43];</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0x5bad25;</span></span>
<span class="line"><span style="color:#6A737D;">//     }, _0x5e0a(_0x3c930e, _0xf6aecd);</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span>
<span class="line"><span style="color:#6A737D;">// (function (_0x5cc324, _0x3698c3) {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x118339 = _0x5e0a, _0x5a6295 = _0x5cc324();</span></span>
<span class="line"><span style="color:#6A737D;">//     while (!![]) {</span></span>
<span class="line"><span style="color:#6A737D;">//         try {</span></span>
<span class="line"><span style="color:#6A737D;">//             const _0x2d006b = parseInt(_0x118339(0x9a)) / 0x1 * (-parseInt(_0x118339(0x97)) / 0x2) + parseInt(_0x118339(0x94)) / 0x3 + parseInt(_0x118339(0x98)) / 0x4 * (-parseInt(_0x118339(0x95)) / 0x5) + parseInt(_0x118339(0x91)) / 0x6 * (parseInt(_0x118339(0x99)) / 0x7) + parseInt(_0x118339(0x93)) / 0x8 + -parseInt(_0x118339(0x92)) / 0x9 * (parseInt(_0x118339(0x9b)) / 0xa) + parseInt(_0x118339(0x96)) / 0xb;</span></span>
<span class="line"><span style="color:#6A737D;">//             if (_0x2d006b === _0x3698c3)</span></span>
<span class="line"><span style="color:#6A737D;">//                 break;</span></span>
<span class="line"><span style="color:#6A737D;">//             else</span></span>
<span class="line"><span style="color:#6A737D;">//                 _0x5a6295[&#39;push&#39;](_0x5a6295[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         } catch (_0x610e47) {</span></span>
<span class="line"><span style="color:#6A737D;">//             _0x5a6295[&#39;push&#39;](_0x5a6295[&#39;shift&#39;]());</span></span>
<span class="line"><span style="color:#6A737D;">//         }</span></span>
<span class="line"><span style="color:#6A737D;">//     }</span></span>
<span class="line"><span style="color:#6A737D;">// }(_0xb7c1, 0xe2a91));</span></span>
<span class="line"><span style="color:#6A737D;">// const x = &#39;l&#39; + 0x1;</span></span>
<span class="line"><span style="color:#6A737D;">// console[&#39;log&#39;](&#39;x&#39;, x);</span></span>
<span class="line"><span style="color:#6A737D;">// function _0xb7c1() {</span></span>
<span class="line"><span style="color:#6A737D;">//     const _0x1b686a = [</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;13309008LblyTk&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;4726668qrEbyA&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;24065OkOLaS&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;849354IMMUmk&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;727178NkDDmz&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;956iVWkFu&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;12497821clefPv&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;5WaaQvM&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;20kFAjWw&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;6FgSNaA&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">//         &#39;5423157YBbrFb&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//     ];</span></span>
<span class="line"><span style="color:#6A737D;">//     _0xb7c1 = function () {</span></span>
<span class="line"><span style="color:#6A737D;">//         return _0x1b686a;</span></span>
<span class="line"><span style="color:#6A737D;">//     };</span></span>
<span class="line"><span style="color:#6A737D;">//     return _0xb7c1();</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre></div><h4 id="僵尸代码注入" tabindex="-1">僵尸代码注入 <a class="header-anchor" href="#僵尸代码注入" aria-label="Permalink to &quot;僵尸代码注入&quot;">​</a></h4><p>僵尸代码：不会被执行的代码或对上下文没有任何影响的代码，注入后可以对现有的 JavaScript 代码阅读形成干扰。</p><h4 id="对象键名替换" tabindex="-1">对象键名替换 <a class="header-anchor" href="#对象键名替换" aria-label="Permalink to &quot;对象键名替换&quot;">​</a></h4><p>对 Object 对象键名替换</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  compact: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  transformObjectKeys: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  compact: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  transformObjectKeys: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="禁用控制台输出" tabindex="-1">禁用控制台输出 <a class="header-anchor" href="#禁用控制台输出" aria-label="Permalink to &quot;禁用控制台输出&quot;">​</a></h4><p>将控制台方法置空</p><ul><li>debug</li><li>info</li><li>error</li><li>exception</li><li>trace</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  disableConsoleOutput: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  disableConsoleOutput: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="调试保护" tabindex="-1">调试保护 <a class="header-anchor" href="#调试保护" aria-label="Permalink to &quot;调试保护&quot;">​</a></h4><p>无限 debug、定时 debug、debugger 关键字</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  debugProtection: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  debugProtection: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="域名锁定" tabindex="-1">域名锁定 <a class="header-anchor" href="#域名锁定" aria-label="Permalink to &quot;域名锁定&quot;">​</a></h4><p>只允许在特定域名下运行、降低被模拟风险</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  domainLock: [</span><span style="color:#9ECBFF;">&#39;yueluo.club&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  domainLock: [</span><span style="color:#032F62;">&#39;yueluo.club&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="其他实现" tabindex="-1">其他实现 <a class="header-anchor" href="#其他实现" aria-label="Permalink to &quot;其他实现&quot;">​</a></h4><p>JSFuck</p><ul><li>将变量进行逻辑替换，例如 false 会直接等于 <code>![]</code> ，然后把逻辑进行分析， 对代码进行混淆，可读性会变的非常差，体积也会变得很大。</li></ul><p>AAEncode</p><ul><li>将代码转换成表情符号的形式</li></ul><p>JJEncode</p><ul><li>将代码转换成 <code>$</code>、<code>+</code>、<code>:</code> 的形式</li></ul><p>上述这几种方式放到浏览器是可以直接运行的，也可以通过一些简单的方式对代码进行还原处理，看起来很复杂，但是非常容易破解。</p><h2 id="处理代码混淆" tabindex="-1">处理代码混淆 <a class="header-anchor" href="#处理代码混淆" aria-label="Permalink to &quot;处理代码混淆&quot;">​</a></h2><h3 id="加密分析流程总结" tabindex="-1">加密分析流程总结 <a class="header-anchor" href="#加密分析流程总结" aria-label="Permalink to &quot;加密分析流程总结&quot;">​</a></h3><ul><li>查看关键包 - 分析哪些参数是加密的</li><li>寻找加密位置 <ul><li>搜索参数 <ul><li>参数名 = / 参数名 = / 参数名: / 参数名:</li><li>参数名</li></ul></li><li>查看网络面板的 Initiator（发起）</li><li>xhr 断点调试</li><li>hook 相关逻辑</li></ul></li><li>分析加密逻辑</li><li>补全加密逻辑</li></ul><h3 id="混淆代码处理" tabindex="-1">混淆代码处理 <a class="header-anchor" href="#混淆代码处理" aria-label="Permalink to &quot;混淆代码处理&quot;">​</a></h3><h4 id="样例-1" tabindex="-1">样例 1 <a class="header-anchor" href="#样例-1" aria-label="Permalink to &quot;样例 1&quot;">​</a></h4><p>将 JavaScript 代码转换成颜文字网络表情的编码以达到混淆的目的。</p><p>原理：这类混淆通常都是使用构造函数将字符串作为代码运行。</p><p>例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;return a + b&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;return a + b&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span></code></pre></div><p>解决方法：</p><ul><li>直接将混淆后的代码粘贴至控制台通过 VM 查看源代码</li><li></li></ul><blockquote><p>复制混淆后的代码新开页面，在控制台面板直接运行，通过直接执行或删减相关字段，使用报错信息查看虚拟空间或控制台中已解密代码。 或者手动将混淆后代码包裹，<code>().toString</code> 进行打印，原则就是利用 chrome 控制台自身功能实现代码解密。</p></blockquote><h4 id="样例-2" tabindex="-1">样例 2 <a class="header-anchor" href="#样例-2" aria-label="Permalink to &quot;样例 2&quot;">​</a></h4><p>Function 构造函数创建一个新的 Function 对象，我们直接调用构造函数就可以动态创建函数。</p><p>就像下面这段代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;return a + b&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">sum</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;return a + b&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">sum</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">))</span></span></code></pre></div><p>传递给 Function 的所有参数按照传递顺序被视作函数的xingc你，最后一个函数传入函数体，调用执行的时候就会创建一个计算两数之和的函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;constructor&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">$$ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;console.log(1)&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">$_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">[] </span><span style="color:#6A737D;">// 0 按位取反即 -1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$_[$][$]($$)()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// =&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">;(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)[</span><span style="color:#9ECBFF;">&#39;constructor&#39;</span><span style="color:#E1E4E8;">][</span><span style="color:#9ECBFF;">&#39;constructor&#39;</span><span style="color:#E1E4E8;">](</span><span style="color:#9ECBFF;">&#39;console.log(1)&#39;</span><span style="color:#E1E4E8;">)()</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt;</span></span>
<span class="line"><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;console.log(1)&#39;</span><span style="color:#E1E4E8;">)()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;constructor&#39;</span></span>
<span class="line"><span style="color:#24292E;">$$ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;console.log(1)&#39;</span></span>
<span class="line"><span style="color:#24292E;">$_ </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">[] </span><span style="color:#6A737D;">// 0 按位取反即 -1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$_[$][$]($$)()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// =&gt;</span></span>
<span class="line"><span style="color:#24292E;">;(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)[</span><span style="color:#032F62;">&#39;constructor&#39;</span><span style="color:#24292E;">][</span><span style="color:#032F62;">&#39;constructor&#39;</span><span style="color:#24292E;">](</span><span style="color:#032F62;">&#39;console.log(1)&#39;</span><span style="color:#24292E;">)()</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;console.log(1)&#39;</span><span style="color:#24292E;">)()</span></span></code></pre></div><p>上述代码混淆的原理都是通过 <code>(0)[&#39;constructor&#39;][&#39;constructor&#39;](code)()</code> 来执行代码，这串代码等价于 <code>Function(code)()</code> 。</p><p>解决方法：</p><ul><li>直接将混淆后的代码粘贴至控制台通过 VM 查看源代码</li><li>删除代码结尾的 &quot;(&#39;_&#39;)&quot; 替换为 &quot;toString()&quot; 或将修改后的代码粘贴至控制台运行</li></ul><h4 id="样例-3" tabindex="-1">样例 3 <a class="header-anchor" href="#样例-3" aria-label="Permalink to &quot;样例 3&quot;">​</a></h4><p>将 JavaScript 代码转换成只有 6 种字符 <code>([, ], (, ), !, +)</code> 的编码，以达到混淆的目的。</p><p>例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">[]] </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">+!+</span><span style="color:#E1E4E8;">[]] </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">!+</span><span style="color:#E1E4E8;">[]</span><span style="color:#F97583;">+!+</span><span style="color:#E1E4E8;">[]] </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// a</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;return{}&#39;</span><span style="color:#E1E4E8;">)()</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// b</span></span>
<span class="line"><span style="color:#E1E4E8;">([][</span><span style="color:#9ECBFF;">&#39;filter&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// c</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">[]] </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">+!+</span><span style="color:#24292E;">[]] </span><span style="color:#6A737D;">// 1</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">!+</span><span style="color:#24292E;">[]</span><span style="color:#D73A49;">+!+</span><span style="color:#24292E;">[]] </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#005CC5;">false</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// a</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;return{}&#39;</span><span style="color:#24292E;">)()</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// b</span></span>
<span class="line"><span style="color:#24292E;">([][</span><span style="color:#032F62;">&#39;filter&#39;</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// c</span></span></code></pre></div><p>解决方法：</p><ul><li>直接将混淆后的代码粘贴至控制台通过 VM 查看源代码</li><li>删除代码结尾的 &quot;(&#39;_&#39;)&quot; 替换为 &quot;toString()&quot; 或将修改后的代码粘贴至控制台运行</li><li>将代码结尾最后一堆的 &quot;()&quot; 包含的代码抽离出来单独运行</li></ul><h4 id="样例-4" tabindex="-1">样例 4 <a class="header-anchor" href="#样例-4" aria-label="Permalink to &quot;样例 4&quot;">​</a></h4><p>通过将原始的 js 代码经过一系列的标识符混淆、死代码注入、防调试注入等操作达到代码保护的目的。</p><p>这类代码通过调试还原也可以达到破解的目的，但是会耗费大量的精力，通常我们面对这类混淆的解决方法如下：</p><ul><li>熟悉这类混淆通用的混淆代码</li><li>找到代码入口</li><li>将代码主体扣取出来</li><li>去除无用的代码与环境监测代码（埋雷），补全缺失代码</li><li>运行处理后的代码</li></ul><p>参考样例：<a href="https://mp.weixin.qq.com/s/6GURR9mZzlt9rbiLCje7UA" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/6GURR9mZzlt9rbiLCje7UA</a></p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>加密参数分析流程</p><ul><li>分析请求，找到加密参数</li><li>定位参数位置 <ul><li>搜索参数名</li><li>XHR 断点</li><li>hook</li></ul></li><li>分析加密</li><li>补全加密代码</li></ul><h2 id="信息编码" tabindex="-1">信息编码 <a class="header-anchor" href="#信息编码" aria-label="Permalink to &quot;信息编码&quot;">​</a></h2><h3 id="ascii-码" tabindex="-1">Ascii 码 <a class="header-anchor" href="#ascii-码" aria-label="Permalink to &quot;Ascii 码&quot;">​</a></h3><h4 id="概述-5" tabindex="-1">概述 <a class="header-anchor" href="#概述-5" aria-label="Permalink to &quot;概述&quot;">​</a></h4><p>ASCII（（American Standard Code for Information Interchange）：美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，它是最通用的信息交换标准，并等同于国际标准 ISO/IEC 646，ASCII 第一次以规范标准的类型发表是在 1967 年，最后一次更新则是在 1986 年，到目前为止共定义了 128 个字符。</p><h4 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h4><p>在计算机 中，所有的数据在存储和运算时都要使用二进制表示（因为计算机用高电平和低电平分别表示 1 和 0），例如，像 a、b、c、d 这样的 52 的字母（包括大些）以及 0、1 等数字还有一些常用的符号（例如 *、#、@ 等）在计算机存储时也要使用二进制数来表示，而具体使用哪些二进制数字表示哪个符号，当然每个人都可以约定自己的一套（即编码），而大家如果想互相通信而不造成混乱，那么大家就必须使用相同的编码规则，于是美国有关的标准化组织就出台了 ASCII 编码，同意规定了上述常用符号用哪些二进制数来表示。</p><img src="`+Y+`"><h4 id="代码演示" tabindex="-1">代码演示 <a class="header-anchor" href="#代码演示" aria-label="Permalink to &quot;代码演示&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">s</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcd&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">code</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> s.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> String.</span><span style="color:#B392F0;">fromCharCode</span><span style="color:#E1E4E8;">(code)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(code, str)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 97 a</span></span>
<span class="line"><span style="color:#6A737D;">// 98 b</span></span>
<span class="line"><span style="color:#6A737D;">// 99 c</span></span>
<span class="line"><span style="color:#6A737D;">// 100 d</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">s</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcd&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">code</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> s.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> String.</span><span style="color:#6F42C1;">fromCharCode</span><span style="color:#24292E;">(code)</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(code, str)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 97 a</span></span>
<span class="line"><span style="color:#6A737D;">// 98 b</span></span>
<span class="line"><span style="color:#6A737D;">// 99 c</span></span>
<span class="line"><span style="color:#6A737D;">// 100 d</span></span></code></pre></div><h3 id="base64" tabindex="-1">Base64 <a class="header-anchor" href="#base64" aria-label="Permalink to &quot;Base64&quot;">​</a></h3><p>常见应用场景：将字符嵌入到网页图片中表达正常图片内容。</p><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法，由于 <code>2 ^ 6 = 64</code>，所以每 6 个比特为一个单元，对应某个可打印字符。3 个字节（8 位）有 24 个比特，对应 4 个 Base64 单元，即 3 个字节可由 4 个可打印字符来表示，它可用来作为电子邮件的传输编码。</p><p>在 Base64 中的可打印字符包括字母 <code>A-Z</code>、<code>a-z</code>、数字 <code>0-9</code>，这样共有 62 的字符，此外两个可打印符号在不同的系统中而不同。</p><p><strong>应用场景</strong></p><p>Base64 常用于处理文本数据的场合，表示、传输、存储一些二进制数据，包含 MIME 的电子邮件及 XML 的一些复杂数据。</p><p><strong>为什么要使用 Base64，直接使用 ASCII 不也可以？</strong></p><p>有些场景，一些特殊字符，例如 @ 符号，%、$ 在传统的一些电子邮件里面传输，是没有办法正常显示的，所以我们要制定一种简单的规则。</p><h4 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h4><p>以输入字符 6666 为例：</p><img src="`+Z+`"><p>Base64 编码的核心原理是将二进制数据进行分组，每 24 Bit（3 字节）为一大组，再把一个大组的数据分成 4 个 6 Bit 的小分组。由于 6 Bit 数据只能表示 64 个不同的字符（2 ^ 6 = 64），所以这也是 Base64 的名字由来。</p><h4 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>Base64 是一种特定内容编码方式，用指定的 64 个字符来对应任何的一种数据进行编码。</p><p>原理就是将二进制的数据转成文本数据，对于非二进制方式都先转成二进制，连续使用 6 比特计算二进制的值，对应索引的码表。</p><p>常见应用场景：Web 网页端直接嵌入 base64 格式的图片。</p><p>某些厂家会制定特定的字符表，来达到混淆的目的。例如某东、某宝会制定自己一种特定的码表，虽然我们可以拿到一种 “明文” 的形式，特定的一种 base64 字符串，但是如果我们没有码表，如果按照正常的一种码表去解码，得到的结果肯定是非正常的结果。只有拿到正常特定码表下的 base64 字符串才能得到想要的结果。</p><h3 id="md5" tabindex="-1">md5 <a class="header-anchor" href="#md5" aria-label="Permalink to &quot;md5&quot;">​</a></h3><h4 id="概念-1" tabindex="-1">概念 <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>MD5 即信息摘要算法（MD5 Message-Digest Algorithm），一种被广泛使用的密码杂凑函数，它可以产出一个 128 位元（16 位元组）的散列值（hash value），用于确保信息传输完整性。</p><p>主要功能就是输入任意长度的信息，经过处理，就可以输出为128 位的信息（数字指纹），不同的输入可以得到不同的输出结果。</p><h4 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-label="Permalink to &quot;作用&quot;">​</a></h4><ul><li>防止篡改 <ul><li>下载文件时需要校验文件的 md5 是否和公共的一致</li></ul></li><li>防止看到明文 <ul><li>csdn 密码使用明文存储事件，引以为戒</li><li>避免撞库，很多人喜欢在不同的系统中使用相同的密码</li></ul></li></ul><h4 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h4><p>我们经常会听到一种说法，MD5 被 “破解” 了。但其实这种说法是不正确的，我们并不能通过一个 MD5 散列值，马上计算出原文。从密文推算出明文理论上是不可能的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">MD5(M)=Hash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">MD5(M)=Hash</span></span></code></pre></div><p>其中 M 指的是密码的明文，Hash 表示密码散列后的密文。实际上，所以的被 “破解” 其实是指下面这种情况：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">MD5(M1)=MD5(M2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">MD5(M1)=MD5(M2)</span></span></code></pre></div><p>即给定消息 M1，能够计算获取 M2，使得 M2 产生的散列值与 M1 产生的散列值相同。如果，MD5 的抗碰撞性就已经不满足了，使用 MD5 不再是安全的散列算法。</p><p>MD5 从本质上来说，就是不可逆的。我们可以通过某种特定的算法产生哈希碰撞，即 A 经过算法可以得到 B ， C 也可以通过算法得到 B。</p><h4 id="在线解-md5" tabindex="-1">在线解 MD5 <a class="header-anchor" href="#在线解-md5" aria-label="Permalink to &quot;在线解 MD5&quot;">​</a></h4><p>它其实本质上是一个超级大的数据库，收录了很多常见的，例如 admin md5 值是什么，可以通过密文直接去数据库查原文，并不是通过某种算法去计算出结果。</p><h3 id="aes" tabindex="-1">AES <a class="header-anchor" href="#aes" aria-label="Permalink to &quot;AES&quot;">​</a></h3><h4 id="概念-2" tabindex="-1">概念 <a class="header-anchor" href="#概念-2" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称为 Rijndael 加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经得多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）与 2001 年 11 月 26 日发布与 FIPS PUB 197，并在 2002 年 5 月 26 日成为有效的标准。2006 年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p><p>该算法为比利时密码学家 Joan DAemen 和 Vbincent Rijmen 所设计，结合两位作者的名字，以 Rijndael 为名投稿高级加密标准的甄选流程。（Rijndael 的发音近似于 “Dhine doll”）。</p><h4 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h4><p>AES 属于对称加密，使用过程如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">secret </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(key, message)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">secret </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(key, message)</span></span></code></pre></div><p>输入要加密的信息和密文，输出加密后的明文，解密方也可以这样使用。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(key, secret)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(key, secret)</span></span></code></pre></div><p>输入加密后的明文和 key，可以解读出原始信息。</p><h4 id="常见加密算法" tabindex="-1">常见加密算法 <a class="header-anchor" href="#常见加密算法" aria-label="Permalink to &quot;常见加密算法&quot;">​</a></h4><p>在软件开发中，常用的对称加密算法有：</p><table><thead><tr><th>算法</th><th>密钥长度</th><th>工作模式</th><th>填充模式</th></tr></thead><tbody><tr><td>DES</td><td>56/64</td><td>ECB/CBC/PCBC/CTR/...</td><td>NoPadding/PKCS5Padding/...</td></tr><tr><td>AES</td><td>128/192/256</td><td>ECB/CBC/PCBC/CTR/...</td><td>NoPadding/PKCS5Padding/PKCS7PAdding/...</td></tr></tbody></table><p>密钥长度直接决定加密强度，工作模式和填充模式可以看成是对趁机密算法的参数和格式选择。</p><blockquote><p>很多小伙伴在设置密码时，长度是非常短的或者有简短意义的，这样很容易被社工库或彩虹表的方式计算出来。理论上密码的长度越长，计算的模式和计算的复杂度就越高，所以推荐大家讲自己设置密码的长度不要默认只有八位。</p></blockquote><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Ascii 码是一种特定的编码方式，流行于欧洲国家，表达 128 常见的字符与操作符号，含义有限。</p><p>Base64 是一种编码方式，可以用特定的 64 的字符来表达所有的二进制数据（关注算法的实现）。</p><p>Md5 是一种广泛使用的算法，输入任意长度的信息，输出 128 位的信息（非加密手段），可以对一致性和完整性进行校验。</p><p>AES 是一种对称加密算法。</p><h2 id="服务器返回的字符串" tabindex="-1">服务器返回的字符串 <a class="header-anchor" href="#服务器返回的字符串" aria-label="Permalink to &quot;服务器返回的字符串&quot;">​</a></h2><h3 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h3><p>客户端（浏览器）执行 JS 代码，并解析出相应的加密参数。然后带着加密参数再次请求，得到正常的数据。</p><p>我们可以通过模拟这个参数的加密过程，得到加密结果，然后带着这个参数再次访问，就可以得到正常结果。</p><h3 id="加密字符串" tabindex="-1">加密字符串 <a class="header-anchor" href="#加密字符串" aria-label="Permalink to &quot;加密字符串&quot;">​</a></h3><p>前端进行解密，将数据展示在前端。</p><p>可以通过找到这个解密的函数，然后对加密的字符串进行解析，解析完成就是我们想要的数据。</p><h2 id="aes-加密" tabindex="-1">AES 加密 <a class="header-anchor" href="#aes-加密" aria-label="Permalink to &quot;AES 加密&quot;">​</a></h2><h3 id="加密方式" tabindex="-1">加密方式 <a class="header-anchor" href="#加密方式" aria-label="Permalink to &quot;加密方式&quot;">​</a></h3><h4 id="对称加密算法" tabindex="-1">对称加密算法 <a class="header-anchor" href="#对称加密算法" aria-label="Permalink to &quot;对称加密算法&quot;">​</a></h4><p>一方通过密钥将信息加密，把密文传给另一方，另一方再通过这个相同的密钥将密文解密，转换成可以理解的明文。</p><h4 id="非对称加密算法" tabindex="-1">非对称加密算法 <a class="header-anchor" href="#非对称加密算法" aria-label="Permalink to &quot;非对称加密算法&quot;">​</a></h4><ul><li>A 向 B 发送信息，A 和 B 都要产生一对用于加密和加密的公钥和私钥；</li><li>A 的私钥保密，A 的公钥告诉 B; B 的私钥保密，B 的公钥告诉 A；</li><li>A 给 B 发送消息时，A 用 B 的公钥加密信息，然后将消息发送给 B；</li><li>B 收到信息后，使用私钥解密 A 的消息，其他收到这个报文的人都无法解析，因为只有 B 才有私钥；</li><li>反之，B 向 A 发送消息也一样。</li></ul><h4 id="两者区别" tabindex="-1">两者区别 <a class="header-anchor" href="#两者区别" aria-label="Permalink to &quot;两者区别&quot;">​</a></h4><ul><li>对称加密算法加密和解密都使用同样的密钥，速度较快，但是由于需要将密钥在网络传输，所以安全性并不高；</li><li>非对称加密使用一对密钥，公钥与私钥，所以安全性高，但加密与解密速度较慢；</li><li>解决的办法是将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密进行通信。</li></ul><h3 id="aes-加密-1" tabindex="-1">AES 加密 <a class="header-anchor" href="#aes-加密-1" aria-label="Permalink to &quot;AES 加密&quot;">​</a></h3><p>AES 算法全称是 Advanced Ecryption Standard，是 DES 算法的替代者，也是现代最流行的对称加密算法之一。</p><p>要想搞明白 AES 算法，首先要搞清楚三个基本概念，密钥、填充、模式。</p><h4 id="密钥" tabindex="-1">密钥 <a class="header-anchor" href="#密钥" aria-label="Permalink to &quot;密钥&quot;">​</a></h4><p>对称加密之所以对称就是因为这类算法对明文的加密和解密使用的是同一个密钥。</p><p>AES 支持三种长度的密钥：128 位、192 位、256 位。</p><p>从安全性来看，256 安全性最高。从性能来看，128 性能最好。不同长度的密钥，在底层的加密过程中，处理的加密轮数是不同的。</p><h4 id="填充" tabindex="-1">填充 <a class="header-anchor" href="#填充" aria-label="Permalink to &quot;填充&quot;">​</a></h4><p>AES 分组加密的特性，AES 加密并不是一次性将明文加密成密文，而是把明文拆分成一个个独立的明文块，且每个明文块 128 bit。</p><p>假设有一段明文长度是 196 bit，如果按每 128 bit 一个明文块来拆分，第二个明文块只有 64 bit，不足 128 bit。这是就需要对明文块进行填充（Padding）。</p><p>常见填充方式：</p><ul><li>NoPadding：不做任何填充，但是必须要求明文长度必须是 128 位的整倍数；</li><li>PKCS7Padding：比较推荐的一种方式，当明文块少于 16 个字节 ，在明文块末尾补足相应数量的字符，并且每一个字节的数都等于缺少的字符数；</li><li>ZeroPadding：用零进行填充，这种方式并不推荐，当明文块最后一位也是 0 时，解密 经常会出现错误；</li><li>AnsiX923</li><li>Iso10126</li><li>Iso97971</li></ul><h4 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h4><p>AES 工作模式，体现在将明文块加密成密文块的处理过程中。</p><p>AES 加密算法提供了五种不同的工作模式，模式之间的主题思想是近似的，在处理细节上有一些差别。分别是 CBC、ECB、CTR、CFB、OFB。</p><p><strong>ECB 模式</strong></p><p>ECB 模式（Electronic Codebook Book）是最简单的工作模式，在该模式下，每一个明文块的加密都是完全独立，互不干涉的。</p><p>好处：简单、有利于并行计算。</p><p>缺点：相同明文块经过加密会变成相同的密文块，安全性较差。</p><p><strong>CBC模式</strong></p><p>CBD 模式（Cipher Block Chaining）引入了一个新的概念：初始向量IV（Initialization Vector）。</p><p>IV 的作用和 MD5 的 &quot;加盐&quot; 有些类似，目的都是防止同样的明文块始终加密成同样的密文块。</p><p>CBC 模式在每一个明文块加密前会让明文块和一个值先做异或操作。IV 作为初始化变量，参与第一个明文块的异或，后续的每一个明文块和它前一个明文块所加密出的密文块相异或。</p><p>这样相同的明文块加密出的密文块也是不一样的，安全性更高。坏处也很明显，无法并行计算，性能不如 ECB 好。引入初始化向量，增加复杂度。</p><h3 id="加密流程" tabindex="-1">加密流程 <a class="header-anchor" href="#加密流程" aria-label="Permalink to &quot;加密流程&quot;">​</a></h3><ul><li>把明文按照 128 bit 拆分成若干个明文块</li><li>按照选择的填充方式来填充最后一个明文块</li><li>每一个明文块利用 AES 加密器和密钥，加密成密文块。</li><li>拼接所有的密文块，形成最终的密文结果。</li></ul><h3 id="代码演示-1" tabindex="-1">代码演示 <a class="header-anchor" href="#代码演示-1" aria-label="Permalink to &quot;代码演示&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// CBC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CryptoJS</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;crypto-js&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AESTool</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">iv</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.enc.Utf8.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">  iv </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> CryptoJS.enc.Utf8.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(iv)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    iv,</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode: CryptoJS.mode.</span><span style="color:#79B8FF;">CBC</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    padding: CryptoJS.pad.Pkcs7</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> CryptoJS.</span><span style="color:#79B8FF;">AES</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(text, key, options).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> CryptoJS.</span><span style="color:#79B8FF;">AES</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(text, key, options).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(CryptoJS.enc.Utf8)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;6fa979f20126cb08aa645a8f495f6d85&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iv</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;I8zyA4lVhMCaJ5Kg&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">encrypt</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">decrypt</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AESTool</span><span style="color:#E1E4E8;">(key, iv)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">text</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;月落 heora&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">encoded</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">encrypt</span><span style="color:#E1E4E8;">(text)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">decrypted</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">decrypt</span><span style="color:#E1E4E8;">(encoded)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;encrypt: &#39;</span><span style="color:#E1E4E8;">, encoded)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;decrypt: &#39;</span><span style="color:#E1E4E8;">, decrypted)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// CBC</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CryptoJS</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;crypto-js&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AESTool</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">key</span><span style="color:#24292E;">, </span><span style="color:#E36209;">iv</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.enc.Utf8.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">  iv </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> CryptoJS.enc.Utf8.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(iv)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    iv,</span></span>
<span class="line"><span style="color:#24292E;">    mode: CryptoJS.mode.</span><span style="color:#005CC5;">CBC</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    padding: CryptoJS.pad.Pkcs7</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">: </span><span style="color:#E36209;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> CryptoJS.</span><span style="color:#005CC5;">AES</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(text, key, options).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">: </span><span style="color:#E36209;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> CryptoJS.</span><span style="color:#005CC5;">AES</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(text, key, options).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(CryptoJS.enc.Utf8)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;6fa979f20126cb08aa645a8f495f6d85&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iv</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;I8zyA4lVhMCaJ5Kg&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">encrypt</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">decrypt</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AESTool</span><span style="color:#24292E;">(key, iv)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">text</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;月落 heora&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">encoded</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">encrypt</span><span style="color:#24292E;">(text)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">decrypted</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">decrypt</span><span style="color:#24292E;">(encoded)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;encrypt: &#39;</span><span style="color:#24292E;">, encoded)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;decrypt: &#39;</span><span style="color:#24292E;">, decrypted)</span></span></code></pre></div><h2 id="css-反爬" tabindex="-1">CSS 反爬 <a class="header-anchor" href="#css-反爬" aria-label="Permalink to &quot;CSS 反爬&quot;">​</a></h2><h3 id="为什么用-css-反爬" tabindex="-1">为什么用 CSS 反爬 <a class="header-anchor" href="#为什么用-css-反爬" aria-label="Permalink to &quot;为什么用 CSS 反爬&quot;">​</a></h3><h4 id="成本低" tabindex="-1">成本低 <a class="header-anchor" href="#成本低" aria-label="Permalink to &quot;成本低&quot;">​</a></h4><ul><li>只需要前端混淆样式</li><li>不需要复杂的加密技术</li><li>不需要验证码、流量监测等额外配置</li></ul><p>因此对企业来说，仅仅用一些 CSS 技巧就可以反爬，可以不需要投入很多资源，可以节省很多资金以及时间资源。</p><h4 id="效果好" tabindex="-1">效果好 <a class="header-anchor" href="#效果好" aria-label="Permalink to &quot;效果好&quot;">​</a></h4><p>难以识别</p><ul><li>抓取内容与预期内容相近</li><li>反爬错误不容易发觉</li><li>可以混淆竞争对手</li></ul><p>没有成熟的破解套路</p><ul><li>破解 CSS 混淆的反爬措施需要想象力</li><li>没有统一的破解套路，需要人工干预</li></ul><p>因为 CSS 反爬效果比较好，所以企业可以花很少的成本来获取较大的反爬效益，这种措施很有吸引力。</p><h3 id="css-反爬类别" tabindex="-1">CSS 反爬类别 <a class="header-anchor" href="#css-反爬类别" aria-label="Permalink to &quot;CSS 反爬类别&quot;">​</a></h3><h4 id="利用字体" tabindex="-1">利用字体 <a class="header-anchor" href="#利用字体" aria-label="Permalink to &quot;利用字体&quot;">​</a></h4><p>实现原理</p><ul><li>主要利用 font-family 属性，例如设置为 my-font</li><li>在 HTML 里用不常见（不可读）的 unicode</li><li>在 CSS 的字体（my-font）中将其映射到常见（可读）的字体，例如数字</li><li>爬虫在抓取数据的时候只能抓到 unicode，而不是真实的数据</li></ul><p>应对措施</p><ul><li>下载 woff 字体文件，转化为 tff 文件</li><li>用百度编辑器打开 tff 文件，并确定其 unicode 与实际值的映射关系</li><li>将下载的 HTML 内容按照映射关系替换</li><li>解析 HTML 并获取正确的数据</li></ul><p>难点</p><ul><li>有些网站会动态生成 woff，这种反爬措施难以使用自动化方式绕开</li></ul><h4 id="利用背景" tabindex="-1">利用背景 <a class="header-anchor" href="#利用背景" aria-label="Permalink to &quot;利用背景&quot;">​</a></h4><p>实现原理</p><ul><li>数据（通常是文字）利用图片背景展示给用户，而不是直接用文本的形式展示</li><li>图片包括一张雪碧图（Sprite），数据利用背景偏移量来获取</li><li>爬虫在抓取的时候看不到实际值，只有图片背景</li></ul><p>应对措施</p><ul><li>下载雪碧图（Sprite），手动检查其对应的值</li><li>在调试工具调整 background-position 的偏移量，找到各偏移量与实际值的映射关系</li><li>在爬虫中获取元素偏移量的值，将其转换为实际值</li></ul><h4 id="利用伪类" tabindex="-1">利用伪类 <a class="header-anchor" href="#利用伪类" aria-label="Permalink to &quot;利用伪类&quot;">​</a></h4><p>实现原理</p><ul><li>不直接将内容展现在 HTML 的元素里</li><li>通过伪类的 content 属性将要展示的值展现出来</li></ul><p>难点</p><ul><li>获取指定元素的伪类属性</li></ul><p>应对措施</p><ul><li>使用 Puppeteer 或者 Selenium 自动化测试调试工具</li><li>在页面中执行右侧的 JS 代码，即可获取 content</li><li>注意：before 是伪类，也可能是 after</li></ul><h4 id="利用元素定位" tabindex="-1">利用元素定位 <a class="header-anchor" href="#利用元素定位" aria-label="Permalink to &quot;利用元素定位&quot;">​</a></h4><p>实现原理</p><ul><li>利用绝对定位（position: absolute）将某一个数字或字符将原数字或字符通过一定的偏移量替换</li><li>替换的数字或字符通常来说是随机的</li><li>如果直接抓取，将抓取到错误的信息</li></ul><p>应对措施</p><ul><li>计算出替换的元素偏移量，与被替换元素对比，还原实际值</li></ul><h4 id="利用字符切割" tabindex="-1">利用字符切割 <a class="header-anchor" href="#利用字符切割" aria-label="Permalink to &quot;利用字符切割&quot;">​</a></h4><p>实现原理</p><ul><li>将字符串用标签分割开来</li><li>由于是內联块级（inline-block），可以一行展示</li><li>通常还混合不显示（display：none）的标签</li></ul><p>应对措施</p><ul><li>将内联块级标签的 innerText 拼接起来</li><li>过滤掉所有 display: none 的属性</li></ul><h3 id="通用应对策略" tabindex="-1">通用应对策略 <a class="header-anchor" href="#通用应对策略" aria-label="Permalink to &quot;通用应对策略&quot;">​</a></h3><p>通过调试工具人工查看 CSS 样式；</p><p>判断 CSS 反爬类型（字体/背景/伪类）；</p><p>根据不同的类型采用不同的应对措施；</p><p>对于新型的 CSS 反爬，研究其原理，采用合适的反爬策略。</p>`,440),ns=[ss];function as(ls,ps,os,es,cs,ts){return n(),a("div",null,ns)}const ys=s(Q,[["render",as]]);export{is as __pageData,ys as default};

import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.88002d8f.js";const p="/notes/assets/IEEE-754.f7bbdf21.png",o="/notes/assets/0.1.c4ec3d05.png",g=JSON.parse('{"title":"0.1 + 0.2 != 0.3","description":"","frontmatter":{},"headers":[],"relativePath":"ecma_script/loss_of_precision/index.md","filePath":"ecma_script/loss_of_precision/index.md"}'),e={name:"ecma_script/loss_of_precision/index.md"},c=l('<h1 id="_0-1-0-2-0-3" tabindex="-1">0.1 + 0.2 != 0.3 <a class="header-anchor" href="#_0-1-0-2-0-3" aria-label="Permalink to &quot;0.1 + 0.2 != 0.3&quot;">​</a></h1><p>在 JavaScript 中，<code>0.1 + 0.2</code> 不等于 <code>0.3</code> 。</p><p>实际上，大多数语言中都存在此问题（基于 IEEE-754 标准），例如 Java 和 Python。</p><h2 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h2><p>分析为什么产生该问题之前，我们有必要了解一些前置知识。</p><h3 id="科学计数法" tabindex="-1">科学计数法 <a class="header-anchor" href="#科学计数法" aria-label="Permalink to &quot;科学计数法&quot;">​</a></h3><p>当我们要标记或运算某个较大或较小且位数较多时，用科学计数法可以避免浪费很多的空间和时间。</p><ul><li><code>1000000000</code> 使用科学计数法可以表示为：<code>1 * 10^3</code>；</li><li><code>0.001</code> 使用科学计数法表示为：<code>1 * 10^-3</code>；</li><li><code>0.1</code> 使用科学计数法表示为：<code>1 * 10^-1</code>。</li></ul><h3 id="ieee-754" tabindex="-1">IEEE-754 <a class="header-anchor" href="#ieee-754" aria-label="Permalink to &quot;IEEE-754&quot;">​</a></h3><p><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE-754 </a> 规定单精度浮点数使用 4 字节进行存储，双精度浮点数使用 8 字节进行存储，表示为三部分：符号位、阶、尾数。</p><p>在 JavaScript 中，浮点数是基于 <a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE-754</a> 中的 <strong>双精度（64位）</strong> 标准进行存储的。也就是说，浮点数存储在内存空间中是一个 64 位的二进制小数形式。</p><img src="'+p+`"><ul><li>sign bit：符号位（1 bit）。表示正负号，0 表示正数、1 表示负数。</li><li>exponent：指数位（11 bits）。用来存储指数表示次方数。</li><li>mantissa：尾数位（52 bits）。存储尾数表示精确度，1 &lt;= M &lt; 2。</li></ul><p>符号位没有什么可说的，就是用来表示正负数。</p><p>指数位表示次方数，这里的次方数是以当前的进制数为底。比如次方数为 5。</p><ul><li>如果当前是十进制，就是 10 的 5 次方；</li><li>如果当前是二进制，就是 2 的 5 次方。</li></ul><p>尾数位存储尾数表示精确度，用来表示一个大于等于 1 小于 2 的数值。</p><blockquote><p>IEEE-754 规定，在计算机内部保存尾数时，默认这个数的第一位总是 1，因此可以被舍去，只保存后面部分，这样可以节省 1 位有效数字，对于双精度 64 位浮点数，M 为 52 位，将第一位的 1 舍去，可以保存的有效数字为 52 + 1 = 53 位。</p></blockquote><p>如果我们以 S 表示正负号，H 表示进制数，E 表示次方数，M 表示尾数，则浮点数 value 就可以表示为：<strong>value = S * M * H^E</strong> 。</p><p>同理可以得出二进制公式为：<strong>value = S * M * 2^E</strong> 。</p><h3 id="指数位偏移量" tabindex="-1">指数位偏移量 <a class="header-anchor" href="#指数位偏移量" aria-label="Permalink to &quot;指数位偏移量&quot;">​</a></h3><blockquote><p>指数偏移量，是指浮点数表示法中的指数位的编码值为指数的实际上加上某个固定的值。 IEEE-754 国际标准固定该固定值为 2 的 (e - 1) 次方减一。这里的 e 为存储指数的位元的长度，即有几个 bit。</p></blockquote><p>由于指数位可能是负数，也有可能是正数，即指数是有符号整数，而有符号整数的计算是比无符号整数麻烦的。所以为了避免不必要的麻烦，在实际存储指数的时候，需要把指数转换成无符号整数。</p><p>float 的指数部分是 8 位，则指数的取值范围就是 <code>-126 ~ +127</code>，为了消除负数带来的实际计算上的影响（比如比较大小，加减法等），可以在实际存储的时候，给指数做一个简单的映射，加上一个偏移量，比如 float 的偏移量为 127，这样就不会存在负数了。</p><blockquote><p>2 ^ 7 - 1 = 127</p></blockquote><p>如果指数为 6，则实际存储的是 6 + 127 = 133，即把 133 转换成二进制之后再存储。 如果指数为 -3，则实际存储的是 -3 + 127 = 124，即把 124 转换为二进制之后再存储。</p><p>当我们需要计算实际代表的十进制数的时候，再把指数减去偏移量即可。</p><p>double 类型的取值范围是<code>-1022 ~ +10</code>，偏移量为 1023。</p><blockquote><p>2 ^ 10 - 1 = 1023</p></blockquote><h3 id="_0-1-存储过程" tabindex="-1">0.1 存储过程 <a class="header-anchor" href="#_0-1-存储过程" aria-label="Permalink to &quot;0.1 存储过程&quot;">​</a></h3><p>在计算机中，有效数转换成二进制是通过乘以 2（<code>*2</code>）的方式，如果结果大于 1，则取乘积的小数部分继续乘以 2，结果为 0 终止计算，最终结果是取每一次乘积中的整数位。</p><blockquote><p>整数部分转二进制采用 <code>/2</code> 取余法，小数部分二进制采用 <code>*2</code> 取整法。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">0.1 转换成二进制过程</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">0.1 * 2 = 0.2 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#e1e4e8;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#e1e4e8;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">0.1 转换成二进制过程</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">0.1 * 2 = 0.2 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#24292e;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#24292e;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#24292e;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#24292e;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#24292e;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#24292e;">0.2 * 2 = 0.4 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.4 * 2 = 0.8 取整 0</span></span>
<span class="line"><span style="color:#24292e;">0.8 * 2 = 1.6 取整 1</span></span>
<span class="line"><span style="color:#24292e;">0.6 * 2 = 1.2 取整 1</span></span>
<span class="line"><span style="color:#24292e;">...</span></span></code></pre></div><p>可以看到，后面是一段重复的运算过程，最后的结果是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">0.0001100110011001100110011001100110011001100110011001100110011...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">0.0001100110011001100110011001100110011001100110011001100110011...</span></span></code></pre></div><p>使用二进制浮点数的科学计数法表示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">0.0001100110011001100110011001100110011001100110011001100110011...</span></span>
<span class="line"><span style="color:#e1e4e8;">0.0001100110011001100110011001100110011001100110011001100110011... * 2^0</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">=&gt; 转换为整数</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">1.100110011001100110011001100110011001100110011001100110011... * 2^-4</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">=&gt; 简写</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">1.100110011001100110011... * 2^{-4}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">0.0001100110011001100110011001100110011001100110011001100110011...</span></span>
<span class="line"><span style="color:#24292e;">0.0001100110011001100110011001100110011001100110011001100110011... * 2^0</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">=&gt; 转换为整数</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">1.100110011001100110011001100110011001100110011001100110011... * 2^-4</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">=&gt; 简写</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">1.100110011001100110011... * 2^{-4}</span></span></code></pre></div><p>下面我们来看如何使用 IEEE-754 标准存储值。先回顾一下二进制公式：<strong>value = S * M * 2^E</strong> 。</p><p><strong>符号位</strong></p><p>由于 0.1 为整数，所以符号位 <code>S = 0</code>。</p><p><strong>指数位</strong></p><p>E = -4，实际存储为 <code>-4 + 1023 = 1019</code>，二进制为 <code>1111111011</code>，因为 E 为 11 位，最终为 <code>01111111011</code>。</p><p><strong>尾数位</strong></p><p>在 IEEE-754 中，双精度 64 位下最多存储的有效整数为 52 位，会采用 <strong>就近舍入（round to nearest） 模式（进一舍零）</strong> 进行存储。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">1|1001100110011001100110011001100110011001100110011001 // M 舍去首位的 1，得到如下</span></span>
<span class="line"><span style="color:#e1e4e8;">1001100110011001100110011001100110011001100110011001 // 0 舍 1 入，得到如下</span></span>
<span class="line"><span style="color:#e1e4e8;">1001100110011001100110011001100110011001100110011010 // 最终存储</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">1|1001100110011001100110011001100110011001100110011001 // M 舍去首位的 1，得到如下</span></span>
<span class="line"><span style="color:#24292e;">1001100110011001100110011001100110011001100110011001 // 0 舍 1 入，得到如下</span></span>
<span class="line"><span style="color:#24292e;">1001100110011001100110011001100110011001100110011010 // 最终存储</span></span></code></pre></div><p>最终存储结果就是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">S  E            M</span></span>
<span class="line"><span style="color:#e1e4e8;">0  01111111011  1001100110011001100110011001100110011001100110011010</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">S  E            M</span></span>
<span class="line"><span style="color:#24292e;">0  01111111011  1001100110011001100110011001100110011001100110011010</span></span></code></pre></div><img src="`+o+`"><blockquote><p>0.1 IEEE-754 可视化数值可以参考这个网站： <a href="http://bartaz.github.io/ieee754-visualization/" target="_blank" rel="noreferrer">http://bartaz.github.io/ieee754-visualization/</a></p></blockquote><h3 id="浮点数运算步骤" tabindex="-1">浮点数运算步骤 <a class="header-anchor" href="#浮点数运算步骤" aria-label="Permalink to &quot;浮点数运算步骤&quot;">​</a></h3><ul><li>对阶：使得两个数的小数位对齐；</li><li>求和：将两个数对阶之后按照定点得加减运算规则计算；</li><li>规格化：为了增加有效数得位数，必须将求和（差）之后的尾数进行规格化。</li></ul><h2 id="_0-1-0-2-的计算过程" tabindex="-1">0.1 + 0.2 的计算过程 <a class="header-anchor" href="#_0-1-0-2-的计算过程" aria-label="Permalink to &quot;0.1 + 0.2 的计算过程&quot;">​</a></h2><p>上面我们已经讲解过浮点数 0.1 的 IEEE-754 标准的存储过程，0.2 也同理，可以自己推理下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">S  E            M</span></span>
<span class="line"><span style="color:#e1e4e8;">0  01111111011  1001100110011001100110011001100110011001100110011010 // 0.1</span></span>
<span class="line"><span style="color:#e1e4e8;">0  01111111100  1001100110011001100110011001100110011001100110011010 // 0.2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">S  E            M</span></span>
<span class="line"><span style="color:#24292e;">0  01111111011  1001100110011001100110011001100110011001100110011010 // 0.1</span></span>
<span class="line"><span style="color:#24292e;">0  01111111100  1001100110011001100110011001100110011001100110011010 // 0.2</span></span></code></pre></div><h3 id="对阶" tabindex="-1">对阶 <a class="header-anchor" href="#对阶" aria-label="Permalink to &quot;对阶&quot;">​</a></h3><p>浮点数加减首先要判断两数的指数为是否相同（小数点位置是否对齐），如两数指数位不同，需要对阶保证指数位相同。 对阶时遵循 <strong>小阶向大阶看齐原则</strong> ，尾数向右移位，每移动一位，指数位加 1 直到指数位相同，即完成对阶。</p><p>本示例中，0.1 的阶码为 -4 小于 0.2 的阶码 -3，所以需要对 0.1 做移码操作。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// 0.1 移动之前</span></span>
<span class="line"><span style="color:#e1e4e8;">0  01111111011  1001100110011001100110011001100110011001100110011010 </span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 0.1 右移 1 位之后尾数最高位空出一位（0 舍 1 入，此处舍去末尾 0）</span></span>
<span class="line"><span style="color:#e1e4e8;">0  01111111100  100110011001100110011001100110011001100110011001101(0) </span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// 0.1 右移 1 位完成</span></span>
<span class="line"><span style="color:#e1e4e8;">0  01111111100  1100110011001100110011001100110011001100110011001101</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 0.1 移动之前</span></span>
<span class="line"><span style="color:#24292e;">0  01111111011  1001100110011001100110011001100110011001100110011010 </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 0.1 右移 1 位之后尾数最高位空出一位（0 舍 1 入，此处舍去末尾 0）</span></span>
<span class="line"><span style="color:#24292e;">0  01111111100  100110011001100110011001100110011001100110011001101(0) </span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// 0.1 右移 1 位完成</span></span>
<span class="line"><span style="color:#24292e;">0  01111111100  1100110011001100110011001100110011001100110011001101</span></span></code></pre></div><p>尾数右移 1 位之后最高位空出，如何填补呢？这里涉及两个概念：</p><ul><li>逻辑右移：最高位永远补 0。</li><li>算数右移：不改变最高位值，是 1 补 1，是 0 补 0，尾数部分存在隐藏掉的最高位为 1。</li></ul><blockquote><p>右移升阶时，会把隐藏位的 1 给取出。</p><p>1.1001100110011001100110011001100110011001100110011010 =&gt; 0.1100110011001100110011001100110011001100110011001101(0) =&gt; 0.1100110011001100110011001100110011001100110011001101</p></blockquote><h3 id="求和" tabindex="-1">求和 <a class="header-anchor" href="#求和" aria-label="Permalink to &quot;求和&quot;">​</a></h3><p>两个尾数直接求和：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  0.1100110011001100110011001100110011001100110011001101(0) // 0.1</span></span>
<span class="line"><span style="color:#e1e4e8;">+ 1.1001100110011001100110011001100110011001100110011010    // 0.2</span></span>
<span class="line"><span style="color:#e1e4e8;"> 10.0110011001100110011001100110011001100110011001100111</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  0.1100110011001100110011001100110011001100110011001101(0) // 0.1</span></span>
<span class="line"><span style="color:#24292e;">+ 1.1001100110011001100110011001100110011001100110011010    // 0.2</span></span>
<span class="line"><span style="color:#24292e;"> 10.0110011001100110011001100110011001100110011001100111</span></span></code></pre></div><h3 id="规格化、舍入" tabindex="-1">规格化、舍入 <a class="header-anchor" href="#规格化、舍入" aria-label="Permalink to &quot;规格化、舍入&quot;">​</a></h3><p>由于产生进位，阶码需要 +1，对应的十进制为 1021，此时阶码为 1021 - 1023（64 中间值）= -2，此时符号位、指数位如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  S  E</span></span>
<span class="line"><span style="color:#e1e4e8;">= 0  01111111101</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  S  E</span></span>
<span class="line"><span style="color:#24292e;">= 0  01111111101</span></span></code></pre></div><p>尾部进位 2 位，去除最高值默认的 1，因最低位为 1，需要进行舍入操作（二进制中以 0 为结尾），舍入的方法就是在最低有效位加 1，若为 0 则直接舍去，若为 1 则继续加 1。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">  10.0110011001100110011001100110011001100110011001100111  // + 1</span></span>
<span class="line"><span style="color:#e1e4e8;">= 10.0110011001100110011001100110011001100110011001101000  // 去除最高位默认的 1</span></span>
<span class="line"><span style="color:#e1e4e8;">=  1.00110011001100110011001100110011001100110011001101000 // 最后一位 0 舍去</span></span>
<span class="line"><span style="color:#e1e4e8;">=    0011001100110011001100110011001100110011001100110100  // 尾数最终结果</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">  10.0110011001100110011001100110011001100110011001100111  // + 1</span></span>
<span class="line"><span style="color:#24292e;">= 10.0110011001100110011001100110011001100110011001101000  // 去除最高位默认的 1</span></span>
<span class="line"><span style="color:#24292e;">=  1.00110011001100110011001100110011001100110011001101000 // 最后一位 0 舍去</span></span>
<span class="line"><span style="color:#24292e;">=    0011001100110011001100110011001100110011001100110100  // 尾数最终结果</span></span></code></pre></div><p>IEEE-754 中最终存储如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">0  01111111101  0011001100110011001100110011001100110011001100110100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">0  01111111101  0011001100110011001100110011001100110011001100110100</span></span></code></pre></div><p>最高位为 1，得到的二进制数如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">2^-2 * 1.0011001100110011001100110011001100110011001100110100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">2^-2 * 1.0011001100110011001100110011001100110011001100110100</span></span></code></pre></div><p>转换为十进制如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">0.30000000000000004</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">0.30000000000000004</span></span></code></pre></div><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="tofixed" tabindex="-1">toFixed <a class="header-anchor" href="#tofixed" aria-label="Permalink to &quot;toFixed&quot;">​</a></h3><p>不考虑精度时，可以使用 <code>toFixed</code> 进行进制转化。</p><p>使用 <code>toFixed</code> 会出现以下问题：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0.445</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.45</span></span>
<span class="line"><span style="color:#79B8FF;">0.446</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.45</span></span>
<span class="line"><span style="color:#79B8FF;">0.435</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.43 ?</span></span>
<span class="line"><span style="color:#79B8FF;">0.4356</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.44</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0.445</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.45</span></span>
<span class="line"><span style="color:#005CC5;">0.446</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.45</span></span>
<span class="line"><span style="color:#005CC5;">0.435</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.43 ?</span></span>
<span class="line"><span style="color:#005CC5;">0.4356</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.44</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">0.15</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.1 ?</span></span>
<span class="line"><span style="color:#79B8FF;">0.25</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.3</span></span>
<span class="line"><span style="color:#79B8FF;">0.35</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.3 ?</span></span>
<span class="line"><span style="color:#79B8FF;">0.45</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.5</span></span>
<span class="line"><span style="color:#79B8FF;">0.55</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.6</span></span>
<span class="line"><span style="color:#79B8FF;">0.65</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.7</span></span>
<span class="line"><span style="color:#79B8FF;">0.75</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">0.151</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.2</span></span>
<span class="line"><span style="color:#79B8FF;">0.251</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.3</span></span>
<span class="line"><span style="color:#79B8FF;">0.351</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.4</span></span>
<span class="line"><span style="color:#79B8FF;">0.451</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.5</span></span>
<span class="line"><span style="color:#79B8FF;">0.551</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.6</span></span>
<span class="line"><span style="color:#79B8FF;">0.651</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.7</span></span>
<span class="line"><span style="color:#79B8FF;">0.751</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toFixed</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">0.15</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.1 ?</span></span>
<span class="line"><span style="color:#005CC5;">0.25</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.3</span></span>
<span class="line"><span style="color:#005CC5;">0.35</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.3 ?</span></span>
<span class="line"><span style="color:#005CC5;">0.45</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.5</span></span>
<span class="line"><span style="color:#005CC5;">0.55</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.6</span></span>
<span class="line"><span style="color:#005CC5;">0.65</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.7</span></span>
<span class="line"><span style="color:#005CC5;">0.75</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">0.151</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.2</span></span>
<span class="line"><span style="color:#005CC5;">0.251</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.3</span></span>
<span class="line"><span style="color:#005CC5;">0.351</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.4</span></span>
<span class="line"><span style="color:#005CC5;">0.451</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.5</span></span>
<span class="line"><span style="color:#005CC5;">0.551</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.6</span></span>
<span class="line"><span style="color:#005CC5;">0.651</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.7</span></span>
<span class="line"><span style="color:#005CC5;">0.751</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toFixed</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.8</span></span></code></pre></div><p>为什么会造成这么多诡异的情况呢？</p><p>这是因为 <code>toFixed</code> 使用的是一种叫做 <strong>四舍六入五成双（四舍六入五凑偶）</strong> 的进位方法：对于位数很多的近似数，当有效位确定后，后面多余的数字应该舍去，只保留有效数最后一位。具体规则如下：</p><ul><li>四舍：指小于或等于 4 时，直接舍去；</li><li>六入：指大于或等于 6 时，舍去后进 1；</li><li>五凑偶：当 5 后面还有数字时，舍 5 进 1，当 5 后面没有数字或为 0 时 <ul><li>5 前面的数字小于等于 4 时，偶数则舍 5 进 1，奇数则直接舍去；</li><li>5 前面的数字大于 4 时，舍 5 进 1。</li></ul></li></ul><p>所以说，我们使用 <code>toFixed</code> 的方案来解决浮点数的运算问题，是不安全的。</p><h3 id="将数字转为整数" tabindex="-1">将数字转为整数 <a class="header-anchor" href="#将数字转为整数" aria-label="Permalink to &quot;将数字转为整数&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">num1</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">num2</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">num1Digits</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (num1.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">num2Digits</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (num2.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">baseNum</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">pow</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, Math.</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">(num1Digits, num2Digits));</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (num1 </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> baseNum </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> num2 </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> baseNum) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> baseNum;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num1</span><span style="color:#24292E;">, </span><span style="color:#E36209;">num2</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">num1Digits</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (num1.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">num2Digits</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (num2.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;.&#39;</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">).</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">baseNum</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">pow</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, Math.</span><span style="color:#6F42C1;">max</span><span style="color:#24292E;">(num1Digits, num2Digits));</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (num1 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> baseNum </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> num2 </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> baseNum) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> baseNum;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 0.3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 0.3</span></span></code></pre></div><h3 id="使用第三方库" tabindex="-1">使用第三方库 <a class="header-anchor" href="#使用第三方库" aria-label="Permalink to &quot;使用第三方库&quot;">​</a></h3><p>如果需要比较精确的浮点数运算，可以使用一些现有的库来完成计算。例如：<a href="https://www.npmjs.com/package/decimal" target="_blank" rel="noreferrer">decimal.js</a>，math.js 或 big.js。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Decimal </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;decimal.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Decimal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(b.</span><span style="color:#B392F0;">toNumber</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 0.3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Decimal</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16.1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c.</span><span style="color:#B392F0;">mul</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(d.</span><span style="color:#B392F0;">toNumber</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 16100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Decimal </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;decimal.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Decimal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(b.</span><span style="color:#6F42C1;">toNumber</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 0.3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Decimal</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16.1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">d</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> c.</span><span style="color:#6F42C1;">mul</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(d.</span><span style="color:#6F42C1;">toNumber</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 16100</span></span></code></pre></div><h3 id="字符串模拟运算" tabindex="-1">字符串模拟运算 <a class="header-anchor" href="#字符串模拟运算" aria-label="Permalink to &quot;字符串模拟运算&quot;">​</a></h3><p>可以考虑使用字符串模拟数字运算。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE-754 维基百科</a></p><p><a href="https://www.javascriptc.com/books/nodejs-roadmap/javascript/floating-point-number-0.1-0.2.html" target="_blank" rel="noreferrer">浮点数之谜</a></p><p><a href="https://www.yuque.com/yyne87/bpfdka/hxih5y#oGJyB" target="_blank" rel="noreferrer">0.1 + 0.2 == 0.3 ?</a></p><p><a href="https://zhidao.baidu.com/question/1644364071497328980.html" target="_blank" rel="noreferrer">float 和 double 偏移量</a></p>`,98),t=[c];function r(y,i,E,d,F,h){return a(),n("div",null,t)}const C=s(e,[["render",r]]);export{g as __pageData,C as default};

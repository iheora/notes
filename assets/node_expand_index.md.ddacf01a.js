import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.88002d8f.js";const u=JSON.parse('{"title":"趣学 Node.js","description":"","frontmatter":{},"headers":[],"relativePath":"node/expand/index.md","filePath":"node/expand/index.md"}'),p={name:"node/expand/index.md"},o=l(`<h1 id="趣学-node-js" tabindex="-1">趣学 Node.js <a class="header-anchor" href="#趣学-node-js" aria-label="Permalink to &quot;趣学 Node.js&quot;">​</a></h1><h2 id="事件循环与异步io" tabindex="-1">事件循环与异步IO <a class="header-anchor" href="#事件循环与异步io" aria-label="Permalink to &quot;事件循环与异步IO&quot;">​</a></h2><p>Node.js 基于 Ryan dahl 开发的 libuv 实现了自己的事件循环与异步I/O。</p><blockquote><p>Node.js 于 0.5.0 版本引入了 libuv。</p><p>在 libuv 的最初版本中实现中， linux 和 mac 中是基于 libev 和 liveio 的封装，多路复用是基于 epoll 和 kqueue。在 windows 中，使用的是 IOCP。</p><p>libuv 在 v0.9.4 版本中，移除了 libev 的依赖。</p></blockquote><p>Node.js 的单线程是对你而言。对底层则不是，其他线程并不对你开放。</p><p>nodejs v18.12.1 版本事件循环代码：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (env-&gt;</span><span style="color:#B392F0;">is_stopping</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">uv_run</span><span style="color:#E1E4E8;">(env-&gt;</span><span style="color:#B392F0;">event_loop</span><span style="color:#E1E4E8;">(), UV_RUN_DEFAULT);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (env-&gt;</span><span style="color:#B392F0;">is_stopping</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  platform-&gt;</span><span style="color:#B392F0;">DrainTasks</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv_loop_alive</span><span style="color:#E1E4E8;">(env-&gt;</span><span style="color:#B392F0;">event_loop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (more </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">env-&gt;</span><span style="color:#B392F0;">is_stopping</span><span style="color:#E1E4E8;">()) </span><span style="color:#F97583;">continue</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">EmitProcessBeforeExit</span><span style="color:#E1E4E8;">(env).</span><span style="color:#B392F0;">IsNothing</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    HandleScope </span><span style="color:#B392F0;">handle_scope</span><span style="color:#E1E4E8;">(isolate);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (env-&gt;</span><span style="color:#B392F0;">RunSnapshotSerializeCallback</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">IsEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Emit \`beforeExit\` if the loop became alive either after emitting</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// event, or after running some callbacks.</span></span>
<span class="line"><span style="color:#E1E4E8;">  more </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv_loop_alive</span><span style="color:#E1E4E8;">(env-&gt;</span><span style="color:#B392F0;">event_loop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (more </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">env</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">is_stopping</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (env-&gt;</span><span style="color:#6F42C1;">is_stopping</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">uv_run</span><span style="color:#24292E;">(env-&gt;</span><span style="color:#6F42C1;">event_loop</span><span style="color:#24292E;">(), UV_RUN_DEFAULT);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (env-&gt;</span><span style="color:#6F42C1;">is_stopping</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  platform-&gt;</span><span style="color:#6F42C1;">DrainTasks</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv_loop_alive</span><span style="color:#24292E;">(env-&gt;</span><span style="color:#6F42C1;">event_loop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (more </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">env-&gt;</span><span style="color:#6F42C1;">is_stopping</span><span style="color:#24292E;">()) </span><span style="color:#D73A49;">continue</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">EmitProcessBeforeExit</span><span style="color:#24292E;">(env).</span><span style="color:#6F42C1;">IsNothing</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    HandleScope </span><span style="color:#6F42C1;">handle_scope</span><span style="color:#24292E;">(isolate);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (env-&gt;</span><span style="color:#6F42C1;">RunSnapshotSerializeCallback</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">IsEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Emit \`beforeExit\` if the loop became alive either after emitting</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// event, or after running some callbacks.</span></span>
<span class="line"><span style="color:#24292E;">  more </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv_loop_alive</span><span style="color:#24292E;">(env-&gt;</span><span style="color:#6F42C1;">event_loop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (more </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">env</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">is_stopping</span><span style="color:#24292E;">());</span></span></code></pre></div><blockquote><p><a href="https://github.com/nodejs/node/blob/v18.12.1/src/api/embed_helpers.cc#L35" target="_blank" rel="noreferrer">源码地址</a></p></blockquote><p><code>is_stopping</code> 判断处于停止状态，就立刻结束事件循环。不过这个判断其实可以忽略，因为执行任务无处不在。</p><p>第一次 <code>uv_run</code> 之后，会执行 V8 platform 中的任务，跑完后通过 <code>uv_loop_alive()</code> 返回值判断是否还有没有新的事件。</p><ul><li>如果不为 0，直接 <code>continue</code> 进入下一次事件循环；</li><li>如果为 0，处理扫尾工作。如果存在 <code>process.on(&#39;beforeExit&#39;)</code> 事件，意味着执行过程中还有新的事件（例如 <code>setTimeout</code> 等）。</li></ul><p><code>uv_run</code> 是 libuv 中的代码，因为 libuv 是跨平台的，这里以 <a href="https://github.com/nodejs/node/blob/v18.12.1/deps/uv/src/unix/core.c#L369-L426" target="_blank" rel="noreferrer">UNIX 类系统代码</a>为例。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__loop_alive</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uv_loop_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">loop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__has_active_handles</span><span style="color:#E1E4E8;">(loop) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">uv__has_active_reqs</span><span style="color:#E1E4E8;">(loop) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">         loop-&gt;closing_handles </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv_loop_alive</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uv_loop_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">loop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__loop_alive</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__loop_alive</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uv_loop_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">loop</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__has_active_handles</span><span style="color:#24292E;">(loop) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">uv__has_active_reqs</span><span style="color:#24292E;">(loop) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">         loop-&gt;closing_handles </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv_loop_alive</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uv_loop_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">loop</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__loop_alive</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv_run</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uv_loop_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">loop</span><span style="color:#E1E4E8;">, uv_run_mode </span><span style="color:#FFAB70;">mode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ran_pending;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__loop_alive</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">r)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__update_time</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (r </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> loop-&gt;stop_flag </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__update_time</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__run_timers</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">    ran_pending </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__run_pending</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__run_idle</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__run_prepare</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ((mode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> UV_RUN_ONCE </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ran_pending) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> mode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> UV_RUN_DEFAULT)</span></span>
<span class="line"><span style="color:#E1E4E8;">      timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv_backend_timeout</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__io_poll</span><span style="color:#E1E4E8;">(loop, timeout);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Run one final update on the provider_idle_time in case uv__io_poll</span></span>
<span class="line"><span style="color:#6A737D;">     * returned because the timeout expired, but no events were received. This</span></span>
<span class="line"><span style="color:#6A737D;">     * call will be ignored if the provider_entry_time was either never set (if</span></span>
<span class="line"><span style="color:#6A737D;">     * the timeout == 0) or was already updated b/c an event was received.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__metrics_update_idle_time</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__run_check</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv__run_closing_handles</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> UV_RUN_ONCE) {</span></span>
<span class="line"><span style="color:#6A737D;">      /* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span>
<span class="line"><span style="color:#6A737D;">       * been invoked when it returns. uv__io_poll() can return without doing</span></span>
<span class="line"><span style="color:#6A737D;">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span>
<span class="line"><span style="color:#6A737D;">       * have pending timers that satisfy the forward progress constraint.</span></span>
<span class="line"><span style="color:#6A737D;">       *</span></span>
<span class="line"><span style="color:#6A737D;">       * UV_RUN_NOWAIT makes no guarantees about progress so it&#39;s omitted from</span></span>
<span class="line"><span style="color:#6A737D;">       * the check.</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">uv__update_time</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">uv__run_timers</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    r </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__loop_alive</span><span style="color:#E1E4E8;">(loop);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> UV_RUN_ONCE </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> mode </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> UV_RUN_NOWAIT)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /* The if statement lets gcc compile it to a conditional store. Avoids</span></span>
<span class="line"><span style="color:#6A737D;">   * dirtying a cache line.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (loop-&gt;stop_flag </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    loop-&gt;stop_flag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> r;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv_run</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uv_loop_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">loop</span><span style="color:#24292E;">, uv_run_mode </span><span style="color:#E36209;">mode</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ran_pending;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__loop_alive</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">r)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__update_time</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (r </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> loop-&gt;stop_flag </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__update_time</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__run_timers</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">    ran_pending </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__run_pending</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__run_idle</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__run_prepare</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ((mode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> UV_RUN_ONCE </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ran_pending) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> UV_RUN_DEFAULT)</span></span>
<span class="line"><span style="color:#24292E;">      timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv_backend_timeout</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__io_poll</span><span style="color:#24292E;">(loop, timeout);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /* Run one final update on the provider_idle_time in case uv__io_poll</span></span>
<span class="line"><span style="color:#6A737D;">     * returned because the timeout expired, but no events were received. This</span></span>
<span class="line"><span style="color:#6A737D;">     * call will be ignored if the provider_entry_time was either never set (if</span></span>
<span class="line"><span style="color:#6A737D;">     * the timeout == 0) or was already updated b/c an event was received.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__metrics_update_idle_time</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__run_check</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv__run_closing_handles</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> UV_RUN_ONCE) {</span></span>
<span class="line"><span style="color:#6A737D;">      /* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span>
<span class="line"><span style="color:#6A737D;">       * been invoked when it returns. uv__io_poll() can return without doing</span></span>
<span class="line"><span style="color:#6A737D;">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span>
<span class="line"><span style="color:#6A737D;">       * have pending timers that satisfy the forward progress constraint.</span></span>
<span class="line"><span style="color:#6A737D;">       *</span></span>
<span class="line"><span style="color:#6A737D;">       * UV_RUN_NOWAIT makes no guarantees about progress so it&#39;s omitted from</span></span>
<span class="line"><span style="color:#6A737D;">       * the check.</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">uv__update_time</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">uv__run_timers</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    r </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__loop_alive</span><span style="color:#24292E;">(loop);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (mode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> UV_RUN_ONCE </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> mode </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> UV_RUN_NOWAIT)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /* The if statement lets gcc compile it to a conditional store. Avoids</span></span>
<span class="line"><span style="color:#6A737D;">   * dirtying a cache line.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (loop-&gt;stop_flag </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    loop-&gt;stop_flag </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> r;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>逐步进行分析，首先判断有没有活跃事件（监听I/O，定时器...），即 <code>uv__loop_alive()</code>。</p><p>若无活跃事件，则直接更新 <code>loop</code> 的最后处理时间，否则就进入 <code>while</code> 循环。</p><p>这里说的 &quot;更新 loop 最后处理时间&quot;，即 <code>uv__update_time()</code> 里面的逻辑就是更新 <code>loop</code> 结构体内部的时间戳字段：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">UV_UNUSED</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__update_time</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uv_loop_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">loop</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#6A737D;">  /* Use a fast time source if available.  We only need millisecond precision.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  loop-&gt;time </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__hrtime</span><span style="color:#E1E4E8;">(UV_CLOCK_FAST) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">UV_UNUSED</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__update_time</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uv_loop_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">loop</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#6A737D;">  /* Use a fast time source if available.  We only need millisecond precision.</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  loop-&gt;time </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__hrtime</span><span style="color:#24292E;">(UV_CLOCK_FAST) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>最后一轮事件循环处理的时间是 <code>uv__hrtime(UV_CLOCK_FAST) / 1000000</code> 。</p></blockquote><p>当进入 <code>while</code> 循环：</p><ul><li>更新 <code>loop</code> 最后处理时间；</li><li>执行<a href="https://github.com/nodejs/node/blob/v18.12.1/deps/uv/src/timer.c#L163-L180" target="_blank" rel="noreferrer">定时事件</a>； <ul><li>大概流程就是在定时事件的小根堆里遍历出相较于之前更新的 “loop 最新处理时间” 已过期的事件，并依次执行其回调。</li></ul></li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uv__run_timers</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uv_loop_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">loop</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> heap_node</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> heap_node;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">uv_timer_t</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> handle;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (;;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    heap_node </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">heap_min</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">timer_heap</span><span style="color:#E1E4E8;">(loop));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (heap_node </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    handle </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">container_of</span><span style="color:#E1E4E8;">(heap_node, </span><span style="color:#79B8FF;">uv_timer_t</span><span style="color:#E1E4E8;">, heap_node);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (handle-&gt;timeout </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> loop-&gt;time)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv_timer_stop</span><span style="color:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">uv_timer_again</span><span style="color:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="color:#E1E4E8;">    handle-&gt;</span><span style="color:#B392F0;">timer_cb</span><span style="color:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uv__run_timers</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uv_loop_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#E36209;">loop</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> heap_node</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> heap_node;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">uv_timer_t</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> handle;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (;;) {</span></span>
<span class="line"><span style="color:#24292E;">    heap_node </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">heap_min</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">timer_heap</span><span style="color:#24292E;">(loop));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (heap_node </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    handle </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">container_of</span><span style="color:#24292E;">(heap_node, </span><span style="color:#005CC5;">uv_timer_t</span><span style="color:#24292E;">, heap_node);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (handle-&gt;timeout </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> loop-&gt;time)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv_timer_stop</span><span style="color:#24292E;">(handle);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">uv_timer_again</span><span style="color:#24292E;">(handle);</span></span>
<span class="line"><span style="color:#24292E;">    handle-&gt;</span><span style="color:#6F42C1;">timer_cb</span><span style="color:#24292E;">(handle);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>遍历并执行 I/O 已结束（完成、失败）并丢进 <code>pending</code> 队列等待后续处理的事件对应的回调；</li><li>遍历并执行空转（Idle）事件；</li><li>遍历并执行准备（Prepare）事件；</li><li>获取没有触发距离现在最近的定时器的时间间隔（uv_backend_timeout），即事件循环到洗一次循环的最长时间；</li><li>根据 epoll、kqueue 等 I/O 多路复用机制，去监听等待 I/O 事件触发，并以上一步获取的时间间隔最为最大监听时间，若超时还未有事件触发，则直接取消此次等待（如果时间到了还没有事件触发，但是定时器触发时间到了，libuv 就要停下来处理下一轮定时器）；</li><li>执行一遍 <code>uv__metrics_update_idle_time()</code>，更新 <code>loop</code> 中 metrics 里的 <code>idle_time</code>，</li></ul>`,23),e=[o];function c(t,r,E,y,i,_){return n(),a("div",null,e)}const F=s(p,[["render",c]]);export{u as __pageData,F as default};

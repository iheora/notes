import{_ as s,o as a,c as l,Q as e}from"./chunks/framework.88002d8f.js";const u=JSON.parse('{"title":"interview","description":"","frontmatter":{},"headers":[],"relativePath":"html5/interview/index.md","filePath":"html5/interview/index.md"}'),o={name:"html5/interview/index.md"},n=e(`<h1 id="interview" tabindex="-1">interview <a class="header-anchor" href="#interview" aria-label="Permalink to &quot;interview&quot;">​</a></h1><h2 id="html-语义化" tabindex="-1">HTML 语义化 <a class="header-anchor" href="#html-语义化" aria-label="Permalink to &quot;HTML 语义化&quot;">​</a></h2><p>语义化指根据内容的结构，选择合适的标签。通俗来讲就是用正确的标签做正确的事。</p><p>语义化优点：</p><ul><li>对机器友好，带有语义化的文字表现力丰富，适合搜索引擎的爬虫爬取有效信息，有利于 SEO；</li><li>语义化标签支持读屏软件，根据文章可以自动生成目录；</li><li>对开发者友好，可以增强可读性，使网页结构更加清晰，有利于团队的开发和维护。</li></ul><p>常见的语义化标签：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">header</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">header</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">nav</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">nav</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">section</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">section</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">main</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">main</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">article</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">article</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">aside</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">aside</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">footer</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">footer</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">header</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">header</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">nav</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">nav</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">section</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">section</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">main</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">main</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">article</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">article</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">aside</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">aside</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">footer</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">footer</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="doctype-文档类型" tabindex="-1">DOCTYPE（文档类型） <a class="header-anchor" href="#doctype-文档类型" aria-label="Permalink to &quot;DOCTYPE（文档类型）&quot;">​</a></h2><p>DOCTYPE 是 HTML5 中一种标准通用标记语言的文档类型声明。</p><p>它必须声明在第一行。用于告知浏览器如何解析文档，不同的渲染模型会影响浏览器对 CSS 代码甚至 JavaScript 脚本的解析。</p><p>浏览器渲染页面有两种方式：</p><ul><li>CSS1Compat，标准模式（Strick mode） <ul><li>浏览器默认模式，使用 <code>W3C</code> 标准解析并渲染页面</li><li>标准模式中，浏览器按照 <code>W3C</code> 标准解析代码</li></ul></li><li>BackCompat，怪异模式/混杂模式（Quirk mode） <ul><li>浏览器用自己的方式解析代码</li><li>混杂模式通常模拟老式浏览器的行为，以防止老站点无法工作</li></ul></li></ul><h2 id="defer-与-async" tabindex="-1">defer 与 async <a class="header-anchor" href="#defer-与-async" aria-label="Permalink to &quot;defer 与 async&quot;">​</a></h2><p>defer 和 async 属性都会异步加载外部的 JS 脚本文件，它们都不会阻塞页面的解析。</p><p>defer</p><ul><li><p>IE4 已经存在该方法，</p></li><li><p>多个 defer 属性标签，会按照加载顺序依次执行</p></li><li><p>脚本加载完成后，不会立即执行，会在DOM 树构建完毕后，DOMContentLoaded 事件触发之前执行</p></li></ul><p>async</p><ul><li>HTML5 新增属性，IE9 及以上支持该属性</li><li>多个带有 async 属性的标签，不能保持加载顺序</li><li>脚本加载完成后会立即执行</li></ul><p><a href="https://notes.yueluo.club/fragment/index.html#_1%E3%80%81%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD" target="_blank" rel="noreferrer">企业级异步加载</a></p><h2 id="常用的-meta-标签" tabindex="-1">常用的 meta 标签 <a class="header-anchor" href="#常用的-meta-标签" aria-label="Permalink to &quot;常用的 meta 标签&quot;">​</a></h2><p>meta 标签由 name 和 content 属性定义，用来描述网页文档的属性。</p><p>HTTP 标准固定了一些 name 形成共识，开发者也可以自定义 name。</p><h3 id="charset" tabindex="-1">charset <a class="header-anchor" href="#charset" aria-label="Permalink to &quot;charset&quot;">​</a></h3><p>用来描述 HTML 文档的编码类型</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UFT-8&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">charset</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UFT-8&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="viewport" tabindex="-1">viewport <a class="header-anchor" href="#viewport" aria-label="Permalink to &quot;viewport&quot;">​</a></h3><p>适配移动端，用来控制视口的大小和比例</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=deveice-width, initial-scale=1, maximun-scale=1&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;viewport&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;width=deveice-width, initial-scale=1, maximun-scale=1&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><p>content 参数有以下几种：</p><ul><li>width viewport：宽度（数值/deveice-width）</li><li>height viewport：高度（数值/device-height）</li><li>initial-scale：初始缩放比例</li><li>maximum-scale：最大缩放比例</li><li>minimum-scale：最小缩放比例</li><li>use-scalable：是否允许用户缩放（yes/no）</li></ul><h3 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;keywords&quot;">​</a></h3><p>页面关键词</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;keywords&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;关键词&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;keywords&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;关键词&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">​</a></h3><p>页面描述</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;description&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;页面描述内容&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;description&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;页面描述内容&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="refresh" tabindex="-1">refresh <a class="header-anchor" href="#refresh" aria-label="Permalink to &quot;refresh&quot;">​</a></h3><p>页面重定向和刷新</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">http-equiv</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;refresh&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;0;url=&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">http-equiv</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;refresh&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;0;url=&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><h3 id="robots" tabindex="-1">robots <a class="header-anchor" href="#robots" aria-label="Permalink to &quot;robots&quot;">​</a></h3><p>搜索引擎索引方式</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;robots&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;index,follow&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">meta</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;robots&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">content</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;index,follow&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre></div><p><code>content</code> 参数有以下几种：</p><ul><li><code>all</code>：文件将被检索，且页面上的链接可以被查询</li><li><code>none</code>：文件将不被检索，且页面上的链接不可以被查询</li><li><code>index</code>：文件将被检索</li><li><code>follow</code>：页面上的链接可以被查询</li><li><code>noindex</code>：文件将不被检索</li><li><code>nofollow</code>：页面上的链接不可以被查询</li></ul><h2 id="html5-新特性" tabindex="-1">HTML5 新特性 <a class="header-anchor" href="#html5-新特性" aria-label="Permalink to &quot;HTML5 新特性&quot;">​</a></h2><ul><li><p>新增语义化标签：nav、header、footer、aside、section、article</p></li><li><p>音频、视频标签：audio、video</p></li><li><p>数据存储：localStorage、sessionStorage、IndexedDB</p></li><li><p>canvas（画布）、Geolocation（地理定位）、websocket（通信协议）</p></li><li><p>input 标签新增属性：placeholder、autocomplete、autofocus、required</p></li><li><p>history API：go、forward、back、pushstate</p></li><li><p>DOM 查询操作：<code>document.querySelector()</code>、<code>document.querySelectorAll()</code></p></li><li><p>拖放：<code>&lt;img draggable=&quot;true&quot; /&gt;</code></p></li></ul><h2 id="行内元素、块级元素、空元素" tabindex="-1">行内元素、块级元素、空元素 <a class="header-anchor" href="#行内元素、块级元素、空元素" aria-label="Permalink to &quot;行内元素、块级元素、空元素&quot;">​</a></h2><p>行内元素有：<code>a b span img input select strong</code></p><p>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p</code></p><p>空元素，即没有内容的HTML元素。空元素是在开始标签中关闭的，也就是空元素没有闭合标签</p><ul><li>常见的有：<code>&lt;br&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code></li><li>少见的有：<code>&lt;area&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;col&gt;</code>、<code>&lt;colgroup&gt;</code>、<code>&lt;command&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;keygen&gt;</code>、<code>&lt;param&gt;</code>、<code>&lt;source&gt;</code>、<code>&lt;track&gt;</code>、<code>&lt;wbr&gt;</code></li></ul><h2 id="web-worker" tabindex="-1">web worker <a class="header-anchor" href="#web-worker" aria-label="Permalink to &quot;web worker&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noreferrer">MDN定义</a></p><p>web worker 是运行在后台的 js，独立于其他脚本，不会影响页面的性能。</p><p>可以通过 postMessage 将结果回传到主线程，在进行复杂操作的时候，不会阻塞主线程。</p><p>如何创建 web worker：</p><ol><li>检测浏览器对于 web worker 的支持性</li><li>创建 web worker 文件（js，回传函数等）</li><li>创建 web worker 对象</li></ol><h2 id="离线存储" tabindex="-1">离线存储 <a class="header-anchor" href="#离线存储" aria-label="Permalink to &quot;离线存储&quot;">​</a></h2><p>离线存储指的是：在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。</p><p>HTML5 的离线存储是基于一个新建的 <code>.appcache</code> 文件的缓存机制，通过这个文件上的解析清单离线存储资源，这些资源就会像 cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。</p><h3 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h3><p>创建一个和 html 同名的 manifest 文件，然后在页面头部加入 manifest 属性：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">manifest</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;index.manifest&quot;</span><span style="color:#E1E4E8;"> &gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;en&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">manifest</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;index.manifest&quot;</span><span style="color:#24292E;"> &gt;</span></span></code></pre></div><p>在 <code>index.manifest</code> 文件中编写需要离线存储的资源：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">CACHE MANIFEST</span></span>
<span class="line"><span style="color:#e1e4e8;">    #v0.11</span></span>
<span class="line"><span style="color:#e1e4e8;">    CACHE:</span></span>
<span class="line"><span style="color:#e1e4e8;">    js/app.js</span></span>
<span class="line"><span style="color:#e1e4e8;">    css/style.css</span></span>
<span class="line"><span style="color:#e1e4e8;">    NETWORK:</span></span>
<span class="line"><span style="color:#e1e4e8;">    resourse/logo.png</span></span>
<span class="line"><span style="color:#e1e4e8;">    FALLBACK:</span></span>
<span class="line"><span style="color:#e1e4e8;">    / /offline.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">CACHE MANIFEST</span></span>
<span class="line"><span style="color:#24292e;">    #v0.11</span></span>
<span class="line"><span style="color:#24292e;">    CACHE:</span></span>
<span class="line"><span style="color:#24292e;">    js/app.js</span></span>
<span class="line"><span style="color:#24292e;">    css/style.css</span></span>
<span class="line"><span style="color:#24292e;">    NETWORK:</span></span>
<span class="line"><span style="color:#24292e;">    resourse/logo.png</span></span>
<span class="line"><span style="color:#24292e;">    FALLBACK:</span></span>
<span class="line"><span style="color:#24292e;">    / /offline.html</span></span></code></pre></div><ul><li>CACHE: 表示需要离线存储的资源列表，由于包含 manifest 文件的页面将被自动离线存储，所以不需要把页面自身也列出来。</li><li>NETWORK: 表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在 CACHE 和 NETWORK 中有一个相同的资源，那么这个资源还是会被离线存储，也就是说 CACHE 的优先级更高。</li><li>FALLBACK: 表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问 offline.html 。</li></ul><p>离线状态时，操作 <code>window.applicationCache</code> 进行离线缓存的操作。</p><h3 id="更新缓存" tabindex="-1">更新缓存 <a class="header-anchor" href="#更新缓存" aria-label="Permalink to &quot;更新缓存&quot;">​</a></h3><ul><li><p>更新 manifest 文件</p></li><li><p>通过 javascript 操作</p></li><li><p>清除浏览器缓存</p></li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><p>浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。</p></li><li><p>如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程都将失败，浏览器继续全部使用老的缓存。</p></li><li><p>引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下。</p></li><li><p>FALLBACK 中的资源必须和 manifest 文件同源。</p></li><li><p>当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</p></li><li><p>站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问。</p></li><li><p>当 manifest 文件发生改变时，资源请求本身也会触发更新。</p></li></ul><h3 id="管理和加载" tabindex="-1">管理和加载 <a class="header-anchor" href="#管理和加载" aria-label="Permalink to &quot;管理和加载&quot;">​</a></h3><ul><li>在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件。 <ul><li>如果是第一次访问页面 ，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。</li><li>如果已经访问过页面并且资源已经进行离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，就会重新下载文件中的资源并进行离线存储。</li></ul></li><li>离线的情况下，浏览器会直接使用离线存储的资源。</li></ul><h2 id="iframe" tabindex="-1">iframe <a class="header-anchor" href="#iframe" aria-label="Permalink to &quot;iframe&quot;">​</a></h2><p>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）。</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ul><li>用来加载速度较慢的内容（如广告）</li><li>可以使脚本可以并行下载</li><li>可以实现跨子域通信</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>iframe 会阻塞主页面的 onload 事件</li><li>无法被一些搜索引擎索识别</li><li>会产生很多页面，不容易管理</li></ul><h2 id="label-属性的作用" tabindex="-1">label 属性的作用 <a class="header-anchor" href="#label-属性的作用" aria-label="Permalink to &quot;label 属性的作用&quot;">​</a></h2><p>label 标签来定义表单控件的关系：当用户选择 label 标签时，浏览器会自动将焦点转到和 label 标签相关的表单控件上。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mobile&quot;</span><span style="color:#E1E4E8;">&gt;Number:&lt;/</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;mobile&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">label</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mobile&quot;</span><span style="color:#24292E;">&gt;Number:&lt;/</span><span style="color:#22863A;">label</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;mobile&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;Date:&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">/&gt;&lt;/</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">label</span><span style="color:#24292E;">&gt;Date:&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;">/&gt;&lt;/</span><span style="color:#22863A;">label</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="canvas-和-svg" tabindex="-1">canvas 和 svg <a class="header-anchor" href="#canvas-和-svg" aria-label="Permalink to &quot;canvas 和 svg&quot;">​</a></h2><p>矢量图，也称为面向对象的图像或绘图图像，在数学上定义为一系列由线连接的点。</p><p>矢量文件中的图形元素称为对象。每个对象都是一个自成一体的实体，它具有颜色、形状、轮廓、大小和屏幕位置等属性。</p><h3 id="svg" tabindex="-1">svg <a class="header-anchor" href="#svg" aria-label="Permalink to &quot;svg&quot;">​</a></h3><p>SVG 可缩放矢量图形（Scalable Vector Graphics）是基于可扩展标记语言XML描述的 2D 图形的语言，SVG 基于XML就意味着 SVG DOM 中的每个元素都是可用的，可以为某个元素附加 Javascript 事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p><ul><li>不依赖分辨率</li><li>支持事件处理器</li><li>最适合带有大型渲染区域的应用程序（比如谷歌地图）</li><li>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）</li><li>不适合游戏应用</li></ul><h3 id="canvas" tabindex="-1">canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;canvas&quot;">​</a></h3><p>Canvas是画布，通过 Javascript 来绘制 2D 图形，是逐像素进行渲染的。其位置发生改变，就会重新进行绘制。</p><ul><li>依赖分辨率</li><li>不支持事件处理器</li><li>弱的文本渲染能力</li><li>能够以 .png 或 .jpg 格式保存结果图像</li><li>最适合图像密集型的游戏，其中的许多对象会被频繁重绘</li></ul><h2 id="head-标签" tabindex="-1">head 标签 <a class="header-anchor" href="#head-标签" aria-label="Permalink to &quot;head 标签&quot;">​</a></h2><p><code>&lt;head&gt;</code> 标签用于定义文档的头部，它是所有头部元素的容器。</p><p><code>&lt;head&gt;</code> 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等。</p><p>可以用在 head 部分：<code>&lt;base&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;title&gt;</code>。</p><p><code>&lt;title&gt;</code> 定义文档的标题，它是 head 部分中唯一必需的元素。</p><h2 id="渐进增强、优雅降级" tabindex="-1">渐进增强、优雅降级 <a class="header-anchor" href="#渐进增强、优雅降级" aria-label="Permalink to &quot;渐进增强、优雅降级&quot;">​</a></h2><h3 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h3><p>渐进增强（progressive enhancement）：主要是针对低版本的浏览器进行页面重构，保证基本的功能情况下，再针对高级浏览器进行效果、交互等方面的改进和追加功能，以达到更好的用户体验。</p><p>优雅降级 graceful degradation： 一开始就构建完整的功能，然后再针对低版本的浏览器进行兼容。</p><h3 id="区别" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><p>优雅降级是从复杂的现状开始的，并试图减少用户体验的供给； 渐进增强是从一个非常基础的，能够起作用的版本开始的，并在此基础上不断扩充，以适应未来环境的需要；</p><p>降级意味着往回看，而渐进增强则意味着往前看，同时保证其根基处于安全地带。</p><p>“优雅降级” 观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p><p>“渐进增强”观点则认为应关注于内容本身。内容是建立网站的诱因，有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo 所采纳并用以构建其 “分级式浏览器支持 (Graded Browser Support)” 策略的原因所在。</p><h2 id="drag-api" tabindex="-1">drag API <a class="header-anchor" href="#drag-api" aria-label="Permalink to &quot;drag API&quot;">​</a></h2><ul><li>dragstart：事件主体是被拖放元素，在开始拖放被拖放元素时触发。</li><li>drag：事件主体是被拖放元素，在正在拖放被拖放元素时触发。</li><li>dragenter：事件主体是目标元素，在被拖放元素进入某元素时触发。</li><li>dragover：事件主体是目标元素，在被拖放在某元素内移动时触发。</li><li>dragleave：事件主体是目标元素，在被拖放元素移出目标元素是触发。</li><li>drop：事件主体是目标元素，在目标元素完全接受被拖放元素时触发。</li><li>dragend：事件主体是被拖放元素，在整个拖放操作结束时触发。</li></ul>`,108),t=[n];function p(c,r,i,d,E,y){return a(),l("div",null,t)}const g=s(o,[["render",p]]);export{u as __pageData,g as default};

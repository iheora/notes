import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.88002d8f.js";const o="/notes/assets/cheastsheet.ca4fe2c1.png",C=JSON.parse('{"title":"正则学习","description":"","frontmatter":{},"headers":[],"relativePath":"reg/learn/index.md","filePath":"reg/learn/index.md"}'),p={name:"reg/learn/index.md"},e=l(`<h1 id="正则学习" tabindex="-1">正则学习 <a class="header-anchor" href="#正则学习" aria-label="Permalink to &quot;正则学习&quot;">​</a></h1><p>正则表达式，即 Regular Expression，缩写为 <code>Regex</code> 或 <code>Regexp</code>。</p><p>我们可以使用正则表达式轻松管理数据，执行查找、匹配或编辑等命令。</p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><code>Regex</code> 是正则表达式（Regular Expression）的简称。它便于匹配、查找和管理文本。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Understand? OK or NOT&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">OK</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;OK&#39;, index: 12, input: &#39;Understand? OK or NOT&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">ok</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">i</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;OK&#39;, index: 12, input: &#39;Understand? OK or NOT&#39;, groups: undefined ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Understand? OK or NOT&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/OK/</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;OK&#39;, index: 12, input: &#39;Understand? OK or NOT&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/ok/</span><span style="color:#D73A49;">i</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;OK&#39;, index: 12, input: &#39;Understand? OK or NOT&#39;, groups: undefined ]</span></span></code></pre></div><p>正则表达式是表示搜索模式的字符串，常缩写为 <code>Regex</code> 或 <code>Regexp</code>。</p><p>它常用于查找和替换文本中的字词。此外，我们可以测试文本是否符合我们设置的规则。</p><p>例如，当我们想查找文件名列表中，扩展名是 <code>pdf</code> 的文件，那您只需要跟着输入 <code>^\\w+\\.pdf</code> 就可以找到。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">strArr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;readme.md&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;document.pdf&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;image.png&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;music.mp4&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;manual.pdf&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">strArr.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">pdf</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#6A737D;">// [ &#39;document.pdf&#39;, index: 0, input: &#39;document.pdf&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#6A737D;">// [ &#39;manual.pdf&#39;, index: 0, input: &#39;manual.pdf&#39;, groups: undefined ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">strArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;readme.md&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;document.pdf&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;image.png&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;music.mp4&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;manual.pdf&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">strArr.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">pdf</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#6A737D;">// [ &#39;document.pdf&#39;, index: 0, input: &#39;document.pdf&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#6A737D;">// [ &#39;manual.pdf&#39;, index: 0, input: &#39;manual.pdf&#39;, groups: undefined ]</span></span></code></pre></div><h2 id="基本匹配" tabindex="-1">基本匹配 <a class="header-anchor" href="#基本匹配" aria-label="Permalink to &quot;基本匹配&quot;">​</a></h2><p>当我们想要查找字符或单词可以直接输入，就像搜索一样。例如要找出文本内的 <code>curious</code> 一词，只需要输入同样的内容。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  “I have no special talents. I am only passionately curious.”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">  ― Albert Einstein</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">curious</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gm</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;curious&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  “I have no special talents. I am only passionately curious.”</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">  ― Albert Einstein</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/curious/</span><span style="color:#D73A49;">gm</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;curious&#39; ]</span></span></code></pre></div><h2 id="任何字符" tabindex="-1">任何字符 <a class="header-anchor" href="#任何字符" aria-label="Permalink to &quot;任何字符&quot;">​</a></h2><p>使用 <code>.</code> 可以匹配任何字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">.</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39; &#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39; &#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39;]</span></span></code></pre></div><h2 id="字符集-abc" tabindex="-1">字符集 <code>[abc]</code> <a class="header-anchor" href="#字符集-abc" aria-label="Permalink to &quot;字符集 \`[abc]\`&quot;">​</a></h2><p>如果一个词中的字符可以是各种字符，我们就将所有的可选字符写进括号 <code>[]</code> 中。</p><p>例如，为了查找文本中的所有单词，我们需要编写表达式，在 <code>[]</code> 中相邻地输入字符 <code>a</code>、<code>e</code>、<code>i</code>、<code>o</code>、<code>u</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar ber bir bor bur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">b</span><span style="color:#79B8FF;">[aeiou]</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;bar&#39;, index: 0, input: &#39;bar ber bir bor bur&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">b</span><span style="color:#79B8FF;">[aeiou]</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;bar&#39;, &#39;ber&#39;, &#39;bir&#39;, &#39;bor&#39;, &#39;bur&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar ber bir bor bur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/b</span><span style="color:#005CC5;">[aeiou]</span><span style="color:#032F62;">r/</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;bar&#39;, index: 0, input: &#39;bar ber bir bor bur&#39;, groups: undefined ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/b</span><span style="color:#005CC5;">[aeiou]</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;bar&#39;, &#39;ber&#39;, &#39;bir&#39;, &#39;bor&#39;, &#39;bur&#39; ]</span></span></code></pre></div><h2 id="否定字符集-abc" tabindex="-1">否定字符集 <code>[^abc]</code> <a class="header-anchor" href="#否定字符集-abc" aria-label="Permalink to &quot;否定字符集 \`[^abc]\`&quot;">​</a></h2><p>为了查找下方文本的所有单词（<code>ber</code> 和 <code>bor</code> 除外），请在 <code>[]</code> 中的 <code>^</code> 后面并排输入 <code>e</code> 和 <code>o</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar ber bir bor bur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">b</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">eo]</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//  &#39;bar&#39;, &#39;bir&#39;, &#39;bur&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar ber bir bor bur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/b</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">eo]</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//  &#39;bar&#39;, &#39;bir&#39;, &#39;bur&#39; ]</span></span></code></pre></div><p><code>^</code> 在字符集中代表否定的意思，如果放在行首，代表以指定字符开头。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;bar ber bir bor bur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">b</span><span style="color:#79B8FF;">[</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">eo]</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">//  &#39;bar&#39;, &#39;bir&#39;, &#39;bur&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">bar</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;bar&#39;, index: 0, input: &#39;bar ber bir bor bur&#39;, groups: undefined ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;bar ber bir bor bur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/b</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">eo]</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">//  &#39;bar&#39;, &#39;bir&#39;, &#39;bur&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#032F62;">bar/</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;bar&#39;, index: 0, input: &#39;bar ber bir bor bur&#39;, groups: undefined ]</span></span></code></pre></div><h2 id="字母范围-a-z" tabindex="-1">字母范围 <code>[a-z]</code> <a class="header-anchor" href="#字母范围-a-z" aria-label="Permalink to &quot;字母范围 \`[a-z]\`&quot;">​</a></h2><p>为了查找指定范围内的字母，我们可以将起始字母和结束字母写进 <code>[]</code> 中，中间使用连字符 <code>-</code> 分割（它区分大小写）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[e-o]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcdefghijklmnopqrstuvwxyz&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">[e-o]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;]</span></span></code></pre></div><h2 id="数字范围-0-9" tabindex="-1">数字范围 <code>[0-9]</code> <a class="header-anchor" href="#数字范围-0-9" aria-label="Permalink to &quot;数字范围 \`[0-9]\`&quot;">​</a></h2><p>为了查找指定范围的数字，我们可以在 <code>[]</code> 中输入起始和结束数字，中间用连字符 <code>-</code> 分割。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0123456789&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[3-6]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0123456789&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">[3-6]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39; ]</span></span></code></pre></div><h2 id="重复" tabindex="-1">重复 <a class="header-anchor" href="#重复" aria-label="Permalink to &quot;重复&quot;">​</a></h2><p>一些特殊字符用来指定一个字符在文本中重复的次数。它们分别是加号 <code>+</code>、星号 <code>*</code> 和问号 <code>?</code>。</p><h3 id="星号" tabindex="-1">星号 * <a class="header-anchor" href="#星号" aria-label="Permalink to &quot;星号 *&quot;">​</a></h3><p>当我们在字符后面加上 <code>*</code> ，表示一个字符完全不匹配或可以匹配多次。</p><p>例如，表示字符 <code>e</code> 在下方文本中不出现，只出现 1 次或者并排出现多次。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;br ber beer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">be</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;br&#39;, &#39;ber&#39;, &#39;beer&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;br ber beer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/be</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;br&#39;, &#39;ber&#39;, &#39;beer&#39; ]</span></span></code></pre></div><blockquote><p>与 + 相比不同的是可以代表字符完全不匹配。</p></blockquote><h3 id="加号" tabindex="-1">加号 + <a class="header-anchor" href="#加号" aria-label="Permalink to &quot;加号 +&quot;">​</a></h3><p>为了表示一个字符可以出现一次或多次，我们可以将 <code>+</code> 放在它后面。</p><p>例如，表示 <code>e</code> 在下方文本中出现一次或多次。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;br ber beer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">be</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;ber&#39;, &#39;beer&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;br ber beer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/be</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;ber&#39;, &#39;beer&#39; ]</span></span></code></pre></div><h3 id="问号" tabindex="-1">问号 ? <a class="header-anchor" href="#问号" aria-label="Permalink to &quot;问号 ?&quot;">​</a></h3><p>为了表示一个字符是可选的，我们在它后面加一个 <code>?</code>。</p><p>例如，表示下方文本中的字符 <code>u</code> 是可选的。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;color, colour&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">colou</span><span style="color:#F97583;">?</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39;, &#39;colour&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">colou</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39;, &#39;colour&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;color, colour&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/colou</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39;, &#39;colour&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/colou</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39;, &#39;colour&#39; ]</span></span></code></pre></div><p>我们可以使用 <code>*</code> 实现类似的效果，但是 <code>*</code> 还可以匹配多次。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;color, colouuur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">colou</span><span style="color:#F97583;">?</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">colou</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39;, &#39;colour&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;color, colouuur&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/colou</span><span style="color:#D73A49;">?</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/colou</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;color&#39;, &#39;colour&#39; ]</span></span></code></pre></div><h3 id="大括号" tabindex="-1">大括号 <a class="header-anchor" href="#大括号" aria-label="Permalink to &quot;大括号&quot;">​</a></h3><p>为了表示一个字符出现的确切次数，我们可以在该字符的末尾，将它出现的次数写进大括号 <code>{}</code> 中，如 <code>{n}</code>。</p><p>例如，表示下方文本中的字符 <code>e</code> 只能出现 <code>2</code> 次。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">be</span><span style="color:#F97583;">{2}</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;beer&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">be</span><span style="color:#F97583;">{3}</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;beeer&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/be</span><span style="color:#D73A49;">{2}</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;beer&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/be</span><span style="color:#D73A49;">{3}</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;beeer&#39; ]</span></span></code></pre></div><p>为了表示一个字符至少出现多少次，我们可以在该字符的末尾，将它至少应出现的次数写进大括号 <code>{}</code> 中，并在数字后面加上逗号 <code>,</code>。</p><p>例如，表示下方文本中的字母 <code>e</code> 至少出现 <code>3</code> 次。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">be</span><span style="color:#F97583;">{3,}</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;beeer&#39;, &#39;beeeer&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/be</span><span style="color:#D73A49;">{3,}</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;beeer&#39;, &#39;beeeer&#39; ]</span></span></code></pre></div><p>为了表示一些字符出现次数在某个范围内，我们在该字符的末尾，将它至少和至多出现的次数写进大括号 <code>{}</code> 中，中间用逗号 <code>,</code> 分割，如 <code>{x,y}</code> 。</p><p>例如，匹配下方文本中，字符<code>e</code> 出现 1 到 3 次的单词。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">be</span><span style="color:#F97583;">{1,3}</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;ber&#39;, &#39;beer&#39;, &#39;beeer&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/be</span><span style="color:#D73A49;">{1,3}</span><span style="color:#032F62;">r/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;ber&#39;, &#39;beer&#39;, &#39;beeer&#39; ]</span></span></code></pre></div><h2 id="组和引用" tabindex="-1">组和引用 <a class="header-anchor" href="#组和引用" aria-label="Permalink to &quot;组和引用&quot;">​</a></h2><h3 id="分组" tabindex="-1">分组 <code>()</code> <a class="header-anchor" href="#分组" aria-label="Permalink to &quot;分组 \`()\`&quot;">​</a></h3><p>我们可以对一个表达式进行分组，并用这些分组来引用或执行一些规则。为了给表达式分组，我们需要将文本包裹在 <code>()</code> 中。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ha-ha,haa-haa&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(haa)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;haa&#39;, &#39;haa&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ha-ha,haa-haa&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(haa)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;haa&#39;, &#39;haa&#39; ]</span></span></code></pre></div><h3 id="引用组-1" tabindex="-1">引用组<code>(\\1)</code> <a class="header-anchor" href="#引用组-1" aria-label="Permalink to &quot;引用组\`(\\1)\`&quot;">​</a></h3><p>单词 <code>ha</code> 和 <code>haa</code> 分组如下。第一组用 <code>\\1</code> 来避免重复书写。这里的 1 表示分组的顺序。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ha-ha,haa-haa&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ha-ha-ha,haa-haa&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str1.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(ha)-</span><span style="color:#F97583;">\\1</span><span style="color:#DBEDFF;">,(haa)-</span><span style="color:#F97583;">\\2</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;ha-ha,haa-haa&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str2.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(ha)-</span><span style="color:#F97583;">\\1</span><span style="color:#DBEDFF;">-</span><span style="color:#F97583;">\\1</span><span style="color:#DBEDFF;">,(haa)-</span><span style="color:#F97583;">\\2</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;ha-ha-ha,haa-haa&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ha-ha,haa-haa&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ha-ha-ha,haa-haa&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str1.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(ha)-</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">,(haa)-</span><span style="color:#D73A49;">\\2</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;ha-ha,haa-haa&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str2.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(ha)-</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">-</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">,(haa)-</span><span style="color:#D73A49;">\\2</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;ha-ha-ha,haa-haa&#39; ]</span></span></code></pre></div><h3 id="非捕获分组" tabindex="-1">非捕获分组<code>(?:)</code> <a class="header-anchor" href="#非捕获分组" aria-label="Permalink to &quot;非捕获分组\`(?:)\`&quot;">​</a></h3><p>我们可以对表达式进行分组，并确保它不被引用捕获。</p><p>例如，下面有两个分组，我们用 <code>\\1</code> 引用的第一个组实际上是指向第二个组，因为第一个是未被捕获的分组。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ha-ha,haa-haa&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?:ha)-ha,(haa)-</span><span style="color:#F97583;">\\1</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;ha-ha,haa-haa&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ha-ha,haa-haa&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(?:ha)-ha,(haa)-</span><span style="color:#D73A49;">\\1</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;ha-ha,haa-haa&#39; ]</span></span></code></pre></div><h2 id="竖线" tabindex="-1">竖线 <code>|</code> <a class="header-anchor" href="#竖线" aria-label="Permalink to &quot;竖线 \`|\`&quot;">​</a></h2><p>竖线允许一个表达式包含多个不同的分支，所有分支用 <code>|</code> 分割。与字符层面上运作的字符集 <code>[abc]</code> 不同，分支在表达式层面上运作。</p><p>例如，下面的表达式同时匹配 <code>cat</code> 和 <code>Cat</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;cat Cat rat&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(c</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">C)at</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;cat&#39;, &#39;Cat&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(c</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">C)at</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">rat</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;cat&#39;, &#39;Cat&#39;, &#39;rat&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[cCr]</span><span style="color:#DBEDFF;">at</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;cat&#39;, &#39;Cat&#39;, &#39;rat&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;cat Cat rat&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(c</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">C)at/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;cat&#39;, &#39;Cat&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(c</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">C)at</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">rat/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;cat&#39;, &#39;Cat&#39;, &#39;rat&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">[cCr]</span><span style="color:#032F62;">at/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;cat&#39;, &#39;Cat&#39;, &#39;rat&#39; ]</span></span></code></pre></div><h2 id="转义字符" tabindex="-1">转义字符 <code>\\</code> <a class="header-anchor" href="#转义字符" aria-label="Permalink to &quot;转义字符 \`\\\`&quot;">​</a></h2><p>在书写正则表达式时，我们会用到 <code>{}[]/\\+*.$^|?</code> 这些特殊字符。为了匹配这些特殊字符本身，我们需要通过 <code>\\</code> 将它们转义。</p><p>例如，要匹配文本中的 <code>.</code> 和 <code>*</code>，我们需要在它们前面添加一个 <code>\\</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;(*) Asterisk.&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#85E89D;font-weight:bold;">\\*</span><span style="color:#F97583;">|</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;*&#39;, &#39;.&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;(*) Asterisk.&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#22863A;font-weight:bold;">\\*</span><span style="color:#D73A49;">|</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;*&#39;, &#39;.&#39; ]</span></span></code></pre></div><h2 id="插入符" tabindex="-1">插入符 <code>^</code> <a class="header-anchor" href="#插入符" aria-label="Permalink to &quot;插入符 \`^\`&quot;">​</a></h2><p>用来匹配字符串的开始。当我们用 <code>[0-9]</code> 查找数字，如果仅查找行首的数字，可以在表达式前面加上 <code>^</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">Basic Omellette Recipe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">1. 3 eggs, beaten</span></span>
<span class="line"><span style="color:#9ECBFF;">2. 1 tsp sunflower oil</span></span>
<span class="line"><span style="color:#9ECBFF;">3. 1 tsp butter</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">[0-9]</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gm</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">Basic Omellette Recipe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#032F62;">1. 3 eggs, beaten</span></span>
<span class="line"><span style="color:#032F62;">2. 1 tsp sunflower oil</span></span>
<span class="line"><span style="color:#032F62;">3. 1 tsp butter</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">[0-9]</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">gm</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ]</span></span></code></pre></div><h2 id="美元符号" tabindex="-1">美元符号 <code>$</code> <a class="header-anchor" href="#美元符号" aria-label="Permalink to &quot;美元符号 \`$\`&quot;">​</a></h2><p>用来匹配字符串的结束。我们可以在 <code>html</code> 的后面添加 <code>$</code>，来查找仅在行末出现的 <code>html</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  https://domain.com/what-is-html.html</span></span>
<span class="line"><span style="color:#9ECBFF;">  https://otherdomain.com/html-elements</span></span>
<span class="line"><span style="color:#9ECBFF;">  https://website.com/html5-features.html</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">html</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gm</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;html&#39;, &#39;html&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  https://domain.com/what-is-html.html</span></span>
<span class="line"><span style="color:#032F62;">  https://otherdomain.com/html-elements</span></span>
<span class="line"><span style="color:#032F62;">  https://website.com/html5-features.html</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/html</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">gm</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;html&#39;, &#39;html&#39; ]</span></span></code></pre></div><h2 id="单词字符-w" tabindex="-1">单词字符 <code>\\w</code> <a class="header-anchor" href="#单词字符-w" aria-label="Permalink to &quot;单词字符 \`\\w\`&quot;">​</a></h2><p>表达式 <code>\\w</code> 用来查找字母、数字和下划线。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcABC123 _.:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;_&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcABC123 _.:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\w</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;_&#39;]</span></span></code></pre></div><h2 id="非单词字符-w" tabindex="-1">非单词字符 <code>\\W</code> <a class="header-anchor" href="#非单词字符-w" aria-label="Permalink to &quot;非单词字符 \`\\W\`&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcABC123 _.:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\W</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39; &#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcABC123 _.:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\W</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39; &#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39; ]</span></span></code></pre></div><h2 id="数字字符-d" tabindex="-1">数字字符 <code>\\d</code> <a class="header-anchor" href="#数字字符-d" aria-label="Permalink to &quot;数字字符 \`\\d\`&quot;">​</a></h2><p><code>\\d</code> 仅用来匹配数字。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ]</span></span></code></pre></div><h2 id="非数字字符-d" tabindex="-1">非数字字符 <code>\\D</code> <a class="header-anchor" href="#非数字字符-d" aria-label="Permalink to &quot;非数字字符 \`\\D\`&quot;">​</a></h2><p><code>\\D</code> 匹配除数字之外的字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\D</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39; &#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\D</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39; &#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39;]</span></span></code></pre></div><h2 id="空白符-s" tabindex="-1">空白符 <code>\\s</code> <a class="header-anchor" href="#空白符-s" aria-label="Permalink to &quot;空白符 \`\\s\`&quot;">​</a></h2><p><code>\\s</code> 仅匹配空白字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\s</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39; &#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\s</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39; &#39; ]</span></span></code></pre></div><h2 id="非空白字符-s" tabindex="-1">非空白字符 <code>\\S</code> <a class="header-anchor" href="#非空白字符-s" aria-label="Permalink to &quot;非空白字符 \`\\S\`&quot;">​</a></h2><p><code>\\S</code> 匹配除空白符之外的字符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\S</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;abcABC123 .:!?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\S</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;.&#39;, &#39;:&#39;, &#39;!&#39;, &#39;?&#39;]</span></span></code></pre></div><h2 id="零宽断言" tabindex="-1">零宽断言 <a class="header-anchor" href="#零宽断言" aria-label="Permalink to &quot;零宽断言&quot;">​</a></h2><p>如果我们希望正在写的词语出现在另一个词语之前或之后，我们需要使用零宽断言。</p><h3 id="正向先行断言" tabindex="-1">正向先行断言 <code>(?=)</code> <a class="header-anchor" href="#正向先行断言" aria-label="Permalink to &quot;正向先行断言 \`(?=)\`&quot;">​</a></h3><p>例如，我们要匹配文本中的小时值。 为了只匹配后面有 <code>PM</code> 的数值，我们需要在表达式后面使用正向先行断言 <code>(?=)</code>，并在括号内的 <code>=</code> 后面添加 <code>PM</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Date: 4 Aug 3PM&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;4&#39;, &#39;3&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">(?=PM)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;3&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Date: 4 Aug 3PM&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;4&#39;, &#39;3&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(?=PM)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;3&#39; ]</span></span></code></pre></div><h3 id="负向先行断言" tabindex="-1">负向先行断言 <code>(?!)</code> <a class="header-anchor" href="#负向先行断言" aria-label="Permalink to &quot;负向先行断言 \`(?!)\`&quot;">​</a></h3><p>例如，我们要在文本中匹配除小时值以外的数字。 我们需要在表达式后面使用负向先行断言 <code>(?!)</code>，并在括号内的 <code>!</code> 后面添加 <code>PM</code>，从而匹配没有 <code>PM</code> 的数值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Date: 4 Aug 3PM&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;4&#39;, &#39;3&#39; ]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#DBEDFF;">(?!PM)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;4&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Date: 4 Aug 3PM&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;4&#39;, &#39;3&#39; ]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">(?!PM)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;4&#39; ]</span></span></code></pre></div><h3 id="正向后行断言" tabindex="-1">正向后行断言 <code>(?&lt;=)</code> <a class="header-anchor" href="#正向后行断言" aria-label="Permalink to &quot;正向后行断言 \`(?&lt;=)\`&quot;">​</a></h3><p>例如，我们要匹配文本中的金额数。 为了匹配前面带有 <code>$</code> 的数字。我们需要在表达式前面使用正向后行断言 <code>(?&lt;=)</code> ，并在括号内的 <code>=</code> 后面添加 <code>\\$</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Product Code: 1064 Price: $5&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;=</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;5&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Product Code: 1064 Price: $5&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(?&lt;=</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;5&#39; ]</span></span></code></pre></div><h3 id="负向后行断言" tabindex="-1">负向后行断言 <code>(?&lt;!)</code> <a class="header-anchor" href="#负向后行断言" aria-label="Permalink to &quot;负向后行断言 \`(?&lt;!)\`&quot;">​</a></h3><p>例如，我们要在文本中匹配除价格外的数字。 为了只匹配前面没有 <code>$</code> 的数字，我们要在表达式前用负向后行断言 <code>(?&lt;!)</code>，并在括号内的 <code>!</code> 后面添加 <code>\\$</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Product Code: 1064 Price: $5&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(?&lt;!</span><span style="color:#85E89D;font-weight:bold;">\\$</span><span style="color:#DBEDFF;">)</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;1064&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Product Code: 1064 Price: $5&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(?&lt;!</span><span style="color:#22863A;font-weight:bold;">\\$</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">+</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;1064&#39; ]</span></span></code></pre></div><h2 id="标志" tabindex="-1">标志 <a class="header-anchor" href="#标志" aria-label="Permalink to &quot;标志&quot;">​</a></h2><p>标志可以改变表达式的输出，这也是标志被称为修饰符的原因。</p><p>标志决定表达式是否将文本视作单独的行处理，是否区分大小写，或者是否查找所有匹配项。</p><h3 id="全局标志" tabindex="-1">全局标志 <a class="header-anchor" href="#全局标志" aria-label="Permalink to &quot;全局标志&quot;">​</a></h3><p>全局标志使表达式选中所有匹配项，如果不启用全局标志，表达式只会匹配第一个匹配项。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;domain.com, test.com, site.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">com</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;domain.com&#39;]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">com</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;domain.com&#39;, &#39;test.com&#39;, &#39;site.com&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;domain.com, test.com, site.com&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">com/</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;domain.com&#39;]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">com/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;domain.com&#39;, &#39;test.com&#39;, &#39;site.com&#39; ]</span></span></code></pre></div><h3 id="多行标志" tabindex="-1">多行标志 <a class="header-anchor" href="#多行标志" aria-label="Permalink to &quot;多行标志&quot;">​</a></h3><p>正则表达式将所有文本视作一行。如果我们使用了多行标志，它就会单独处理每一行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str34</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  domain.com</span></span>
<span class="line"><span style="color:#9ECBFF;">  test.com</span></span>
<span class="line"><span style="color:#9ECBFF;">  site.com</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str34.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">com</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str34.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">com</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gm</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;domain.com&#39;, &#39;test.com&#39;, &#39;site.com&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str34</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  domain.com</span></span>
<span class="line"><span style="color:#032F62;">  test.com</span></span>
<span class="line"><span style="color:#032F62;">  site.com</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str34.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">com</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str34.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">com</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">gm</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;domain.com&#39;, &#39;test.com&#39;, &#39;site.com&#39; ]</span></span></code></pre></div><h3 id="忽略大小写标志" tabindex="-1">忽略大小写标志 <a class="header-anchor" href="#忽略大小写标志" aria-label="Permalink to &quot;忽略大小写标志&quot;">​</a></h3><p>忽略大小写标志可以让我们编写的表达式不再大小写敏感。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str35</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">  DOMAIN.COM</span></span>
<span class="line"><span style="color:#9ECBFF;">  TEST.COM</span></span>
<span class="line"><span style="color:#9ECBFF;">  SITE.COM</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str35.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">com</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gm</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str35.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\w</span><span style="color:#F97583;">+</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">com</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">gim</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ &#39;DOMAIN.COM&#39;, &#39;TEST.COM&#39;, &#39;SITE.COM&#39; ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str35</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">  DOMAIN.COM</span></span>
<span class="line"><span style="color:#032F62;">  TEST.COM</span></span>
<span class="line"><span style="color:#032F62;">  SITE.COM</span></span>
<span class="line"><span style="color:#032F62;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str35.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">com</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">gm</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// null</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str35.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">\\w</span><span style="color:#D73A49;">+</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">com</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#D73A49;">gim</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ &#39;DOMAIN.COM&#39;, &#39;TEST.COM&#39;, &#39;SITE.COM&#39; ]</span></span></code></pre></div><h3 id="贪婪匹配" tabindex="-1">贪婪匹配 <a class="header-anchor" href="#贪婪匹配" aria-label="Permalink to &quot;贪婪匹配&quot;">​</a></h3><p>正则表达式默认执行贪婪匹配。这意味着匹配的内容会尽可能长。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;ber beer beeer beeeer&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">r/</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;ber beer beeer beeeer&#39;]</span></span></code></pre></div><h3 id="惰性匹配" tabindex="-1">惰性匹配 <a class="header-anchor" href="#惰性匹配" aria-label="Permalink to &quot;惰性匹配&quot;">​</a></h3><p>与贪婪匹配不同，惰性匹配会在第一次匹配时停止。</p><p>下面的例子中，在 <code>*</code> 之后添加 <code>?</code>，将查找以 <code>r</code> 结尾且前面嗲有任意字符的第一个匹配项。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(str.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*?</span><span style="color:#DBEDFF;">r</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [&#39;ber&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;ber beer beeer beeeer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(str.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">.</span><span style="color:#D73A49;">*?</span><span style="color:#032F62;">r/</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [&#39;ber&#39;]</span></span></code></pre></div><h2 id="备忘单" tabindex="-1">备忘单 <a class="header-anchor" href="#备忘单" aria-label="Permalink to &quot;备忘单&quot;">​</a></h2><img src="`+o+'"><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://regexlearn.com/zh-cn/learn" target="_blank" rel="noreferrer">RegexLearn</a></p>',137),c=[e];function t(r,y,E,F,i,d){return a(),n("div",null,c)}const g=s(p,[["render",t]]);export{C as __pageData,g as default};

import{_ as l,o as e,c as a,Q as s}from"./chunks/framework.88002d8f.js";const o="/notes/assets/rule.81534681.png",i="/notes/assets/layout.6c640232.png",t="/notes/assets/osi_model.11fd5d5d.png",n="/notes/assets/tcp_ip.7fe333af.png",r="/notes/assets/message.187b1d89.png",p="/notes/assets/get.91737d8e.png",c="/notes/assets/rest.b863db1d.png",u="/notes/assets/PF.766db21a.png",h="/notes/assets/PF_with_UPF.a4d9c340.png",d="/notes/assets/RR.f04270a5.png",y="/notes/assets/RR_with__.c47716dc.png",m="/notes/assets/LC_SS.4b87c72e.png",b="/notes/assets/HS.eabb9732.png",q="/notes/assets/LC_SS_with_COD.90383c32.png",g="/notes/assets/mobile_code_styles.70871ae1.png",E="/notes/assets/peer_to_peer_styles.f9d8097a.png",f="/notes/assets/rest_styles.f24e2402.png",C="/notes/assets/chrome_network.da7ce72e.png",T="/notes/assets/manager_header.f7d87880.png",P="/notes/assets/preview.e402ae87.png",k="/notes/assets/uri.1f589f6a.png",S="/notes/assets/uri02.fc8c344f.png",L=JSON.parse('{"title":"Web 协议详解与抓包实战","description":"","frontmatter":{},"headers":[],"relativePath":"network/plus/index.md","filePath":"network/plus/index.md"}'),F={name:"network/plus/index.md"},R=s(`<h1 id="web-协议详解与抓包实战" tabindex="-1">Web 协议详解与抓包实战 <a class="header-anchor" href="#web-协议详解与抓包实战" aria-label="Permalink to &quot;Web 协议详解与抓包实战&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>以 TCP/IP 协议栈为依托，自上而下、从应用层至基础设施介绍：</p><ul><li>应用层 <ul><li>HTTP/1.1</li><li>WebSocket</li><li>HTTP/2.0</li></ul></li><li>应用层的安全基础设施 <ul><li>TLS/SSL</li></ul></li><li>传输层 <ul><li>TCP</li></ul></li><li>网际层及链接层 <ul><li>IP 层和以太网</li></ul></li></ul><h2 id="一、http-1-1-协议" tabindex="-1">一、HTTP/1.1 协议 <a class="header-anchor" href="#一、http-1-1-协议" aria-label="Permalink to &quot;一、HTTP/1.1 协议&quot;">​</a></h2><h3 id="http-协议" tabindex="-1">HTTP 协议 <a class="header-anchor" href="#http-协议" aria-label="Permalink to &quot;HTTP 协议&quot;">​</a></h3><p>HTTP（Hypertext Transfer Protocol） 是一种无状态的、应用层的，以请求，应答方式运行的协议，它使用可扩展的语义和自描述消息格式，与基于网络的超文本信息系统灵活的互动。</p><blockquote><p>a <strong>stateless</strong> application-level <strong>request/response</strong> protocol that uses <strong>extensible semantics</strong> and <strong>self-dscriptive</strong> message payloads for flexible interaction with network-based <strong>hypertext information</strong> systems。（RFC7230 ）</p></blockquote><p>###HTTP 消息格式</p><h4 id="http-协议格式" tabindex="-1">HTTP 协议格式 <a class="header-anchor" href="#http-协议格式" aria-label="Permalink to &quot;HTTP 协议格式&quot;">​</a></h4><p>请求体</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"><span style="color:#B392F0;">Host</span><span style="color:#E1E4E8;">: yueluo.club</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">GET</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"><span style="color:#6F42C1;">Host</span><span style="color:#24292E;">: yueluo.club</span></span></code></pre></div><p>响应体</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OK</span></span>
<span class="line"><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">: Wed, </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;"> May </span><span style="color:#79B8FF;">2021</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GMT</span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">: application</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">octet</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">stream</span></span>
<span class="line"><span style="color:#E1E4E8;">Transfer</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Encoding</span><span style="color:#E1E4E8;">: chunked</span></span>
<span class="line"><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;">: keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">OK</span></span>
<span class="line"><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">: Wed, </span><span style="color:#005CC5;">19</span><span style="color:#24292E;"> May </span><span style="color:#005CC5;">2021</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">29</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">00</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GMT</span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">: application</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">octet</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">stream</span></span>
<span class="line"><span style="color:#24292E;">Transfer</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Encoding</span><span style="color:#24292E;">: chunked</span></span>
<span class="line"><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;">: keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span></span></code></pre></div><h4 id="abnf-扩充巴科斯-瑙尔范式" tabindex="-1">ABNF（扩充巴科斯-瑙尔范式） <a class="header-anchor" href="#abnf-扩充巴科斯-瑙尔范式" aria-label="Permalink to &quot;ABNF（扩充巴科斯-瑙尔范式）&quot;">​</a></h4><p>定义语法的元语言。包括两部分，操作符和核心规则。</p><p><strong>操作符</strong></p><ul><li>空白字符：用来分割定义中的各个元素 <ul><li>method SP request-target SP HTTP-version CRLF</li></ul></li><li>选择 /：表示多个规则都是可供选择的规则 <ul><li>start-line = request-line / status-line</li></ul></li><li>值范围 %c##-## <ul><li>&quot;0&quot; / &quot;1&quot; / &quot;2&quot; / &quot;3&quot; / &quot;4&quot; / &quot;5&quot; / &quot;6&quot; / &quot;7&quot; 与 OCTL = %x30-37 等价</li></ul></li><li>序列组合 ()：将规则组合起来，视为单个元素</li><li>不定量重复 m * n <ul><li><code>*</code> 元素标识零个或更多元素 *(header-field CRLF)</li><li>1* 元素表示一个或更多元素，2*4 元素表示两个至四个元素</li></ul></li><li>可选序列 [] <ul><li>[message-body]</li></ul></li></ul><p><strong>核心规则</strong></p><p><a href="https://time.geekbang.org/course/detail/100026801-93589" target="_blank" rel="noreferrer">ABNF(Augmented BNF) 官方文档</a></p><img src="`+o+'"><h4 id="基于-abnf-描述的-http-协议格式" tabindex="-1">基于 ABNF 描述的 HTTP 协议格式 <a class="header-anchor" href="#基于-abnf-描述的-http-协议格式" aria-label="Permalink to &quot;基于 ABNF 描述的 HTTP 协议格式&quot;">​</a></h4><img src="'+i+`"><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">telnet www.taohui.pub </span><span style="color:#79B8FF;">80</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">telnet www.taohui.pub </span><span style="color:#005CC5;">80</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">wp</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">content</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">plugins</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Pure</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Highlightjs_1.</span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">assets</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">pure</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">highlight.css</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">ver</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0.1</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Host</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">www.taohui.pub</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">GET</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">wp</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">content</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">plugins</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Pure</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Highlightjs_1.</span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">assets</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">pure</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">highlight.css</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">ver</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0.1</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Host</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">www.taohui.pub</span></span></code></pre></div><h3 id="网络为什么要分层" tabindex="-1">网络为什么要分层 <a class="header-anchor" href="#网络为什么要分层" aria-label="Permalink to &quot;网络为什么要分层&quot;">​</a></h3><h4 id="osi-概念模型" tabindex="-1">OSI 概念模型 <a class="header-anchor" href="#osi-概念模型" aria-label="Permalink to &quot;OSI 概念模型&quot;">​</a></h4><p>OSI（Open System Interconnction Reference Model）概念模型。</p><blockquote><p>OSI 是概念模型，并没有被实现。</p></blockquote><img src="`+t+'"><h4 id="osi-概念模型与-tcp-ip-模型对照" tabindex="-1">OSI 概念模型与 TCP/IP 模型对照 <a class="header-anchor" href="#osi-概念模型与-tcp-ip-模型对照" aria-label="Permalink to &quot;OSI 概念模型与 TCP/IP 模型对照&quot;">​</a></h4><img src="'+n+'"><h4 id="报文头部" tabindex="-1">报文头部 <a class="header-anchor" href="#报文头部" aria-label="Permalink to &quot;报文头部&quot;">​</a></h4><img src="'+r+'"><h3 id="http-解决的问题" tabindex="-1">HTTP 解决的问题 <a class="header-anchor" href="#http-解决的问题" aria-label="Permalink to &quot;HTTP 解决的问题&quot;">​</a></h3><h4 id="roy-thomas-fielding-与-http-1-1" tabindex="-1">Roy Thomas Fielding 与 HTTP/1.1 <a class="header-anchor" href="#roy-thomas-fielding-与-http-1-1" aria-label="Permalink to &quot;Roy Thomas Fielding 与 HTTP/1.1&quot;">​</a></h4><ul><li>参与指定 HTTP/1.0 规范（1996.5）</li><li>参与制定 URI 规范（1998.8）</li><li>主导制定 HTTP/1.1 规范（1999.6）</li><li>2000 年发布指导 HTTP/1.1 规范制定的论文 <ul><li>《Architectural Style and the Design of Network-based Software Architectures》，即我们常谈的 Representational State Transfer（REST）架构</li></ul></li><li>Apache 基金会（The Apache Software Foundation）共同创始人 <ul><li>参与开发 Apache httpd 服务</li></ul></li></ul><h4 id="form-follows-function" tabindex="-1">Form Follows Function <a class="header-anchor" href="#form-follows-function" aria-label="Permalink to &quot;Form Follows Function&quot;">​</a></h4><p>HTTP 协议为什么是现在这个样子？</p><ul><li>HTTP 协议 <ul><li>Roy Thomas Fielding：HTTP 主要作者，REST 架构作者</li></ul></li><li>URI：统一资源标识符</li></ul><img src="'+p+'"><h4 id="http-解决了什么问题" tabindex="-1">HTTP 解决了什么问题？ <a class="header-anchor" href="#http-解决了什么问题" aria-label="Permalink to &quot;HTTP 解决了什么问题？&quot;">​</a></h4><p>万维网创始人：蒂姆 伯纳斯 - 李。</p><p>人与机器之间可以通信，交换共享信息。</p><blockquote><p>Web&#39;s major goal was to be a shared information space through which people and machines could communicate. --Tim Berners Lee</p></blockquote><p><strong>解决 WWW 信息交互比较面对的需求：</strong></p><ul><li>低门槛</li><li>可扩展性：巨大的用户群体，超长的寿命</li><li>分布式系统下的 Hypermedia：大粒度数据的网络传输</li><li>Internet 规模 <ul><li>无法控制的 scalability（可伸缩性） <ul><li>不可预测的负载、非法格式的数据、恶意消息</li><li>客户端不能保持所有服务器信息，服务器不能保持多个请求间的状态信息</li></ul></li><li>独立的组件部署：新老组件并存</li></ul></li><li>向前兼容：自 1933 年起 HTTP0.9\\1.0（1996）已经被广泛使用</li></ul><h3 id="web-架构的七大关键属性" tabindex="-1">Web 架构的七大关键属性 <a class="header-anchor" href="#web-架构的七大关键属性" aria-label="Permalink to &quot;Web 架构的七大关键属性&quot;">​</a></h3><h4 id="评估-web-架构的关键属性" tabindex="-1">评估 Web 架构的关键属性 <a class="header-anchor" href="#评估-web-架构的关键属性" aria-label="Permalink to &quot;评估 Web 架构的关键属性&quot;">​</a></h4><p>HTTP 协议应当在以下属性中取得可接受的均衡：</p><ol><li><p>性能 performance：影响高可用的关键因素</p></li><li><p>可伸缩性 Scalability：支持部署可以互相交互的大量组件</p></li><li><p>简单性 Simplicity：易理解、易实现、易验证</p></li><li><p>可见性 Visiable：对两个组件间的交互进行监视或者仲裁的能力，如缓存、分层设计等</p></li><li><p>可移植性 Portability：在不同的环境下运行的能力</p></li><li><p>可靠性 Reliability：出现部分故障时，对整体影响的程度</p></li><li><p>可修改性 Modifiability：对系统作出修改的难易程度，由可进化性、可定制性、可扩展性、可配置性、可重用性构成</p></li></ol><h4 id="架构属性-性能" tabindex="-1">架构属性：性能 <a class="header-anchor" href="#架构属性-性能" aria-label="Permalink to &quot;架构属性：性能&quot;">​</a></h4><ul><li>网络性能 Network Performance <ul><li>Throughput 吞吐量：小于等于带宽 bandwidth</li><li>Overhead 开销：首次开销，每次开销</li></ul></li><li>用户感知到的性能 User-perceived Performance <ul><li>Latency 延迟：发起请求都接收响应的时间 <ul><li>用户发起动作的感知</li><li>建立连接</li><li>发送请求、接收请求</li><li>将响应展现给用户</li></ul></li><li>Completion 完成时间：完成一个应用动作所花费的时间</li></ul></li><li>网络效率 Network Efficiency <ul><li>重用缓存、减少交互次数、数据传输距离更近、COD</li></ul></li></ul><h4 id="架构属性-可修改性" tabindex="-1">架构属性：可修改性 <a class="header-anchor" href="#架构属性-可修改性" aria-label="Permalink to &quot;架构属性：可修改性&quot;">​</a></h4><ul><li>可进化性 Evolvability：一个组件独立升级而不影响其他组件</li><li>可扩展性 Extensibillty：向系统添加功能，而不会影响到系统的其他部分</li><li>可定制性 Customizability：临时性、定制性地更改某一要素来提供服务，不对常规客户产生影响</li><li>可配置性 Configuability：应用部署后可通过修改配置提供新的功能</li><li>可重用性 Reusabilit：组件可以不做修改在其他应用在使用</li></ul><h4 id="rest-架构下的-web" tabindex="-1">Rest 架构下的 Web <a class="header-anchor" href="#rest-架构下的-web" aria-label="Permalink to &quot;Rest 架构下的 Web&quot;">​</a></h4><img src="'+c+'"><h3 id="架构风格推导出-http-的-rest-架构" tabindex="-1">架构风格推导出 HTTP 的 REST 架构 <a class="header-anchor" href="#架构风格推导出-http-的-rest-架构" aria-label="Permalink to &quot;架构风格推导出 HTTP 的 REST 架构&quot;">​</a></h3><h4 id="_5-种架构风格" tabindex="-1">5 种架构风格 <a class="header-anchor" href="#_5-种架构风格" aria-label="Permalink to &quot;5 种架构风格&quot;">​</a></h4><ul><li>数据流风格 Data-flow Styles <ul><li>优点：简单性、可进化性、可扩展性、可配置性、可重用性</li><li>Nginx 、协议分层都是数据流风格</li></ul></li><li>复制风格 Replication Styles <ul><li>优点：用户可察觉的性能、可伸缩性，网络效率，可靠性也可以提到提升</li></ul></li><li>分层风格 Hierarchical Styles <ul><li>优点：简单性、可进化性、伸缩性</li></ul></li><li>移动代码风格 Mobile Code Styles <ul><li>优点：可移植性、可扩展性、网络效率</li></ul></li><li>点对点风格 Peer-to-Peer Styles <ul><li>优点：可进化性、可重用性、可扩展性、可配置性</li></ul></li></ul><h4 id="数据流风格-data-flow-styles" tabindex="-1">数据流风格 Data-flow Styles <a class="header-anchor" href="#数据流风格-data-flow-styles" aria-label="Permalink to &quot;数据流风格 Data-flow Styles&quot;">​</a></h4><p>管道与过滤器 Pipe And Filter，PF</p><p>每个 Filter 都有输入端和输出端，只能从输入端读取数据，处理后再从输出端产生数据</p><img src="'+u+'"><p><strong>统一接口的管道与过滤器 Uniform Pipe And Filter，UDF</strong></p><p>在 PF 上增加了统一接口的约束，所有 Fiter 过滤器必须具备同样的接口</p><img src="'+h+'"><h4 id="复制风格-replication-styles" tabindex="-1">复制风格 Replication Styles <a class="header-anchor" href="#复制风格-replication-styles" aria-label="Permalink to &quot;复制风格 Replication Styles&quot;">​</a></h4><p><strong>复制仓库 Replicated Repository，RR</strong></p><p>多个进程提供相同的服务，通过反向代理对外提供集中服务</p><blockquote><p>MySQL 冷热备份、Web Application 反向代理等等</p></blockquote><p><strong>缓存 $</strong></p><p>RR 的变体，通过复制请求的结果，为后续请求复用</p><img src="'+d+'"><img src="'+y+'"><h4 id="分层风格-hierarchical-styles" tabindex="-1">分层风格 Hierarchical Styles <a class="header-anchor" href="#分层风格-hierarchical-styles" aria-label="Permalink to &quot;分层风格 Hierarchical Styles&quot;">​</a></h4><ul><li>客户端服务器 Client-Server，CS <ul><li>由 Client 触发请求，Server 监听到请求后产生响应，Client 一直等待收到响应后，会话结束</li><li>分离关注点隐藏细节，良好的简单性、可伸缩性、可进化性</li></ul></li><li>分层系统 Layered System，LS <ul><li>每一层为其之上的层服务，并使用在其之下的层提供的服务，例如 TCP/IP</li></ul></li><li>分层客户端服务器 Layered Client-Server，LCS <ul><li>LS + CS，例如正向代理和反向代理，从空间上分为外部层和内部层</li></ul></li><li>无状态、客户端服务器 Client-Stateless-Server CSS <ul><li>基于 CS，服务器上不允许有 session state 会话状态</li><li>提升了可见性、可伸缩性、可靠性，但重复数据导致降低网络性能</li></ul></li><li>缓存、无状态、客户端服务器 Client-Cache-Stateless-Server C$SS <ul><li>提升性能</li></ul></li><li>分层、缓存、无状态、客户端服务器 Layered-Client-Stateless-Server LC$SS</li></ul><img src="'+m+'"><ul><li>远程会话 Remote Session，RS <ul><li>CS 变体，服务器保存 Application state 应用状态</li><li>可伸缩性、可见性差</li><li>例如 FTP 。</li></ul></li><li>远程访问 Remote Data Access，PDA <ul><li>CS 变体，Application state 应用状态同时分布在客户端与服务器</li><li>巨大的数据集有可能通过迭代而减少</li><li>简单性、可伸缩性差</li></ul></li></ul><blockquote><p>在 Rest 风格架构中，远程会话和远程访问并没有使用到。</p></blockquote><img src="'+b+'"><h4 id="移动代码风格-mobile-code-styles" tabindex="-1">移动代码风格 Mobile Code Styles <a class="header-anchor" href="#移动代码风格-mobile-code-styles" aria-label="Permalink to &quot;移动代码风格 Mobile Code Styles&quot;">​</a></h4><ul><li>虚拟机 Virtual Machine，VM <ul><li>分离指令与实现</li></ul></li><li>远程求值 Remote Evaluation，REV <ul><li>基于 CS 的 VM，将代码发送至服务器执行</li></ul></li><li>按需代码 Code On Demand，COD <ul><li>服务器在响应中发回处理代码，在客户端执行</li><li>优秀的可扩展性和可配置性，提升用户可察觉性能和网络效率</li><li>JavaScript 就是 COD 架构风格。</li></ul></li><li>分层、按需代码、缓存、无状态、客户端服务器 <ul><li>Layered-Code-on-Demand-Client-Cache-Stateless-Server，LCODC$SS</li><li>LC$SS + COD</li></ul></li><li>移动代理 Mobile Agent，MA <ul><li>相当于 REV + COD</li></ul></li></ul><img src="'+q+'"><p>代码与执行过程或者执行过程分离，例如 Javascript。</p><img src="'+g+'"><h4 id="点对点风格-peer-to-peer-styles" tabindex="-1">点对点风格 Peer-to-Peer Styles <a class="header-anchor" href="#点对点风格-peer-to-peer-styles" aria-label="Permalink to &quot;点对点风格 Peer-to-Peer Styles&quot;">​</a></h4><ul><li>Event-based Integration，EBI <ul><li>基于事件集成系统，如由类似 Kafka 这样的消息系统 + 分发订阅来消除耦合</li><li>优秀的可重用性、可扩展性、可进化性</li><li>缺乏可理解性</li><li>由于消息广播等因素造成的消息风暴，可伸缩性差</li></ul></li><li>Chiron-2，C2 <ul><li>相当于 EBI + LCS，控制了消息的方向</li></ul></li><li>Distribute Objects，DO <ul><li>组件结对交互</li></ul></li><li>Brokered Distributed Objects，BDO <ul><li>引入名字解析组件来简化 DO，例如 CORBA</li></ul></li></ul><p><strong>Rest 风格中没有使用点对点风格。</strong></p><img src="'+E+'"><h4 id="rest-架构风格演化" tabindex="-1">Rest 架构风格演化 <a class="header-anchor" href="#rest-架构风格演化" aria-label="Permalink to &quot;Rest 架构风格演化&quot;">​</a></h4><img src="'+f+'" style="zoom:80%;"><h3 id="如何使用-network-面板" tabindex="-1">如何使用 Network 面板 <a class="header-anchor" href="#如何使用-network-面板" aria-label="Permalink to &quot;如何使用 Network 面板&quot;">​</a></h3><h4 id="chome-抓包" tabindex="-1">Chome 抓包 <a class="header-anchor" href="#chome-抓包" aria-label="Permalink to &quot;Chome 抓包&quot;">​</a></h4><p><a href="https://developers.google.com/web/tools/chrome-devtools/network/" target="_blank" rel="noreferrer">https://developers.google.com/web/tools/chrome-devtools/network/</a></p><p>快捷键：Control + shift + i （windows）、Command + Option + I（Mac）</p><img src="'+C+'"><ul><li>控制器：控制面板的外观与功能</li><li>过滤器：过滤请求列表中显示的资源 <ul><li>按住 Command（Mac）或 Ctrl （Windows/Linux），然后点击过滤器可以同时选择国歌过滤器</li></ul></li><li>概览：显示 HTTP 请求、响应的时间轴</li><li>请求列表：默认时间排序，可选择显示列</li><li>概要：请求总数、总数据量、总花费时间等</li></ul><h4 id="控制器" tabindex="-1">控制器 <a class="header-anchor" href="#控制器" aria-label="Permalink to &quot;控制器&quot;">​</a></h4><ul><li>抓包</li><li>停止抓包</li><li>清除请求</li><li>跨页面加载保存请求：Preserve log <ul><li>所有的浏览器请求是以 log 的方式存储在浏览器上的，Preserve log 可以在页面跳转后，保留上一个页面的 log。</li></ul></li><li>屏幕截图：Capture screenshots</li><li>重新执行 XHR 请求：右键点击请求选择 Replay XHR</li><li>停用浏览器缓存</li><li>手动清除浏览器缓存：右键点击请求选择 Clear Browser Cache</li><li>离线模拟：Offine</li><li>模拟慢速网络连接：Network Throttling，可自定义网速 <ul><li>Custom - Add - Add custom profile... <ul><li>Profile Name</li><li>Download、Upload、Latency</li></ul></li></ul></li><li>手动清除浏览器 Cookie：右键点击请求 Clear Browser Cookies</li><li>隐藏 Filters 窗格</li><li>隐藏 Overview 窗格</li></ul><h4 id="过滤器-按类型" tabindex="-1">过滤器：按类型 <a class="header-anchor" href="#过滤器-按类型" aria-label="Permalink to &quot;过滤器：按类型&quot;">​</a></h4><ul><li>XHR、JS、CSS、Img、Media、Font、Doc、WS（WebSocket）、Manifest 或 Other （此处未列出的任何其他类型）</li><li>多类型，Command（Mac）或 Ctrl （Windows、Linux）</li><li>按时间过滤：概览面板，拖动滚动条</li><li>隐藏 Data URLs：CSS 图片等小文件以 BASE64 格式嵌入 HTML 中，以减少请求数</li></ul><h4 id="过滤器-属性过滤" tabindex="-1">过滤器：属性过滤 <a class="header-anchor" href="#过滤器-属性过滤" aria-label="Permalink to &quot;过滤器：属性过滤&quot;">​</a></h4><ul><li>domain：仅显示来自指定域的资源。可以使用通配字符（*）纳入多个域</li><li>has-response-header：显示包含指定 HTTP 响应标头的资源</li><li>is：使用 is:running 可以查找 WebSocket 资源，is:form-cache 可查找缓存读出的资源</li><li>larger-than：显示大于指定大小的资源（以字节为单位）。将值设为 1000 等同于设置为 1K</li><li>method：显示通过指定 HTTP 方法类型检索的资源</li><li>mine-type：显示指定 MIME 类型的资源</li></ul><p>多属性间通过空格实现 AND 操作。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">domain</span><span style="color:#E1E4E8;">:</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.yueluo.club </span><span style="color:#B392F0;">method</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">GET</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">domain</span><span style="color:#24292E;">:</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">.yueluo.club </span><span style="color:#6F42C1;">method</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">GET</span></span></code></pre></div><ul><li>mixed-content：显示所有混合内容资源（mixed-content:all），或者仅显示当前显示的资源（mixed-content:displayed）</li><li>scheme：显示通过未保护 HTTP（scheme:http）或受保护 HTTPS（scheme:https）检索的资源</li><li>set-cookie-domain：显示具有 Set-Cookie 标头并且 Domain 属性与指定资源匹配的资源</li><li>set-cookie-name：显示具有 Set-Cookie 标头并且名称与指定值匹配的资源</li><li>set-cookie-value：显示具有 Set-Cookie 标头并且值与指定值匹配的资源</li><li>status-code：仅显示 HTTP 状态代码与指定代码匹配的资源</li></ul><h4 id="请求列表" tabindex="-1">请求列表 <a class="header-anchor" href="#请求列表" aria-label="Permalink to &quot;请求列表&quot;">​</a></h4><ul><li>Name：资源名称</li><li>Status：HTTP 状态码</li><li>Type：请求的资源的 MIME 类型</li><li>Initiator：发起请求的对象或进程，可以有以下取值 <ul><li>Parse（解释器）：Chrome 的 HTML 解析器发起请求 <ul><li>鼠标悬停显示 JS 脚本</li></ul></li><li>Redirect（重定向）：HTTP 重定向启动请求</li><li>Script（脚本）：脚本启动请求</li><li>Other（其他）：一些其他进程或动作发起请求，例如用户点击链接跳转到页面或在地址栏中输入网址</li></ul></li><li>Size：服务器返回的响应大小（包括头部和包体），可显示解压后大小</li><li>Time：总持续时间，从请求的开始到接收响应中的最后一个字节</li><li>Waterfall：各请求相关活动的直观分析图</li><li>添加其他列 <ul><li>添加响应列</li></ul></li><li>添加自定义列</li></ul><img src="'+T+'"><h4 id="请求列表排序" tabindex="-1">请求列表排序 <a class="header-anchor" href="#请求列表排序" aria-label="Permalink to &quot;请求列表排序&quot;">​</a></h4><ul><li><p>时间排序（默认）</p></li><li><p>按列排序</p></li><li><p>按活动时间排序</p><ul><li>StartTime：发出的第一个请求位于顶部</li><li>Response Time：开始下载的第一个请求位于顶部</li><li>EndTime：完成的第一个请求位于顶部</li><li>Total Duration：连接设置时间和请求/响应时间最短的请求位于顶部</li><li>Latency：等待最短响应时间的请求位于顶部</li></ul></li></ul><h4 id="预览请求内容" tabindex="-1">预览请求内容 <a class="header-anchor" href="#预览请求内容" aria-label="Permalink to &quot;预览请求内容&quot;">​</a></h4><ul><li>查看头部</li><li>查看 Cookie</li><li>预览响应报文：查看图像</li><li>查看响应正文</li><li>时间详细分布</li><li>导出数据为 HAR 格式</li><li>查看未压缩后的资源大小：Use Large Request Rows</li><li>浏览器加载时间（概览、概要、请求列表） <ul><li>DOMContendLoaded 事件的颜色设置为蓝色，而 load 事件设置为红色</li></ul></li><li>将请求数据复制到剪贴板 <ul><li>Copy Link Address：将请求的网址复制到剪贴版</li><li>Copy Response：将响应包体复制到剪贴版</li><li>Copy as cURL：以 cURL 命令形式赋值请求</li><li>Copy Al as cURL：以一系列 cURL 命令形式复制所有请求</li><li>Copy All as HAR：以 HAR 数据形式复制所有请求</li></ul></li><li>查看请求上下游：按住 shift 键悬停请求上，绿色是上游，红色是下游</li></ul><h4 id="浏览器加载时间" tabindex="-1">浏览器加载时间 <a class="header-anchor" href="#浏览器加载时间" aria-label="Permalink to &quot;浏览器加载时间&quot;">​</a></h4><ul><li>触发流程 <ul><li>解析 HTML 结构</li><li>加载外部脚本和样式文件</li><li>解析并执行脚本代码（部分脚本会阻塞页面加载）</li><li>DOM 树构建完成（DOMContentLoaded 事件）</li><li>加载图片等外部文件</li><li>页面加载完毕（load 事件）</li></ul></li></ul><h4 id="预览请求内容-timing" tabindex="-1">预览请求内容：timing <a class="header-anchor" href="#预览请求内容-timing" aria-label="Permalink to &quot;预览请求内容：timing&quot;">​</a></h4><ul><li>Queueing：浏览器在以下情况下对请求排队 <ul><li>存在更高优先级的请求</li><li>此源已打开六个 TCP 连接，达到限值，仅适用于 HTTP/1.0 和 HTTP/1.1</li><li>浏览器正在短暂分配磁盘中的空间</li></ul></li><li>Stalled：请求可能会因 Queueing 中描述的任何原因而停止</li><li>DNS Lookup：浏览器正在解析请求的 IP 地址</li><li>Proxy Negotiation：浏览器正在与代理服务器协商请求</li><li>Request sent：正在发送请求</li><li>ServiceWorker Preparation：浏览器正在启动 Service Worker</li><li>Request to ServiceWorker：正在将请求发送到 Service Worker</li><li>Waiting（TTFB）：浏览器正在等待响应的第一个字节。TTFB 表示 Time To First Byte（至第一字节的时间）。此时间包括 1 次往返延迟时间及服务器准备响应所有的时间</li><li>Content Download：浏览器正在接收响应</li><li>Reveiving Push：浏览器正在通过 HTTP/2 服务器推送接收此类型的数据</li><li>Reading Push：浏览器正在读取之前收到的本地数据</li></ul><img src="'+P+'"><h3 id="uri-的基本格式" tabindex="-1">URI 的基本格式 <a class="header-anchor" href="#uri-的基本格式" aria-label="Permalink to &quot;URI 的基本格式&quot;">​</a></h3><h4 id="当没有-uri-时" tabindex="-1">当没有 URI 时 <a class="header-anchor" href="#当没有-uri-时" aria-label="Permalink to &quot;当没有 URI 时&quot;">​</a></h4><p>站长 A 想要分享一部电影给 B，需要告诉：</p><ul><li>请使用 FTP 访问 mysite.net，端口是 8502</li><li>登录用户名是 user，密码 pass</li><li>进入到 /shared/movie 目录下</li><li>转换为二进制模式</li><li>下载名为 xxx.mkv 格式的文件</li></ul><p>有了 URI：<code>ftp://user:pass@yueluo.club:8502/shared/movie/xxx.mkv</code></p><h4 id="什么是-uri" tabindex="-1">什么是 URI <a class="header-anchor" href="#什么是-uri" aria-label="Permalink to &quot;什么是 URI&quot;">​</a></h4><ul><li><p>URL：RFC1738（1994.12），Uniform Resource Locator，表示资源的位置，期望提供查找资源的方法</p></li><li><p>URN：RFC2141（1997.5），Uniform Resource Name，期望为资源提供持久的、位置无关的标识方法，并允许简单地将多个命名空间映射到单个 URN 命名空间。</p><ul><li>例如磁力链接：<code>magnet:?xt=urn:sha1:YNCKHTQC5C</code></li></ul></li><li><p>URI：RFC1630（1994.6）、RFC3986（2005.1，取代 RFC2396 和 RFC2732），Unform Resource Identifier，用以区分资源，是 URI 和 URN 的超级，用以取代 URL 和 URN 概念。</p></li></ul><h4 id="uri" tabindex="-1">URI <a class="header-anchor" href="#uri" aria-label="Permalink to &quot;URI&quot;">​</a></h4><p>Uniform Resource Identifier 统一资源标识符</p><ul><li>Resource 资源 <ul><li>可以是图片、文档、今天的温度等，也可以是不能通过互联网访问的实体，例如人、公司、实体书，也可以是抽象的概念，例如亲属关系或者符号</li><li>一个资源可以有多个 URI</li></ul></li><li>Identifier 标识符 <ul><li>将当前资源与其他资源区分开的名称</li></ul></li><li>Uniform 统一 <ul><li>允许不同种类的资源在同一上下文出现</li><li>对不同种类的资源标识符可以使用同一种语义进行解读</li><li>引入新标识符时，不会对已有标识符产生影响</li><li>允许同一资源标识符在不同的，internet 规模下的上下文中出现</li></ul></li></ul><h4 id="uri-的组成" tabindex="-1">URI 的组成 <a class="header-anchor" href="#uri-的组成" aria-label="Permalink to &quot;URI 的组成&quot;">​</a></h4><p>组成：schema、user information、host、port、path、query、fragment</p><img src="'+k+'"><img src="'+S+'"><h4 id="uri-格式" tabindex="-1">URI 格式 <a class="header-anchor" href="#uri-格式" aria-label="Permalink to &quot;URI 格式&quot;">​</a></h4><ul><li><code>URI = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ] </code></li><li><code>scheme = ALPHA *( ALPHA / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; ) </code><ul><li>例如：http, https, ftp,mailto,rtsp,file,telnet</li></ul></li><li><code>query = *( pchar / &quot;/&quot; / &quot;?&quot; ) </code></li><li><code>fragment = *( pchar / &quot;/&quot; / &quot;?&quot; ) </code></li></ul><p><a href="https://tools.ietf.org/html/rfc7231?test=1#page=-7" target="_blank" rel="noreferrer">https://tools.ietf.org/html/rfc7231?test=1#page=-7</a></p><p><strong>hier-part</strong></p><p><code>hier-part = &quot;//&quot; authority path-abempty / path-absolute / path-rootless / path-empty </code></p><ul><li>authority =<code>[ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ]</code><ul><li>userinfo = <code>*( unreserved / pct-encoded / sub-delims / &quot;:&quot; )</code></li><li>host = <code>IP-literal / IPv4address / reg-name</code></li><li>port =<code>*DIGIT</code></li></ul></li></ul><p><a href="https://tom:pass@localhost:8080/index.html" target="_blank" rel="noreferrer">https://tom:pass@localhost:8080/index.html</a></p><p><strong>path = path-abempty/ path-absolute/ path-noscheme / path-rootless / path-empty</strong></p><ul><li>path-abempty = <code>*( “/” segment )</code><ul><li>以/开头的路径或者空路径</li></ul></li><li>path-absolute =<code> “/” [ segment-nz *( “/” segment ) ]</code><ul><li>以/开头的路径，但不能以//开头</li></ul></li><li>path-noscheme = <code>segment-nz-nc *( “/” segment )</code><ul><li>以非:号开头的路径</li></ul></li><li>path-rootless = <code>segment-nz *( “/” segment ) </code><ul><li>相对path-noscheme，增加允许以:号开头的路径</li></ul></li><li>path-empty = <code>0&lt;pchar&gt;</code><ul><li>空路径</li></ul></li></ul><h4 id="相对-uri" tabindex="-1">相对 URI <a class="header-anchor" href="#相对-uri" aria-label="Permalink to &quot;相对 URI&quot;">​</a></h4><p>URI-reference = <code>URI/relative-ref</code></p><ul><li>relative-ref = <code>relative-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ]</code><ul><li>relative-part = <code>&quot;//&quot; authority path-abempty / path-absolute / path-noscheme / path-empty</code></li></ul></li></ul><p><a href="https://tools.ietf.org/html/rfc7231?test=1#page=-7" target="_blank" rel="noreferrer">https://tools.ietf.org/html/rfc7231?test=1#page=-7</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">/html/rfc7231?test=1#page-7</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">/html/rfc7231?test=1#page-7</span></span></code></pre></div><h3 id="uri-编码" tabindex="-1">URI 编码 <a class="header-anchor" href="#uri-编码" aria-label="Permalink to &quot;URI 编码&quot;">​</a></h3><h4 id="为什么要进行-uri-编码" tabindex="-1">为什么要进行 URI 编码 <a class="header-anchor" href="#为什么要进行-uri-编码" aria-label="Permalink to &quot;为什么要进行 URI 编码&quot;">​</a></h4><ul><li>传递数据中，可以存在用作分隔符的保留字符</li><li>对可能产生歧义性的数据编码 <ul><li>不在 ASCII 码范围内的字符</li><li>ASCII 码不可显示的字符</li><li>URL 中规定的保留字符</li><li>不安全字符（传输环节中可能会被不正确处理），如空格、引号、尖括号等</li></ul></li></ul><h4 id="保留字符与非保留字符" tabindex="-1">保留字符与非保留字符 <a class="header-anchor" href="#保留字符与非保留字符" aria-label="Permalink to &quot;保留字符与非保留字符&quot;">​</a></h4><ul><li>保留字符 <ul><li>reserved = gen-delims / sub-delims <ul><li>gen-delims = <code>&quot;:&quot; / &quot;/&quot; / &quot;?&quot; / &quot;#&quot; / &quot;[&quot; / &quot;]&quot; / &quot;@&quot;</code></li><li>sub-delims = <code>&quot;!&quot; / &quot;$&quot; / &quot;&amp;&quot; / &quot;&#39;&quot; / &quot;(&quot; / &quot;)&quot; / &quot;*&quot; / &quot;+&quot; / &quot;,&quot; / &quot;;&quot; / &quot;=&quot;</code></li></ul></li></ul></li><li>非保留字符 <ul><li>unreserved = <code>ALPHA / DIGIT / &quot;**-**&quot; / &quot;**.**&quot; / &quot;**_**&quot; / &quot;~&quot;</code><ul><li>ALPHA: <code>%41-%5A and %61-%7A</code></li><li>DIGIT: <code>%30-%39 </code></li><li><code>-: %2D .: %2E _: %5F</code></li><li><code>~: %7E</code>，某些实现将其认为保留字符</li></ul></li></ul></li></ul><h4 id="uri-百分号编码" tabindex="-1">URI 百分号编码 <a class="header-anchor" href="#uri-百分号编码" aria-label="Permalink to &quot;URI 百分号编码&quot;">​</a></h4><ul><li><p>百分号编码的方式</p><ul><li>pct-encoded = <code>&quot;%&quot; HEXDIG HEXDIG</code><ul><li>US-ASCII：128 个字符（95 个可显示字符，33 个不可显示字符）</li><li>参见：<a href="https://zh.wikipedia.org/wiki/ASCII" target="_blank" rel="noreferrer">https://zh.wikipedia.org/wiki/ASCII</a></li></ul></li><li>对于 HEXDIG 十六进制中的字母，大小写等价</li></ul></li><li><p>非 ASCII 码字符（例如中文）：建议先 UTF8 编码，再 US-ASCII 编码</p></li><li><p>对 URI 合法字符，编码与不编码是等价的</p><ul><li><p>例如，“URI 转换”既可以“<code>URI%e8%bd%ac%e6%8d%a</code>”，也可以 “<code>%55%52%49%e8%bd%ac%e6%8d%a2</code>”</p><ul><li><a href="https://www.baidu.com/s?wd=URI%20%e8%bd%ac%e6%8d%a2" target="_blank" rel="noreferrer">https://www.baidu.com/s?wd=URI 转换</a></li><li><a href="https://www.baidu.com/s?wd=%55%52%49%20%e8%bd%ac%e6%8d%a2" target="_blank" rel="noreferrer">https://www.baidu.com/s?wd=URI 转换</a></li></ul></li></ul></li></ul><h3 id="http-的请求行" tabindex="-1">HTTP 的请求行 <a class="header-anchor" href="#http-的请求行" aria-label="Permalink to &quot;HTTP 的请求行&quot;">​</a></h3><h2 id="二、websocket-协议" tabindex="-1">二、WebSocket 协议 <a class="header-anchor" href="#二、websocket-协议" aria-label="Permalink to &quot;二、WebSocket 协议&quot;">​</a></h2><h2 id="三、http-2-协议" tabindex="-1">三、HTTP/2 协议 <a class="header-anchor" href="#三、http-2-协议" aria-label="Permalink to &quot;三、HTTP/2 协议&quot;">​</a></h2><h2 id="四、tls-ssl-协议" tabindex="-1">四、TLS/SSL 协议 <a class="header-anchor" href="#四、tls-ssl-协议" aria-label="Permalink to &quot;四、TLS/SSL 协议&quot;">​</a></h2><h2 id="五、tcp-协议" tabindex="-1">五、TCP 协议 <a class="header-anchor" href="#五、tcp-协议" aria-label="Permalink to &quot;五、TCP 协议&quot;">​</a></h2><h2 id="六、ip-协议" tabindex="-1">六、IP 协议 <a class="header-anchor" href="#六、ip-协议" aria-label="Permalink to &quot;六、IP 协议&quot;">​</a></h2>',160),_=[R];function I(w,v,x,H,A,D){return e(),a("div",null,_)}const B=l(F,[["render",I]]);export{L as __pageData,B as default};
